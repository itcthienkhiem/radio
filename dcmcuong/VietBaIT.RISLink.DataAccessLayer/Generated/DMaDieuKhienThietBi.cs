using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.RISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DMaDieuKhienThietBi class.
	/// </summary>
    [Serializable]
	public partial class DMaDieuKhienThietBiCollection : ActiveList<DMaDieuKhienThietBi, DMaDieuKhienThietBiCollection>
	{	   
		public DMaDieuKhienThietBiCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DMaDieuKhienThietBiCollection</returns>
		public DMaDieuKhienThietBiCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DMaDieuKhienThietBi o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_MaDieuKhienThietBi table.
	/// </summary>
	[Serializable]
	public partial class DMaDieuKhienThietBi : ActiveRecord<DMaDieuKhienThietBi>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DMaDieuKhienThietBi()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DMaDieuKhienThietBi(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DMaDieuKhienThietBi(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DMaDieuKhienThietBi(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_MaDieuKhienThietBi", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdMadk = new TableSchema.TableColumn(schema);
				colvarIdMadk.ColumnName = "IdMadk";
				colvarIdMadk.DataType = DbType.Int32;
				colvarIdMadk.MaxLength = 0;
				colvarIdMadk.AutoIncrement = true;
				colvarIdMadk.IsNullable = false;
				colvarIdMadk.IsPrimaryKey = true;
				colvarIdMadk.IsForeignKey = false;
				colvarIdMadk.IsReadOnly = false;
				colvarIdMadk.DefaultSetting = @"";
				colvarIdMadk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdMadk);
				
				TableSchema.TableColumn colvarIdThietBi = new TableSchema.TableColumn(schema);
				colvarIdThietBi.ColumnName = "IdThietBi";
				colvarIdThietBi.DataType = DbType.Int32;
				colvarIdThietBi.MaxLength = 0;
				colvarIdThietBi.AutoIncrement = false;
				colvarIdThietBi.IsNullable = false;
				colvarIdThietBi.IsPrimaryKey = false;
				colvarIdThietBi.IsForeignKey = false;
				colvarIdThietBi.IsReadOnly = false;
				colvarIdThietBi.DefaultSetting = @"";
				colvarIdThietBi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThietBi);
				
				TableSchema.TableColumn colvarBodyPart = new TableSchema.TableColumn(schema);
				colvarBodyPart.ColumnName = "BodyPart";
				colvarBodyPart.DataType = DbType.String;
				colvarBodyPart.MaxLength = 200;
				colvarBodyPart.AutoIncrement = false;
				colvarBodyPart.IsNullable = false;
				colvarBodyPart.IsPrimaryKey = false;
				colvarBodyPart.IsForeignKey = false;
				colvarBodyPart.IsReadOnly = false;
				colvarBodyPart.DefaultSetting = @"";
				colvarBodyPart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyPart);
				
				TableSchema.TableColumn colvarViewPos = new TableSchema.TableColumn(schema);
				colvarViewPos.ColumnName = "ViewPos";
				colvarViewPos.DataType = DbType.String;
				colvarViewPos.MaxLength = 50;
				colvarViewPos.AutoIncrement = false;
				colvarViewPos.IsNullable = false;
				colvarViewPos.IsPrimaryKey = false;
				colvarViewPos.IsForeignKey = false;
				colvarViewPos.IsReadOnly = false;
				colvarViewPos.DefaultSetting = @"";
				colvarViewPos.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViewPos);
				
				TableSchema.TableColumn colvarModalityCode = new TableSchema.TableColumn(schema);
				colvarModalityCode.ColumnName = "ModalityCode";
				colvarModalityCode.DataType = DbType.String;
				colvarModalityCode.MaxLength = 50;
				colvarModalityCode.AutoIncrement = false;
				colvarModalityCode.IsNullable = true;
				colvarModalityCode.IsPrimaryKey = false;
				colvarModalityCode.IsForeignKey = false;
				colvarModalityCode.IsReadOnly = false;
				colvarModalityCode.DefaultSetting = @"";
				colvarModalityCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModalityCode);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TrangThai";
				colvarTrangThai.DataType = DbType.Int32;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = false;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((1))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarIdDvu = new TableSchema.TableColumn(schema);
				colvarIdDvu.ColumnName = "Id_Dvu";
				colvarIdDvu.DataType = DbType.Int32;
				colvarIdDvu.MaxLength = 0;
				colvarIdDvu.AutoIncrement = false;
				colvarIdDvu.IsNullable = true;
				colvarIdDvu.IsPrimaryKey = false;
				colvarIdDvu.IsForeignKey = false;
				colvarIdDvu.IsReadOnly = false;
				colvarIdDvu.DefaultSetting = @"";
				colvarIdDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDvu);
				
				TableSchema.TableColumn colvarDesc = new TableSchema.TableColumn(schema);
				colvarDesc.ColumnName = "Desc";
				colvarDesc.DataType = DbType.String;
				colvarDesc.MaxLength = 200;
				colvarDesc.AutoIncrement = false;
				colvarDesc.IsNullable = true;
				colvarDesc.IsPrimaryKey = false;
				colvarDesc.IsForeignKey = false;
				colvarDesc.IsReadOnly = false;
				colvarDesc.DefaultSetting = @"";
				colvarDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesc);
				
				TableSchema.TableColumn colvarCustomField1 = new TableSchema.TableColumn(schema);
				colvarCustomField1.ColumnName = "CustomField1";
				colvarCustomField1.DataType = DbType.String;
				colvarCustomField1.MaxLength = 200;
				colvarCustomField1.AutoIncrement = false;
				colvarCustomField1.IsNullable = true;
				colvarCustomField1.IsPrimaryKey = false;
				colvarCustomField1.IsForeignKey = false;
				colvarCustomField1.IsReadOnly = false;
				colvarCustomField1.DefaultSetting = @"";
				colvarCustomField1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomField1);
				
				TableSchema.TableColumn colvarCustomField2 = new TableSchema.TableColumn(schema);
				colvarCustomField2.ColumnName = "CustomField2";
				colvarCustomField2.DataType = DbType.String;
				colvarCustomField2.MaxLength = 200;
				colvarCustomField2.AutoIncrement = false;
				colvarCustomField2.IsNullable = true;
				colvarCustomField2.IsPrimaryKey = false;
				colvarCustomField2.IsForeignKey = false;
				colvarCustomField2.IsReadOnly = false;
				colvarCustomField2.DefaultSetting = @"";
				colvarCustomField2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomField2);
				
				TableSchema.TableColumn colvarCustomField3 = new TableSchema.TableColumn(schema);
				colvarCustomField3.ColumnName = "CustomField3";
				colvarCustomField3.DataType = DbType.String;
				colvarCustomField3.MaxLength = 200;
				colvarCustomField3.AutoIncrement = false;
				colvarCustomField3.IsNullable = true;
				colvarCustomField3.IsPrimaryKey = false;
				colvarCustomField3.IsForeignKey = false;
				colvarCustomField3.IsReadOnly = false;
				colvarCustomField3.DefaultSetting = @"";
				colvarCustomField3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomField3);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_MaDieuKhienThietBi",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdMadk")]
		[Bindable(true)]
		public int IdMadk 
		{
			get { return GetColumnValue<int>(Columns.IdMadk); }
			set { SetColumnValue(Columns.IdMadk, value); }
		}
		  
		[XmlAttribute("IdThietBi")]
		[Bindable(true)]
		public int IdThietBi 
		{
			get { return GetColumnValue<int>(Columns.IdThietBi); }
			set { SetColumnValue(Columns.IdThietBi, value); }
		}
		  
		[XmlAttribute("BodyPart")]
		[Bindable(true)]
		public string BodyPart 
		{
			get { return GetColumnValue<string>(Columns.BodyPart); }
			set { SetColumnValue(Columns.BodyPart, value); }
		}
		  
		[XmlAttribute("ViewPos")]
		[Bindable(true)]
		public string ViewPos 
		{
			get { return GetColumnValue<string>(Columns.ViewPos); }
			set { SetColumnValue(Columns.ViewPos, value); }
		}
		  
		[XmlAttribute("ModalityCode")]
		[Bindable(true)]
		public string ModalityCode 
		{
			get { return GetColumnValue<string>(Columns.ModalityCode); }
			set { SetColumnValue(Columns.ModalityCode, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public int TrangThai 
		{
			get { return GetColumnValue<int>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("IdDvu")]
		[Bindable(true)]
		public int? IdDvu 
		{
			get { return GetColumnValue<int?>(Columns.IdDvu); }
			set { SetColumnValue(Columns.IdDvu, value); }
		}
		  
		[XmlAttribute("Desc")]
		[Bindable(true)]
		public string Desc 
		{
			get { return GetColumnValue<string>(Columns.Desc); }
			set { SetColumnValue(Columns.Desc, value); }
		}
		  
		[XmlAttribute("CustomField1")]
		[Bindable(true)]
		public string CustomField1 
		{
			get { return GetColumnValue<string>(Columns.CustomField1); }
			set { SetColumnValue(Columns.CustomField1, value); }
		}
		  
		[XmlAttribute("CustomField2")]
		[Bindable(true)]
		public string CustomField2 
		{
			get { return GetColumnValue<string>(Columns.CustomField2); }
			set { SetColumnValue(Columns.CustomField2, value); }
		}
		  
		[XmlAttribute("CustomField3")]
		[Bindable(true)]
		public string CustomField3 
		{
			get { return GetColumnValue<string>(Columns.CustomField3); }
			set { SetColumnValue(Columns.CustomField3, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varIdThietBi,string varBodyPart,string varViewPos,string varModalityCode,int varTrangThai,int? varIdDvu,string varDesc,string varCustomField1,string varCustomField2,string varCustomField3)
		{
			DMaDieuKhienThietBi item = new DMaDieuKhienThietBi();
			
			item.IdThietBi = varIdThietBi;
			
			item.BodyPart = varBodyPart;
			
			item.ViewPos = varViewPos;
			
			item.ModalityCode = varModalityCode;
			
			item.TrangThai = varTrangThai;
			
			item.IdDvu = varIdDvu;
			
			item.Desc = varDesc;
			
			item.CustomField1 = varCustomField1;
			
			item.CustomField2 = varCustomField2;
			
			item.CustomField3 = varCustomField3;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdMadk,int varIdThietBi,string varBodyPart,string varViewPos,string varModalityCode,int varTrangThai,int? varIdDvu,string varDesc,string varCustomField1,string varCustomField2,string varCustomField3)
		{
			DMaDieuKhienThietBi item = new DMaDieuKhienThietBi();
			
				item.IdMadk = varIdMadk;
			
				item.IdThietBi = varIdThietBi;
			
				item.BodyPart = varBodyPart;
			
				item.ViewPos = varViewPos;
			
				item.ModalityCode = varModalityCode;
			
				item.TrangThai = varTrangThai;
			
				item.IdDvu = varIdDvu;
			
				item.Desc = varDesc;
			
				item.CustomField1 = varCustomField1;
			
				item.CustomField2 = varCustomField2;
			
				item.CustomField3 = varCustomField3;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdMadkColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThietBiColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyPartColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ViewPosColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ModalityCodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDvuColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DescColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomField1Column
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomField2Column
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomField3Column
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdMadk = @"IdMadk";
			 public static string IdThietBi = @"IdThietBi";
			 public static string BodyPart = @"BodyPart";
			 public static string ViewPos = @"ViewPos";
			 public static string ModalityCode = @"ModalityCode";
			 public static string TrangThai = @"TrangThai";
			 public static string IdDvu = @"Id_Dvu";
			 public static string Desc = @"Desc";
			 public static string CustomField1 = @"CustomField1";
			 public static string CustomField2 = @"CustomField2";
			 public static string CustomField3 = @"CustomField3";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
