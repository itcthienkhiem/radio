using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.RISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DNhanVien class.
	/// </summary>
    [Serializable]
	public partial class DNhanVienCollection : ActiveList<DNhanVien, DNhanVienCollection>
	{	   
		public DNhanVienCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DNhanVienCollection</returns>
		public DNhanVienCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DNhanVien o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_NHAN_VIEN table.
	/// </summary>
	[Serializable]
	public partial class DNhanVien : ActiveRecord<DNhanVien>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DNhanVien()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DNhanVien(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DNhanVien(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DNhanVien(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_NHAN_VIEN", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaNvien = new TableSchema.TableColumn(schema);
				colvarMaNvien.ColumnName = "MA_NVIEN";
				colvarMaNvien.DataType = DbType.AnsiString;
				colvarMaNvien.MaxLength = 50;
				colvarMaNvien.AutoIncrement = false;
				colvarMaNvien.IsNullable = false;
				colvarMaNvien.IsPrimaryKey = true;
				colvarMaNvien.IsForeignKey = false;
				colvarMaNvien.IsReadOnly = false;
				colvarMaNvien.DefaultSetting = @"";
				colvarMaNvien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaNvien);
				
				TableSchema.TableColumn colvarTenNvien = new TableSchema.TableColumn(schema);
				colvarTenNvien.ColumnName = "TEN_NVIEN";
				colvarTenNvien.DataType = DbType.String;
				colvarTenNvien.MaxLength = 100;
				colvarTenNvien.AutoIncrement = false;
				colvarTenNvien.IsNullable = false;
				colvarTenNvien.IsPrimaryKey = false;
				colvarTenNvien.IsForeignKey = false;
				colvarTenNvien.IsReadOnly = false;
				colvarTenNvien.DefaultSetting = @"";
				colvarTenNvien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenNvien);
				
				TableSchema.TableColumn colvarIdKhoa = new TableSchema.TableColumn(schema);
				colvarIdKhoa.ColumnName = "ID_KHOA";
				colvarIdKhoa.DataType = DbType.Int32;
				colvarIdKhoa.MaxLength = 0;
				colvarIdKhoa.AutoIncrement = false;
				colvarIdKhoa.IsNullable = true;
				colvarIdKhoa.IsPrimaryKey = false;
				colvarIdKhoa.IsForeignKey = false;
				colvarIdKhoa.IsReadOnly = false;
				colvarIdKhoa.DefaultSetting = @"";
				colvarIdKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoa);
				
				TableSchema.TableColumn colvarUid = new TableSchema.TableColumn(schema);
				colvarUid.ColumnName = "UID";
				colvarUid.DataType = DbType.AnsiString;
				colvarUid.MaxLength = 50;
				colvarUid.AutoIncrement = false;
				colvarUid.IsNullable = true;
				colvarUid.IsPrimaryKey = false;
				colvarUid.IsForeignKey = false;
				colvarUid.IsReadOnly = false;
				colvarUid.DefaultSetting = @"";
				colvarUid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUid);
				
				TableSchema.TableColumn colvarMaKieuDvu = new TableSchema.TableColumn(schema);
				colvarMaKieuDvu.ColumnName = "MA_KIEU_DVU";
				colvarMaKieuDvu.DataType = DbType.String;
				colvarMaKieuDvu.MaxLength = 50;
				colvarMaKieuDvu.AutoIncrement = false;
				colvarMaKieuDvu.IsNullable = true;
				colvarMaKieuDvu.IsPrimaryKey = false;
				colvarMaKieuDvu.IsForeignKey = false;
				colvarMaKieuDvu.IsReadOnly = false;
				colvarMaKieuDvu.DefaultSetting = @"";
				colvarMaKieuDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKieuDvu);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "NGAY_SUA";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "NGUOI_SUA";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_NHAN_VIEN",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaNvien")]
		[Bindable(true)]
		public string MaNvien 
		{
			get { return GetColumnValue<string>(Columns.MaNvien); }
			set { SetColumnValue(Columns.MaNvien, value); }
		}
		  
		[XmlAttribute("TenNvien")]
		[Bindable(true)]
		public string TenNvien 
		{
			get { return GetColumnValue<string>(Columns.TenNvien); }
			set { SetColumnValue(Columns.TenNvien, value); }
		}
		  
		[XmlAttribute("IdKhoa")]
		[Bindable(true)]
		public int? IdKhoa 
		{
			get { return GetColumnValue<int?>(Columns.IdKhoa); }
			set { SetColumnValue(Columns.IdKhoa, value); }
		}
		  
		[XmlAttribute("Uid")]
		[Bindable(true)]
		public string Uid 
		{
			get { return GetColumnValue<string>(Columns.Uid); }
			set { SetColumnValue(Columns.Uid, value); }
		}
		  
		[XmlAttribute("MaKieuDvu")]
		[Bindable(true)]
		public string MaKieuDvu 
		{
			get { return GetColumnValue<string>(Columns.MaKieuDvu); }
			set { SetColumnValue(Columns.MaKieuDvu, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaNvien,string varTenNvien,int? varIdKhoa,string varUid,string varMaKieuDvu,DateTime? varNgaySua,DateTime? varNgayTao,string varNguoiSua,string varNguoiTao)
		{
			DNhanVien item = new DNhanVien();
			
			item.MaNvien = varMaNvien;
			
			item.TenNvien = varTenNvien;
			
			item.IdKhoa = varIdKhoa;
			
			item.Uid = varUid;
			
			item.MaKieuDvu = varMaKieuDvu;
			
			item.NgaySua = varNgaySua;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiSua = varNguoiSua;
			
			item.NguoiTao = varNguoiTao;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMaNvien,string varTenNvien,int? varIdKhoa,string varUid,string varMaKieuDvu,DateTime? varNgaySua,DateTime? varNgayTao,string varNguoiSua,string varNguoiTao)
		{
			DNhanVien item = new DNhanVien();
			
				item.MaNvien = varMaNvien;
			
				item.TenNvien = varTenNvien;
			
				item.IdKhoa = varIdKhoa;
			
				item.Uid = varUid;
			
				item.MaKieuDvu = varMaKieuDvu;
			
				item.NgaySua = varNgaySua;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiSua = varNguoiSua;
			
				item.NguoiTao = varNguoiTao;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaNvienColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenNvienColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn UidColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKieuDvuColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaNvien = @"MA_NVIEN";
			 public static string TenNvien = @"TEN_NVIEN";
			 public static string IdKhoa = @"ID_KHOA";
			 public static string Uid = @"UID";
			 public static string MaKieuDvu = @"MA_KIEU_DVU";
			 public static string NgaySua = @"NGAY_SUA";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string NguoiSua = @"NGUOI_SUA";
			 public static string NguoiTao = @"NGUOI_TAO";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
