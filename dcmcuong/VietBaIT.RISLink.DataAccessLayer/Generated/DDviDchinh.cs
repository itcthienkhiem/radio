using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.RISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DDviDchinh class.
	/// </summary>
    [Serializable]
	public partial class DDviDchinhCollection : ActiveList<DDviDchinh, DDviDchinhCollection>
	{	   
		public DDviDchinhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDviDchinhCollection</returns>
		public DDviDchinhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDviDchinh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_DVI_DCHINH table.
	/// </summary>
	[Serializable]
	public partial class DDviDchinh : ActiveRecord<DDviDchinh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDviDchinh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDviDchinh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDviDchinh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDviDchinh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_DVI_DCHINH", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaDviDchinh = new TableSchema.TableColumn(schema);
				colvarMaDviDchinh.ColumnName = "MA_DVI_DCHINH";
				colvarMaDviDchinh.DataType = DbType.AnsiString;
				colvarMaDviDchinh.MaxLength = 10;
				colvarMaDviDchinh.AutoIncrement = false;
				colvarMaDviDchinh.IsNullable = false;
				colvarMaDviDchinh.IsPrimaryKey = true;
				colvarMaDviDchinh.IsForeignKey = false;
				colvarMaDviDchinh.IsReadOnly = false;
				colvarMaDviDchinh.DefaultSetting = @"";
				colvarMaDviDchinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDviDchinh);
				
				TableSchema.TableColumn colvarTenDviDchinh = new TableSchema.TableColumn(schema);
				colvarTenDviDchinh.ColumnName = "TEN_DVI_DCHINH";
				colvarTenDviDchinh.DataType = DbType.String;
				colvarTenDviDchinh.MaxLength = 100;
				colvarTenDviDchinh.AutoIncrement = false;
				colvarTenDviDchinh.IsNullable = false;
				colvarTenDviDchinh.IsPrimaryKey = false;
				colvarTenDviDchinh.IsForeignKey = false;
				colvarTenDviDchinh.IsReadOnly = false;
				colvarTenDviDchinh.DefaultSetting = @"";
				colvarTenDviDchinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenDviDchinh);
				
				TableSchema.TableColumn colvarMaCha = new TableSchema.TableColumn(schema);
				colvarMaCha.ColumnName = "MA_CHA";
				colvarMaCha.DataType = DbType.String;
				colvarMaCha.MaxLength = 10;
				colvarMaCha.AutoIncrement = false;
				colvarMaCha.IsNullable = true;
				colvarMaCha.IsPrimaryKey = false;
				colvarMaCha.IsForeignKey = false;
				colvarMaCha.IsReadOnly = false;
				colvarMaCha.DefaultSetting = @"";
				colvarMaCha.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaCha);
				
				TableSchema.TableColumn colvarSttHthi = new TableSchema.TableColumn(schema);
				colvarSttHthi.ColumnName = "STT_HTHI";
				colvarSttHthi.DataType = DbType.Int32;
				colvarSttHthi.MaxLength = 0;
				colvarSttHthi.AutoIncrement = false;
				colvarSttHthi.IsNullable = false;
				colvarSttHthi.IsPrimaryKey = false;
				colvarSttHthi.IsForeignKey = false;
				colvarSttHthi.IsReadOnly = false;
				colvarSttHthi.DefaultSetting = @"";
				colvarSttHthi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSttHthi);
				
				TableSchema.TableColumn colvarLoaiDviDchinh = new TableSchema.TableColumn(schema);
				colvarLoaiDviDchinh.ColumnName = "LOAI_DVI_DCHINH";
				colvarLoaiDviDchinh.DataType = DbType.String;
				colvarLoaiDviDchinh.MaxLength = 50;
				colvarLoaiDviDchinh.AutoIncrement = false;
				colvarLoaiDviDchinh.IsNullable = false;
				colvarLoaiDviDchinh.IsPrimaryKey = false;
				colvarLoaiDviDchinh.IsForeignKey = false;
				colvarLoaiDviDchinh.IsReadOnly = false;
				colvarLoaiDviDchinh.DefaultSetting = @"";
				colvarLoaiDviDchinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaiDviDchinh);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TRANG_THAI";
				colvarTrangThai.DataType = DbType.Int32;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_DVI_DCHINH",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaDviDchinh")]
		[Bindable(true)]
		public string MaDviDchinh 
		{
			get { return GetColumnValue<string>(Columns.MaDviDchinh); }
			set { SetColumnValue(Columns.MaDviDchinh, value); }
		}
		  
		[XmlAttribute("TenDviDchinh")]
		[Bindable(true)]
		public string TenDviDchinh 
		{
			get { return GetColumnValue<string>(Columns.TenDviDchinh); }
			set { SetColumnValue(Columns.TenDviDchinh, value); }
		}
		  
		[XmlAttribute("MaCha")]
		[Bindable(true)]
		public string MaCha 
		{
			get { return GetColumnValue<string>(Columns.MaCha); }
			set { SetColumnValue(Columns.MaCha, value); }
		}
		  
		[XmlAttribute("SttHthi")]
		[Bindable(true)]
		public int SttHthi 
		{
			get { return GetColumnValue<int>(Columns.SttHthi); }
			set { SetColumnValue(Columns.SttHthi, value); }
		}
		  
		[XmlAttribute("LoaiDviDchinh")]
		[Bindable(true)]
		public string LoaiDviDchinh 
		{
			get { return GetColumnValue<string>(Columns.LoaiDviDchinh); }
			set { SetColumnValue(Columns.LoaiDviDchinh, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public int? TrangThai 
		{
			get { return GetColumnValue<int?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaDviDchinh,string varTenDviDchinh,string varMaCha,int varSttHthi,string varLoaiDviDchinh,int? varTrangThai)
		{
			DDviDchinh item = new DDviDchinh();
			
			item.MaDviDchinh = varMaDviDchinh;
			
			item.TenDviDchinh = varTenDviDchinh;
			
			item.MaCha = varMaCha;
			
			item.SttHthi = varSttHthi;
			
			item.LoaiDviDchinh = varLoaiDviDchinh;
			
			item.TrangThai = varTrangThai;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMaDviDchinh,string varTenDviDchinh,string varMaCha,int varSttHthi,string varLoaiDviDchinh,int? varTrangThai)
		{
			DDviDchinh item = new DDviDchinh();
			
				item.MaDviDchinh = varMaDviDchinh;
			
				item.TenDviDchinh = varTenDviDchinh;
			
				item.MaCha = varMaCha;
			
				item.SttHthi = varSttHthi;
			
				item.LoaiDviDchinh = varLoaiDviDchinh;
			
				item.TrangThai = varTrangThai;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaDviDchinhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenDviDchinhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaChaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttHthiColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiDviDchinhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaDviDchinh = @"MA_DVI_DCHINH";
			 public static string TenDviDchinh = @"TEN_DVI_DCHINH";
			 public static string MaCha = @"MA_CHA";
			 public static string SttHthi = @"STT_HTHI";
			 public static string LoaiDviDchinh = @"LOAI_DVI_DCHINH";
			 public static string TrangThai = @"TRANG_THAI";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
