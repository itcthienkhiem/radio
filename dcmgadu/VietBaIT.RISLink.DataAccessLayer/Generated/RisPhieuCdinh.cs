using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.RISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the RisPhieuCdinh class.
	/// </summary>
    [Serializable]
	public partial class RisPhieuCdinhCollection : ActiveList<RisPhieuCdinh, RisPhieuCdinhCollection>
	{	   
		public RisPhieuCdinhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>RisPhieuCdinhCollection</returns>
		public RisPhieuCdinhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                RisPhieuCdinh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the RIS_PHIEU_CDINH table.
	/// </summary>
	[Serializable]
	public partial class RisPhieuCdinh : ActiveRecord<RisPhieuCdinh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public RisPhieuCdinh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public RisPhieuCdinh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public RisPhieuCdinh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public RisPhieuCdinh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RIS_PHIEU_CDINH", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdPhieu = new TableSchema.TableColumn(schema);
				colvarIdPhieu.ColumnName = "ID_PHIEU";
				colvarIdPhieu.DataType = DbType.Int32;
				colvarIdPhieu.MaxLength = 0;
				colvarIdPhieu.AutoIncrement = true;
				colvarIdPhieu.IsNullable = false;
				colvarIdPhieu.IsPrimaryKey = true;
				colvarIdPhieu.IsForeignKey = false;
				colvarIdPhieu.IsReadOnly = false;
				colvarIdPhieu.DefaultSetting = @"";
				colvarIdPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieu);
				
				TableSchema.TableColumn colvarMaPhieu = new TableSchema.TableColumn(schema);
				colvarMaPhieu.ColumnName = "MA_PHIEU";
				colvarMaPhieu.DataType = DbType.AnsiString;
				colvarMaPhieu.MaxLength = 50;
				colvarMaPhieu.AutoIncrement = false;
				colvarMaPhieu.IsNullable = false;
				colvarMaPhieu.IsPrimaryKey = false;
				colvarMaPhieu.IsForeignKey = false;
				colvarMaPhieu.IsReadOnly = false;
				colvarMaPhieu.DefaultSetting = @"";
				colvarMaPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhieu);
				
				TableSchema.TableColumn colvarIdBnhan = new TableSchema.TableColumn(schema);
				colvarIdBnhan.ColumnName = "ID_BNHAN";
				colvarIdBnhan.DataType = DbType.Int32;
				colvarIdBnhan.MaxLength = 0;
				colvarIdBnhan.AutoIncrement = false;
				colvarIdBnhan.IsNullable = false;
				colvarIdBnhan.IsPrimaryKey = false;
				colvarIdBnhan.IsForeignKey = false;
				colvarIdBnhan.IsReadOnly = false;
				colvarIdBnhan.DefaultSetting = @"";
				colvarIdBnhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBnhan);
				
				TableSchema.TableColumn colvarPid = new TableSchema.TableColumn(schema);
				colvarPid.ColumnName = "PID";
				colvarPid.DataType = DbType.AnsiString;
				colvarPid.MaxLength = 50;
				colvarPid.AutoIncrement = false;
				colvarPid.IsNullable = false;
				colvarPid.IsPrimaryKey = false;
				colvarPid.IsForeignKey = false;
				colvarPid.IsReadOnly = false;
				colvarPid.DefaultSetting = @"";
				colvarPid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPid);
				
				TableSchema.TableColumn colvarNgayDky = new TableSchema.TableColumn(schema);
				colvarNgayDky.ColumnName = "NGAY_DKY";
				colvarNgayDky.DataType = DbType.DateTime;
				colvarNgayDky.MaxLength = 0;
				colvarNgayDky.AutoIncrement = false;
				colvarNgayDky.IsNullable = false;
				colvarNgayDky.IsPrimaryKey = false;
				colvarNgayDky.IsForeignKey = false;
				colvarNgayDky.IsReadOnly = false;
				
						colvarNgayDky.DefaultSetting = @"(getdate())";
				colvarNgayDky.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayDky);
				
				TableSchema.TableColumn colvarIdKhoaCd = new TableSchema.TableColumn(schema);
				colvarIdKhoaCd.ColumnName = "ID_KHOA_CD";
				colvarIdKhoaCd.DataType = DbType.Int32;
				colvarIdKhoaCd.MaxLength = 0;
				colvarIdKhoaCd.AutoIncrement = false;
				colvarIdKhoaCd.IsNullable = true;
				colvarIdKhoaCd.IsPrimaryKey = false;
				colvarIdKhoaCd.IsForeignKey = false;
				colvarIdKhoaCd.IsReadOnly = false;
				colvarIdKhoaCd.DefaultSetting = @"";
				colvarIdKhoaCd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoaCd);
				
				TableSchema.TableColumn colvarBsCdinh = new TableSchema.TableColumn(schema);
				colvarBsCdinh.ColumnName = "BS_CDINH";
				colvarBsCdinh.DataType = DbType.AnsiString;
				colvarBsCdinh.MaxLength = 20;
				colvarBsCdinh.AutoIncrement = false;
				colvarBsCdinh.IsNullable = true;
				colvarBsCdinh.IsPrimaryKey = false;
				colvarBsCdinh.IsForeignKey = false;
				colvarBsCdinh.IsReadOnly = false;
				colvarBsCdinh.DefaultSetting = @"";
				colvarBsCdinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBsCdinh);
				
				TableSchema.TableColumn colvarLoaiPhieu = new TableSchema.TableColumn(schema);
				colvarLoaiPhieu.ColumnName = "LOAI_PHIEU";
				colvarLoaiPhieu.DataType = DbType.Int32;
				colvarLoaiPhieu.MaxLength = 0;
				colvarLoaiPhieu.AutoIncrement = false;
				colvarLoaiPhieu.IsNullable = true;
				colvarLoaiPhieu.IsPrimaryKey = false;
				colvarLoaiPhieu.IsForeignKey = false;
				colvarLoaiPhieu.IsReadOnly = false;
				
						colvarLoaiPhieu.DefaultSetting = @"((0))";
				colvarLoaiPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaiPhieu);
				
				TableSchema.TableColumn colvarIdKhoaTao = new TableSchema.TableColumn(schema);
				colvarIdKhoaTao.ColumnName = "ID_KHOA_TAO";
				colvarIdKhoaTao.DataType = DbType.Int32;
				colvarIdKhoaTao.MaxLength = 0;
				colvarIdKhoaTao.AutoIncrement = false;
				colvarIdKhoaTao.IsNullable = true;
				colvarIdKhoaTao.IsPrimaryKey = false;
				colvarIdKhoaTao.IsForeignKey = false;
				colvarIdKhoaTao.IsReadOnly = false;
				colvarIdKhoaTao.DefaultSetting = @"";
				colvarIdKhoaTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoaTao);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = false;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "NGUOI_SUA";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "NGAY_SUA";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarMaPhieuHis = new TableSchema.TableColumn(schema);
				colvarMaPhieuHis.ColumnName = "MA_PHIEU_HIS";
				colvarMaPhieuHis.DataType = DbType.AnsiString;
				colvarMaPhieuHis.MaxLength = 50;
				colvarMaPhieuHis.AutoIncrement = false;
				colvarMaPhieuHis.IsNullable = true;
				colvarMaPhieuHis.IsPrimaryKey = false;
				colvarMaPhieuHis.IsForeignKey = false;
				colvarMaPhieuHis.IsReadOnly = false;
				colvarMaPhieuHis.DefaultSetting = @"";
				colvarMaPhieuHis.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhieuHis);
				
				TableSchema.TableColumn colvarMtaThem = new TableSchema.TableColumn(schema);
				colvarMtaThem.ColumnName = "MTA_THEM";
				colvarMtaThem.DataType = DbType.String;
				colvarMtaThem.MaxLength = 255;
				colvarMtaThem.AutoIncrement = false;
				colvarMtaThem.IsNullable = true;
				colvarMtaThem.IsPrimaryKey = false;
				colvarMtaThem.IsForeignKey = false;
				colvarMtaThem.IsReadOnly = false;
				colvarMtaThem.DefaultSetting = @"";
				colvarMtaThem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMtaThem);
				
				TableSchema.TableColumn colvarStudyInstanseUid = new TableSchema.TableColumn(schema);
				colvarStudyInstanseUid.ColumnName = "STUDY_INSTANSE_UID";
				colvarStudyInstanseUid.DataType = DbType.String;
				colvarStudyInstanseUid.MaxLength = 500;
				colvarStudyInstanseUid.AutoIncrement = false;
				colvarStudyInstanseUid.IsNullable = true;
				colvarStudyInstanseUid.IsPrimaryKey = false;
				colvarStudyInstanseUid.IsForeignKey = false;
				colvarStudyInstanseUid.IsReadOnly = false;
				colvarStudyInstanseUid.DefaultSetting = @"";
				colvarStudyInstanseUid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStudyInstanseUid);
				
				TableSchema.TableColumn colvarMaPhong = new TableSchema.TableColumn(schema);
				colvarMaPhong.ColumnName = "MA_PHONG";
				colvarMaPhong.DataType = DbType.String;
				colvarMaPhong.MaxLength = 20;
				colvarMaPhong.AutoIncrement = false;
				colvarMaPhong.IsNullable = true;
				colvarMaPhong.IsPrimaryKey = false;
				colvarMaPhong.IsForeignKey = false;
				colvarMaPhong.IsReadOnly = false;
				colvarMaPhong.DefaultSetting = @"";
				colvarMaPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhong);
				
				TableSchema.TableColumn colvarSourcePatientid = new TableSchema.TableColumn(schema);
				colvarSourcePatientid.ColumnName = "SOURCE_PATIENTID";
				colvarSourcePatientid.DataType = DbType.String;
				colvarSourcePatientid.MaxLength = 50;
				colvarSourcePatientid.AutoIncrement = false;
				colvarSourcePatientid.IsNullable = true;
				colvarSourcePatientid.IsPrimaryKey = false;
				colvarSourcePatientid.IsForeignKey = false;
				colvarSourcePatientid.IsReadOnly = false;
				colvarSourcePatientid.DefaultSetting = @"";
				colvarSourcePatientid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSourcePatientid);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("RIS_PHIEU_CDINH",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdPhieu")]
		[Bindable(true)]
		public int IdPhieu 
		{
			get { return GetColumnValue<int>(Columns.IdPhieu); }
			set { SetColumnValue(Columns.IdPhieu, value); }
		}
		  
		[XmlAttribute("MaPhieu")]
		[Bindable(true)]
		public string MaPhieu 
		{
			get { return GetColumnValue<string>(Columns.MaPhieu); }
			set { SetColumnValue(Columns.MaPhieu, value); }
		}
		  
		[XmlAttribute("IdBnhan")]
		[Bindable(true)]
		public int IdBnhan 
		{
			get { return GetColumnValue<int>(Columns.IdBnhan); }
			set { SetColumnValue(Columns.IdBnhan, value); }
		}
		  
		[XmlAttribute("Pid")]
		[Bindable(true)]
		public string Pid 
		{
			get { return GetColumnValue<string>(Columns.Pid); }
			set { SetColumnValue(Columns.Pid, value); }
		}
		  
		[XmlAttribute("NgayDky")]
		[Bindable(true)]
		public DateTime NgayDky 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayDky); }
			set { SetColumnValue(Columns.NgayDky, value); }
		}
		  
		[XmlAttribute("IdKhoaCd")]
		[Bindable(true)]
		public int? IdKhoaCd 
		{
			get { return GetColumnValue<int?>(Columns.IdKhoaCd); }
			set { SetColumnValue(Columns.IdKhoaCd, value); }
		}
		  
		[XmlAttribute("BsCdinh")]
		[Bindable(true)]
		public string BsCdinh 
		{
			get { return GetColumnValue<string>(Columns.BsCdinh); }
			set { SetColumnValue(Columns.BsCdinh, value); }
		}
		  
		[XmlAttribute("LoaiPhieu")]
		[Bindable(true)]
		public int? LoaiPhieu 
		{
			get { return GetColumnValue<int?>(Columns.LoaiPhieu); }
			set { SetColumnValue(Columns.LoaiPhieu, value); }
		}
		  
		[XmlAttribute("IdKhoaTao")]
		[Bindable(true)]
		public int? IdKhoaTao 
		{
			get { return GetColumnValue<int?>(Columns.IdKhoaTao); }
			set { SetColumnValue(Columns.IdKhoaTao, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("MaPhieuHis")]
		[Bindable(true)]
		public string MaPhieuHis 
		{
			get { return GetColumnValue<string>(Columns.MaPhieuHis); }
			set { SetColumnValue(Columns.MaPhieuHis, value); }
		}
		  
		[XmlAttribute("MtaThem")]
		[Bindable(true)]
		public string MtaThem 
		{
			get { return GetColumnValue<string>(Columns.MtaThem); }
			set { SetColumnValue(Columns.MtaThem, value); }
		}
		  
		[XmlAttribute("StudyInstanseUid")]
		[Bindable(true)]
		public string StudyInstanseUid 
		{
			get { return GetColumnValue<string>(Columns.StudyInstanseUid); }
			set { SetColumnValue(Columns.StudyInstanseUid, value); }
		}
		  
		[XmlAttribute("MaPhong")]
		[Bindable(true)]
		public string MaPhong 
		{
			get { return GetColumnValue<string>(Columns.MaPhong); }
			set { SetColumnValue(Columns.MaPhong, value); }
		}
		  
		[XmlAttribute("SourcePatientid")]
		[Bindable(true)]
		public string SourcePatientid 
		{
			get { return GetColumnValue<string>(Columns.SourcePatientid); }
			set { SetColumnValue(Columns.SourcePatientid, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaPhieu,int varIdBnhan,string varPid,DateTime varNgayDky,int? varIdKhoaCd,string varBsCdinh,int? varLoaiPhieu,int? varIdKhoaTao,string varNguoiTao,DateTime varNgayTao,string varNguoiSua,DateTime? varNgaySua,string varMaPhieuHis,string varMtaThem,string varStudyInstanseUid,string varMaPhong,string varSourcePatientid)
		{
			RisPhieuCdinh item = new RisPhieuCdinh();
			
			item.MaPhieu = varMaPhieu;
			
			item.IdBnhan = varIdBnhan;
			
			item.Pid = varPid;
			
			item.NgayDky = varNgayDky;
			
			item.IdKhoaCd = varIdKhoaCd;
			
			item.BsCdinh = varBsCdinh;
			
			item.LoaiPhieu = varLoaiPhieu;
			
			item.IdKhoaTao = varIdKhoaTao;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiSua = varNguoiSua;
			
			item.NgaySua = varNgaySua;
			
			item.MaPhieuHis = varMaPhieuHis;
			
			item.MtaThem = varMtaThem;
			
			item.StudyInstanseUid = varStudyInstanseUid;
			
			item.MaPhong = varMaPhong;
			
			item.SourcePatientid = varSourcePatientid;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdPhieu,string varMaPhieu,int varIdBnhan,string varPid,DateTime varNgayDky,int? varIdKhoaCd,string varBsCdinh,int? varLoaiPhieu,int? varIdKhoaTao,string varNguoiTao,DateTime varNgayTao,string varNguoiSua,DateTime? varNgaySua,string varMaPhieuHis,string varMtaThem,string varStudyInstanseUid,string varMaPhong,string varSourcePatientid)
		{
			RisPhieuCdinh item = new RisPhieuCdinh();
			
				item.IdPhieu = varIdPhieu;
			
				item.MaPhieu = varMaPhieu;
			
				item.IdBnhan = varIdBnhan;
			
				item.Pid = varPid;
			
				item.NgayDky = varNgayDky;
			
				item.IdKhoaCd = varIdKhoaCd;
			
				item.BsCdinh = varBsCdinh;
			
				item.LoaiPhieu = varLoaiPhieu;
			
				item.IdKhoaTao = varIdKhoaTao;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiSua = varNguoiSua;
			
				item.NgaySua = varNgaySua;
			
				item.MaPhieuHis = varMaPhieuHis;
			
				item.MtaThem = varMtaThem;
			
				item.StudyInstanseUid = varStudyInstanseUid;
			
				item.MaPhong = varMaPhong;
			
				item.SourcePatientid = varSourcePatientid;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdPhieuColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhieuColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBnhanColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PidColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayDkyColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaCdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BsCdinhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiPhieuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaTaoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhieuHisColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn MtaThemColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn StudyInstanseUidColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhongColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn SourcePatientidColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdPhieu = @"ID_PHIEU";
			 public static string MaPhieu = @"MA_PHIEU";
			 public static string IdBnhan = @"ID_BNHAN";
			 public static string Pid = @"PID";
			 public static string NgayDky = @"NGAY_DKY";
			 public static string IdKhoaCd = @"ID_KHOA_CD";
			 public static string BsCdinh = @"BS_CDINH";
			 public static string LoaiPhieu = @"LOAI_PHIEU";
			 public static string IdKhoaTao = @"ID_KHOA_TAO";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string NguoiSua = @"NGUOI_SUA";
			 public static string NgaySua = @"NGAY_SUA";
			 public static string MaPhieuHis = @"MA_PHIEU_HIS";
			 public static string MtaThem = @"MTA_THEM";
			 public static string StudyInstanseUid = @"STUDY_INSTANSE_UID";
			 public static string MaPhong = @"MA_PHONG";
			 public static string SourcePatientid = @"SOURCE_PATIENTID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
