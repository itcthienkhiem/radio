using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.RISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the BBaocao class.
	/// </summary>
    [Serializable]
	public partial class BBaocaoCollection : ActiveList<BBaocao, BBaocaoCollection>
	{	   
		public BBaocaoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>BBaocaoCollection</returns>
		public BBaocaoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                BBaocao o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the B_BAOCAO table.
	/// </summary>
	[Serializable]
	public partial class BBaocao : ActiveRecord<BBaocao>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public BBaocao()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public BBaocao(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public BBaocao(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public BBaocao(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("B_BAOCAO", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdReport = new TableSchema.TableColumn(schema);
				colvarIdReport.ColumnName = "ID_REPORT";
				colvarIdReport.DataType = DbType.Int32;
				colvarIdReport.MaxLength = 0;
				colvarIdReport.AutoIncrement = true;
				colvarIdReport.IsNullable = false;
				colvarIdReport.IsPrimaryKey = true;
				colvarIdReport.IsForeignKey = false;
				colvarIdReport.IsReadOnly = false;
				colvarIdReport.DefaultSetting = @"";
				colvarIdReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdReport);
				
				TableSchema.TableColumn colvarMaReport = new TableSchema.TableColumn(schema);
				colvarMaReport.ColumnName = "MA_REPORT";
				colvarMaReport.DataType = DbType.String;
				colvarMaReport.MaxLength = 50;
				colvarMaReport.AutoIncrement = false;
				colvarMaReport.IsNullable = true;
				colvarMaReport.IsPrimaryKey = false;
				colvarMaReport.IsForeignKey = false;
				colvarMaReport.IsReadOnly = false;
				colvarMaReport.DefaultSetting = @"";
				colvarMaReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaReport);
				
				TableSchema.TableColumn colvarTenReport = new TableSchema.TableColumn(schema);
				colvarTenReport.ColumnName = "TEN_REPORT";
				colvarTenReport.DataType = DbType.String;
				colvarTenReport.MaxLength = 200;
				colvarTenReport.AutoIncrement = false;
				colvarTenReport.IsNullable = true;
				colvarTenReport.IsPrimaryKey = false;
				colvarTenReport.IsForeignKey = false;
				colvarTenReport.IsReadOnly = false;
				colvarTenReport.DefaultSetting = @"";
				colvarTenReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenReport);
				
				TableSchema.TableColumn colvarDuongDan = new TableSchema.TableColumn(schema);
				colvarDuongDan.ColumnName = "DUONG_DAN";
				colvarDuongDan.DataType = DbType.String;
				colvarDuongDan.MaxLength = 300;
				colvarDuongDan.AutoIncrement = false;
				colvarDuongDan.IsNullable = true;
				colvarDuongDan.IsPrimaryKey = false;
				colvarDuongDan.IsForeignKey = false;
				colvarDuongDan.IsReadOnly = false;
				colvarDuongDan.DefaultSetting = @"";
				colvarDuongDan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDuongDan);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "NGUOI_SUA";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "NGAY_SUA";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarMaDvi = new TableSchema.TableColumn(schema);
				colvarMaDvi.ColumnName = "MA_DVI";
				colvarMaDvi.DataType = DbType.String;
				colvarMaDvi.MaxLength = 50;
				colvarMaDvi.AutoIncrement = false;
				colvarMaDvi.IsNullable = true;
				colvarMaDvi.IsPrimaryKey = false;
				colvarMaDvi.IsForeignKey = false;
				colvarMaDvi.IsReadOnly = false;
				colvarMaDvi.DefaultSetting = @"";
				colvarMaDvi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDvi);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("B_BAOCAO",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdReport")]
		[Bindable(true)]
		public int IdReport 
		{
			get { return GetColumnValue<int>(Columns.IdReport); }
			set { SetColumnValue(Columns.IdReport, value); }
		}
		  
		[XmlAttribute("MaReport")]
		[Bindable(true)]
		public string MaReport 
		{
			get { return GetColumnValue<string>(Columns.MaReport); }
			set { SetColumnValue(Columns.MaReport, value); }
		}
		  
		[XmlAttribute("TenReport")]
		[Bindable(true)]
		public string TenReport 
		{
			get { return GetColumnValue<string>(Columns.TenReport); }
			set { SetColumnValue(Columns.TenReport, value); }
		}
		  
		[XmlAttribute("DuongDan")]
		[Bindable(true)]
		public string DuongDan 
		{
			get { return GetColumnValue<string>(Columns.DuongDan); }
			set { SetColumnValue(Columns.DuongDan, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("MaDvi")]
		[Bindable(true)]
		public string MaDvi 
		{
			get { return GetColumnValue<string>(Columns.MaDvi); }
			set { SetColumnValue(Columns.MaDvi, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaReport,string varTenReport,string varDuongDan,string varNguoiTao,DateTime? varNgayTao,string varNguoiSua,DateTime? varNgaySua,string varMaDvi)
		{
			BBaocao item = new BBaocao();
			
			item.MaReport = varMaReport;
			
			item.TenReport = varTenReport;
			
			item.DuongDan = varDuongDan;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiSua = varNguoiSua;
			
			item.NgaySua = varNgaySua;
			
			item.MaDvi = varMaDvi;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdReport,string varMaReport,string varTenReport,string varDuongDan,string varNguoiTao,DateTime? varNgayTao,string varNguoiSua,DateTime? varNgaySua,string varMaDvi)
		{
			BBaocao item = new BBaocao();
			
				item.IdReport = varIdReport;
			
				item.MaReport = varMaReport;
			
				item.TenReport = varTenReport;
			
				item.DuongDan = varDuongDan;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiSua = varNguoiSua;
			
				item.NgaySua = varNgaySua;
			
				item.MaDvi = varMaDvi;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdReportColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaReportColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenReportColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DuongDanColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDviColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdReport = @"ID_REPORT";
			 public static string MaReport = @"MA_REPORT";
			 public static string TenReport = @"TEN_REPORT";
			 public static string DuongDan = @"DUONG_DAN";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string NguoiSua = @"NGUOI_SUA";
			 public static string NgaySua = @"NGAY_SUA";
			 public static string MaDvi = @"MA_DVI";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
