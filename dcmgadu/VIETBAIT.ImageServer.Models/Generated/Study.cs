using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the Study class.
    /// </summary>
    [Serializable]
    public class StudyCollection : ActiveList<Study, StudyCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>StudyCollection</returns>
        public StudyCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                Study o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the Study table.
    /// </summary>
    [Serializable]
    public class Study : ActiveRecord<Study>, IActiveRecord
    {
        #region .ctors and Default Settings

        public Study()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public Study(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Study(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Study(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("Study", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarServerPartitionGUID = new TableSchema.TableColumn(schema);
                colvarServerPartitionGUID.ColumnName = "ServerPartitionGUID";
                colvarServerPartitionGUID.DataType = DbType.Guid;
                colvarServerPartitionGUID.MaxLength = 0;
                colvarServerPartitionGUID.AutoIncrement = false;
                colvarServerPartitionGUID.IsNullable = false;
                colvarServerPartitionGUID.IsPrimaryKey = false;
                colvarServerPartitionGUID.IsForeignKey = true;
                colvarServerPartitionGUID.IsReadOnly = false;
                colvarServerPartitionGUID.DefaultSetting = @"";

                colvarServerPartitionGUID.ForeignKeyTableName = "ServerPartition";
                schema.Columns.Add(colvarServerPartitionGUID);

                var colvarStudyStorageGUID = new TableSchema.TableColumn(schema);
                colvarStudyStorageGUID.ColumnName = "StudyStorageGUID";
                colvarStudyStorageGUID.DataType = DbType.Guid;
                colvarStudyStorageGUID.MaxLength = 0;
                colvarStudyStorageGUID.AutoIncrement = false;
                colvarStudyStorageGUID.IsNullable = true;
                colvarStudyStorageGUID.IsPrimaryKey = false;
                colvarStudyStorageGUID.IsForeignKey = true;
                colvarStudyStorageGUID.IsReadOnly = false;
                colvarStudyStorageGUID.DefaultSetting = @"";

                colvarStudyStorageGUID.ForeignKeyTableName = "StudyStorage";
                schema.Columns.Add(colvarStudyStorageGUID);

                var colvarPatientGUID = new TableSchema.TableColumn(schema);
                colvarPatientGUID.ColumnName = "PatientGUID";
                colvarPatientGUID.DataType = DbType.Guid;
                colvarPatientGUID.MaxLength = 0;
                colvarPatientGUID.AutoIncrement = false;
                colvarPatientGUID.IsNullable = false;
                colvarPatientGUID.IsPrimaryKey = false;
                colvarPatientGUID.IsForeignKey = true;
                colvarPatientGUID.IsReadOnly = false;
                colvarPatientGUID.DefaultSetting = @"";

                colvarPatientGUID.ForeignKeyTableName = "Patient";
                schema.Columns.Add(colvarPatientGUID);

                var colvarSpecificCharacterSet = new TableSchema.TableColumn(schema);
                colvarSpecificCharacterSet.ColumnName = "SpecificCharacterSet";
                colvarSpecificCharacterSet.DataType = DbType.AnsiString;
                colvarSpecificCharacterSet.MaxLength = 128;
                colvarSpecificCharacterSet.AutoIncrement = false;
                colvarSpecificCharacterSet.IsNullable = true;
                colvarSpecificCharacterSet.IsPrimaryKey = false;
                colvarSpecificCharacterSet.IsForeignKey = false;
                colvarSpecificCharacterSet.IsReadOnly = false;
                colvarSpecificCharacterSet.DefaultSetting = @"";
                colvarSpecificCharacterSet.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSpecificCharacterSet);

                var colvarStudyInstanceUid = new TableSchema.TableColumn(schema);
                colvarStudyInstanceUid.ColumnName = "StudyInstanceUid";
                colvarStudyInstanceUid.DataType = DbType.AnsiString;
                colvarStudyInstanceUid.MaxLength = 64;
                colvarStudyInstanceUid.AutoIncrement = false;
                colvarStudyInstanceUid.IsNullable = false;
                colvarStudyInstanceUid.IsPrimaryKey = false;
                colvarStudyInstanceUid.IsForeignKey = false;
                colvarStudyInstanceUid.IsReadOnly = false;
                colvarStudyInstanceUid.DefaultSetting = @"";
                colvarStudyInstanceUid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudyInstanceUid);

                var colvarPatientsName = new TableSchema.TableColumn(schema);
                colvarPatientsName.ColumnName = "PatientsName";
                colvarPatientsName.DataType = DbType.String;
                colvarPatientsName.MaxLength = 64;
                colvarPatientsName.AutoIncrement = false;
                colvarPatientsName.IsNullable = true;
                colvarPatientsName.IsPrimaryKey = false;
                colvarPatientsName.IsForeignKey = false;
                colvarPatientsName.IsReadOnly = false;
                colvarPatientsName.DefaultSetting = @"";
                colvarPatientsName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientsName);

                var colvarPatientId = new TableSchema.TableColumn(schema);
                colvarPatientId.ColumnName = "PatientId";
                colvarPatientId.DataType = DbType.String;
                colvarPatientId.MaxLength = 64;
                colvarPatientId.AutoIncrement = false;
                colvarPatientId.IsNullable = true;
                colvarPatientId.IsPrimaryKey = false;
                colvarPatientId.IsForeignKey = false;
                colvarPatientId.IsReadOnly = false;
                colvarPatientId.DefaultSetting = @"";
                colvarPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientId);

                var colvarIssuerOfPatientId = new TableSchema.TableColumn(schema);
                colvarIssuerOfPatientId.ColumnName = "IssuerOfPatientId";
                colvarIssuerOfPatientId.DataType = DbType.String;
                colvarIssuerOfPatientId.MaxLength = 64;
                colvarIssuerOfPatientId.AutoIncrement = false;
                colvarIssuerOfPatientId.IsNullable = true;
                colvarIssuerOfPatientId.IsPrimaryKey = false;
                colvarIssuerOfPatientId.IsForeignKey = false;
                colvarIssuerOfPatientId.IsReadOnly = false;
                colvarIssuerOfPatientId.DefaultSetting = @"";
                colvarIssuerOfPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIssuerOfPatientId);

                var colvarPatientsBirthDate = new TableSchema.TableColumn(schema);
                colvarPatientsBirthDate.ColumnName = "PatientsBirthDate";
                colvarPatientsBirthDate.DataType = DbType.AnsiString;
                colvarPatientsBirthDate.MaxLength = 8;
                colvarPatientsBirthDate.AutoIncrement = false;
                colvarPatientsBirthDate.IsNullable = true;
                colvarPatientsBirthDate.IsPrimaryKey = false;
                colvarPatientsBirthDate.IsForeignKey = false;
                colvarPatientsBirthDate.IsReadOnly = false;
                colvarPatientsBirthDate.DefaultSetting = @"";
                colvarPatientsBirthDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientsBirthDate);

                var colvarPatientsAge = new TableSchema.TableColumn(schema);
                colvarPatientsAge.ColumnName = "PatientsAge";
                colvarPatientsAge.DataType = DbType.AnsiString;
                colvarPatientsAge.MaxLength = 4;
                colvarPatientsAge.AutoIncrement = false;
                colvarPatientsAge.IsNullable = true;
                colvarPatientsAge.IsPrimaryKey = false;
                colvarPatientsAge.IsForeignKey = false;
                colvarPatientsAge.IsReadOnly = false;
                colvarPatientsAge.DefaultSetting = @"";
                colvarPatientsAge.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientsAge);

                var colvarPatientsSex = new TableSchema.TableColumn(schema);
                colvarPatientsSex.ColumnName = "PatientsSex";
                colvarPatientsSex.DataType = DbType.AnsiString;
                colvarPatientsSex.MaxLength = 2;
                colvarPatientsSex.AutoIncrement = false;
                colvarPatientsSex.IsNullable = true;
                colvarPatientsSex.IsPrimaryKey = false;
                colvarPatientsSex.IsForeignKey = false;
                colvarPatientsSex.IsReadOnly = false;
                colvarPatientsSex.DefaultSetting = @"";
                colvarPatientsSex.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientsSex);

                var colvarStudyDate = new TableSchema.TableColumn(schema);
                colvarStudyDate.ColumnName = "StudyDate";
                colvarStudyDate.DataType = DbType.AnsiString;
                colvarStudyDate.MaxLength = 8;
                colvarStudyDate.AutoIncrement = false;
                colvarStudyDate.IsNullable = true;
                colvarStudyDate.IsPrimaryKey = false;
                colvarStudyDate.IsForeignKey = false;
                colvarStudyDate.IsReadOnly = false;
                colvarStudyDate.DefaultSetting = @"";
                colvarStudyDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudyDate);

                var colvarStudyTime = new TableSchema.TableColumn(schema);
                colvarStudyTime.ColumnName = "StudyTime";
                colvarStudyTime.DataType = DbType.AnsiString;
                colvarStudyTime.MaxLength = 16;
                colvarStudyTime.AutoIncrement = false;
                colvarStudyTime.IsNullable = true;
                colvarStudyTime.IsPrimaryKey = false;
                colvarStudyTime.IsForeignKey = false;
                colvarStudyTime.IsReadOnly = false;
                colvarStudyTime.DefaultSetting = @"";
                colvarStudyTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudyTime);

                var colvarAccessionNumber = new TableSchema.TableColumn(schema);
                colvarAccessionNumber.ColumnName = "AccessionNumber";
                colvarAccessionNumber.DataType = DbType.String;
                colvarAccessionNumber.MaxLength = 16;
                colvarAccessionNumber.AutoIncrement = false;
                colvarAccessionNumber.IsNullable = true;
                colvarAccessionNumber.IsPrimaryKey = false;
                colvarAccessionNumber.IsForeignKey = false;
                colvarAccessionNumber.IsReadOnly = false;
                colvarAccessionNumber.DefaultSetting = @"";
                colvarAccessionNumber.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAccessionNumber);

                var colvarStudyId = new TableSchema.TableColumn(schema);
                colvarStudyId.ColumnName = "StudyId";
                colvarStudyId.DataType = DbType.String;
                colvarStudyId.MaxLength = 16;
                colvarStudyId.AutoIncrement = false;
                colvarStudyId.IsNullable = true;
                colvarStudyId.IsPrimaryKey = false;
                colvarStudyId.IsForeignKey = false;
                colvarStudyId.IsReadOnly = false;
                colvarStudyId.DefaultSetting = @"";
                colvarStudyId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudyId);

                var colvarStudyDescription = new TableSchema.TableColumn(schema);
                colvarStudyDescription.ColumnName = "StudyDescription";
                colvarStudyDescription.DataType = DbType.String;
                colvarStudyDescription.MaxLength = 64;
                colvarStudyDescription.AutoIncrement = false;
                colvarStudyDescription.IsNullable = true;
                colvarStudyDescription.IsPrimaryKey = false;
                colvarStudyDescription.IsForeignKey = false;
                colvarStudyDescription.IsReadOnly = false;
                colvarStudyDescription.DefaultSetting = @"";
                colvarStudyDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudyDescription);

                var colvarReferringPhysiciansName = new TableSchema.TableColumn(schema);
                colvarReferringPhysiciansName.ColumnName = "ReferringPhysiciansName";
                colvarReferringPhysiciansName.DataType = DbType.String;
                colvarReferringPhysiciansName.MaxLength = 64;
                colvarReferringPhysiciansName.AutoIncrement = false;
                colvarReferringPhysiciansName.IsNullable = true;
                colvarReferringPhysiciansName.IsPrimaryKey = false;
                colvarReferringPhysiciansName.IsForeignKey = false;
                colvarReferringPhysiciansName.IsReadOnly = false;
                colvarReferringPhysiciansName.DefaultSetting = @"";
                colvarReferringPhysiciansName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarReferringPhysiciansName);

                var colvarNumberOfStudyRelatedSeries = new TableSchema.TableColumn(schema);
                colvarNumberOfStudyRelatedSeries.ColumnName = "NumberOfStudyRelatedSeries";
                colvarNumberOfStudyRelatedSeries.DataType = DbType.Int32;
                colvarNumberOfStudyRelatedSeries.MaxLength = 0;
                colvarNumberOfStudyRelatedSeries.AutoIncrement = false;
                colvarNumberOfStudyRelatedSeries.IsNullable = false;
                colvarNumberOfStudyRelatedSeries.IsPrimaryKey = false;
                colvarNumberOfStudyRelatedSeries.IsForeignKey = false;
                colvarNumberOfStudyRelatedSeries.IsReadOnly = false;
                colvarNumberOfStudyRelatedSeries.DefaultSetting = @"";
                colvarNumberOfStudyRelatedSeries.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNumberOfStudyRelatedSeries);

                var colvarNumberOfStudyRelatedInstances = new TableSchema.TableColumn(schema);
                colvarNumberOfStudyRelatedInstances.ColumnName = "NumberOfStudyRelatedInstances";
                colvarNumberOfStudyRelatedInstances.DataType = DbType.Int32;
                colvarNumberOfStudyRelatedInstances.MaxLength = 0;
                colvarNumberOfStudyRelatedInstances.AutoIncrement = false;
                colvarNumberOfStudyRelatedInstances.IsNullable = false;
                colvarNumberOfStudyRelatedInstances.IsPrimaryKey = false;
                colvarNumberOfStudyRelatedInstances.IsForeignKey = false;
                colvarNumberOfStudyRelatedInstances.IsReadOnly = false;
                colvarNumberOfStudyRelatedInstances.DefaultSetting = @"";
                colvarNumberOfStudyRelatedInstances.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNumberOfStudyRelatedInstances);

                var colvarStudySizeInKB = new TableSchema.TableColumn(schema);
                colvarStudySizeInKB.ColumnName = "StudySizeInKB";
                colvarStudySizeInKB.DataType = DbType.Decimal;
                colvarStudySizeInKB.MaxLength = 0;
                colvarStudySizeInKB.AutoIncrement = false;
                colvarStudySizeInKB.IsNullable = true;
                colvarStudySizeInKB.IsPrimaryKey = false;
                colvarStudySizeInKB.IsForeignKey = false;
                colvarStudySizeInKB.IsReadOnly = false;
                colvarStudySizeInKB.DefaultSetting = @"";
                colvarStudySizeInKB.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudySizeInKB);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("Study", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("ServerPartitionGUID")]
        [Bindable(true)]
        public Guid ServerPartitionGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerPartitionGUID); }
            set { SetColumnValue(Columns.ServerPartitionGUID, value); }
        }

        [XmlAttribute("StudyStorageGUID")]
        [Bindable(true)]
        public Guid? StudyStorageGUID
        {
            get { return GetColumnValue<Guid?>(Columns.StudyStorageGUID); }
            set { SetColumnValue(Columns.StudyStorageGUID, value); }
        }

        [XmlAttribute("PatientGUID")]
        [Bindable(true)]
        public Guid PatientGUID
        {
            get { return GetColumnValue<Guid>(Columns.PatientGUID); }
            set { SetColumnValue(Columns.PatientGUID, value); }
        }

        [XmlAttribute("SpecificCharacterSet")]
        [Bindable(true)]
        public string SpecificCharacterSet
        {
            get { return GetColumnValue<string>(Columns.SpecificCharacterSet); }
            set { SetColumnValue(Columns.SpecificCharacterSet, value); }
        }

        [XmlAttribute("StudyInstanceUid")]
        [Bindable(true)]
        public string StudyInstanceUid
        {
            get { return GetColumnValue<string>(Columns.StudyInstanceUid); }
            set { SetColumnValue(Columns.StudyInstanceUid, value); }
        }

        [XmlAttribute("PatientsName")]
        [Bindable(true)]
        public string PatientsName
        {
            get { return GetColumnValue<string>(Columns.PatientsName); }
            set { SetColumnValue(Columns.PatientsName, value); }
        }

        [XmlAttribute("PatientId")]
        [Bindable(true)]
        public string PatientId
        {
            get { return GetColumnValue<string>(Columns.PatientId); }
            set { SetColumnValue(Columns.PatientId, value); }
        }

        [XmlAttribute("IssuerOfPatientId")]
        [Bindable(true)]
        public string IssuerOfPatientId
        {
            get { return GetColumnValue<string>(Columns.IssuerOfPatientId); }
            set { SetColumnValue(Columns.IssuerOfPatientId, value); }
        }

        [XmlAttribute("PatientsBirthDate")]
        [Bindable(true)]
        public string PatientsBirthDate
        {
            get { return GetColumnValue<string>(Columns.PatientsBirthDate); }
            set { SetColumnValue(Columns.PatientsBirthDate, value); }
        }

        [XmlAttribute("PatientsAge")]
        [Bindable(true)]
        public string PatientsAge
        {
            get { return GetColumnValue<string>(Columns.PatientsAge); }
            set { SetColumnValue(Columns.PatientsAge, value); }
        }

        [XmlAttribute("PatientsSex")]
        [Bindable(true)]
        public string PatientsSex
        {
            get { return GetColumnValue<string>(Columns.PatientsSex); }
            set { SetColumnValue(Columns.PatientsSex, value); }
        }

        [XmlAttribute("StudyDate")]
        [Bindable(true)]
        public string StudyDate
        {
            get { return GetColumnValue<string>(Columns.StudyDate); }
            set { SetColumnValue(Columns.StudyDate, value); }
        }

        [XmlAttribute("StudyTime")]
        [Bindable(true)]
        public string StudyTime
        {
            get { return GetColumnValue<string>(Columns.StudyTime); }
            set { SetColumnValue(Columns.StudyTime, value); }
        }

        [XmlAttribute("AccessionNumber")]
        [Bindable(true)]
        public string AccessionNumber
        {
            get { return GetColumnValue<string>(Columns.AccessionNumber); }
            set { SetColumnValue(Columns.AccessionNumber, value); }
        }

        [XmlAttribute("StudyId")]
        [Bindable(true)]
        public string StudyId
        {
            get { return GetColumnValue<string>(Columns.StudyId); }
            set { SetColumnValue(Columns.StudyId, value); }
        }

        [XmlAttribute("StudyDescription")]
        [Bindable(true)]
        public string StudyDescription
        {
            get { return GetColumnValue<string>(Columns.StudyDescription); }
            set { SetColumnValue(Columns.StudyDescription, value); }
        }

        [XmlAttribute("ReferringPhysiciansName")]
        [Bindable(true)]
        public string ReferringPhysiciansName
        {
            get { return GetColumnValue<string>(Columns.ReferringPhysiciansName); }
            set { SetColumnValue(Columns.ReferringPhysiciansName, value); }
        }

        [XmlAttribute("NumberOfStudyRelatedSeries")]
        [Bindable(true)]
        public int NumberOfStudyRelatedSeries
        {
            get { return GetColumnValue<int>(Columns.NumberOfStudyRelatedSeries); }
            set { SetColumnValue(Columns.NumberOfStudyRelatedSeries, value); }
        }

        [XmlAttribute("NumberOfStudyRelatedInstances")]
        [Bindable(true)]
        public int NumberOfStudyRelatedInstances
        {
            get { return GetColumnValue<int>(Columns.NumberOfStudyRelatedInstances); }
            set { SetColumnValue(Columns.NumberOfStudyRelatedInstances, value); }
        }

        [XmlAttribute("StudySizeInKB")]
        [Bindable(true)]
        public decimal? StudySizeInKB
        {
            get { return GetColumnValue<decimal?>(Columns.StudySizeInKB); }
            set { SetColumnValue(Columns.StudySizeInKB, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public SeriesCollection SeriesRecords()
        {
            return new SeriesCollection().Where(Series.Columns.StudyGUID, Guid).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a Patient ActiveRecord object related to this Study
        /// 
        /// </summary>
        public Patient Patient
        {
            get { return Patient.FetchByID(PatientGUID); }
            set { SetColumnValue("PatientGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a ServerPartition ActiveRecord object related to this Study
        /// 
        /// </summary>
        public ServerPartition ServerPartition
        {
            get { return ServerPartition.FetchByID(ServerPartitionGUID); }
            set { SetColumnValue("ServerPartitionGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a StudyStorage ActiveRecord object related to this Study
        /// 
        /// </summary>
        public StudyStorage StudyStorage
        {
            get { return StudyStorage.FetchByID(StudyStorageGUID); }
            set { SetColumnValue("StudyStorageGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varServerPartitionGUID, Guid? varStudyStorageGUID,
                                  Guid varPatientGUID, string varSpecificCharacterSet, string varStudyInstanceUid,
                                  string varPatientsName, string varPatientId, string varIssuerOfPatientId,
                                  string varPatientsBirthDate, string varPatientsAge, string varPatientsSex,
                                  string varStudyDate, string varStudyTime, string varAccessionNumber, string varStudyId,
                                  string varStudyDescription, string varReferringPhysiciansName,
                                  int varNumberOfStudyRelatedSeries, int varNumberOfStudyRelatedInstances,
                                  decimal? varStudySizeInKB)
        {
            var item = new Study();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.PatientGUID = varPatientGUID;

            item.SpecificCharacterSet = varSpecificCharacterSet;

            item.StudyInstanceUid = varStudyInstanceUid;

            item.PatientsName = varPatientsName;

            item.PatientId = varPatientId;

            item.IssuerOfPatientId = varIssuerOfPatientId;

            item.PatientsBirthDate = varPatientsBirthDate;

            item.PatientsAge = varPatientsAge;

            item.PatientsSex = varPatientsSex;

            item.StudyDate = varStudyDate;

            item.StudyTime = varStudyTime;

            item.AccessionNumber = varAccessionNumber;

            item.StudyId = varStudyId;

            item.StudyDescription = varStudyDescription;

            item.ReferringPhysiciansName = varReferringPhysiciansName;

            item.NumberOfStudyRelatedSeries = varNumberOfStudyRelatedSeries;

            item.NumberOfStudyRelatedInstances = varNumberOfStudyRelatedInstances;

            item.StudySizeInKB = varStudySizeInKB;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varServerPartitionGUID, Guid? varStudyStorageGUID,
                                  Guid varPatientGUID, string varSpecificCharacterSet, string varStudyInstanceUid,
                                  string varPatientsName, string varPatientId, string varIssuerOfPatientId,
                                  string varPatientsBirthDate, string varPatientsAge, string varPatientsSex,
                                  string varStudyDate, string varStudyTime, string varAccessionNumber, string varStudyId,
                                  string varStudyDescription, string varReferringPhysiciansName,
                                  int varNumberOfStudyRelatedSeries, int varNumberOfStudyRelatedInstances,
                                  decimal? varStudySizeInKB)
        {
            var item = new Study();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.PatientGUID = varPatientGUID;

            item.SpecificCharacterSet = varSpecificCharacterSet;

            item.StudyInstanceUid = varStudyInstanceUid;

            item.PatientsName = varPatientsName;

            item.PatientId = varPatientId;

            item.IssuerOfPatientId = varIssuerOfPatientId;

            item.PatientsBirthDate = varPatientsBirthDate;

            item.PatientsAge = varPatientsAge;

            item.PatientsSex = varPatientsSex;

            item.StudyDate = varStudyDate;

            item.StudyTime = varStudyTime;

            item.AccessionNumber = varAccessionNumber;

            item.StudyId = varStudyId;

            item.StudyDescription = varStudyDescription;

            item.ReferringPhysiciansName = varReferringPhysiciansName;

            item.NumberOfStudyRelatedSeries = varNumberOfStudyRelatedSeries;

            item.NumberOfStudyRelatedInstances = varNumberOfStudyRelatedInstances;

            item.StudySizeInKB = varStudySizeInKB;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ServerPartitionGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn StudyStorageGUIDColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn PatientGUIDColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn SpecificCharacterSetColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn StudyInstanceUidColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn PatientsNameColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn IssuerOfPatientIdColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn PatientsBirthDateColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn PatientsAgeColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn PatientsSexColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn StudyDateColumn
        {
            get { return Schema.Columns[12]; }
        }


        public static TableSchema.TableColumn StudyTimeColumn
        {
            get { return Schema.Columns[13]; }
        }


        public static TableSchema.TableColumn AccessionNumberColumn
        {
            get { return Schema.Columns[14]; }
        }


        public static TableSchema.TableColumn StudyIdColumn
        {
            get { return Schema.Columns[15]; }
        }


        public static TableSchema.TableColumn StudyDescriptionColumn
        {
            get { return Schema.Columns[16]; }
        }


        public static TableSchema.TableColumn ReferringPhysiciansNameColumn
        {
            get { return Schema.Columns[17]; }
        }


        public static TableSchema.TableColumn NumberOfStudyRelatedSeriesColumn
        {
            get { return Schema.Columns[18]; }
        }


        public static TableSchema.TableColumn NumberOfStudyRelatedInstancesColumn
        {
            get { return Schema.Columns[19]; }
        }


        public static TableSchema.TableColumn StudySizeInKBColumn
        {
            get { return Schema.Columns[20]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string ServerPartitionGUID = @"ServerPartitionGUID";
            public static string StudyStorageGUID = @"StudyStorageGUID";
            public static string PatientGUID = @"PatientGUID";
            public static string SpecificCharacterSet = @"SpecificCharacterSet";
            public static string StudyInstanceUid = @"StudyInstanceUid";
            public static string PatientsName = @"PatientsName";
            public static string PatientId = @"PatientId";
            public static string IssuerOfPatientId = @"IssuerOfPatientId";
            public static string PatientsBirthDate = @"PatientsBirthDate";
            public static string PatientsAge = @"PatientsAge";
            public static string PatientsSex = @"PatientsSex";
            public static string StudyDate = @"StudyDate";
            public static string StudyTime = @"StudyTime";
            public static string AccessionNumber = @"AccessionNumber";
            public static string StudyId = @"StudyId";
            public static string StudyDescription = @"StudyDescription";
            public static string ReferringPhysiciansName = @"ReferringPhysiciansName";
            public static string NumberOfStudyRelatedSeries = @"NumberOfStudyRelatedSeries";
            public static string NumberOfStudyRelatedInstances = @"NumberOfStudyRelatedInstances";
            public static string StudySizeInKB = @"StudySizeInKB";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no ManyToMany tables defined (0)
    }
}