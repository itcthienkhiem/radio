using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the PartitionSopClass class.
    /// </summary>
    [Serializable]
    public class PartitionSopClassCollection : ActiveList<PartitionSopClass, PartitionSopClassCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PartitionSopClassCollection</returns>
        public PartitionSopClassCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                PartitionSopClass o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the PartitionSopClass table.
    /// </summary>
    [Serializable]
    public class PartitionSopClass : ActiveRecord<PartitionSopClass>, IActiveRecord
    {
        #region .ctors and Default Settings

        public PartitionSopClass()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public PartitionSopClass(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public PartitionSopClass(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public PartitionSopClass(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("PartitionSopClass", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarServerPartitionGUID = new TableSchema.TableColumn(schema);
                colvarServerPartitionGUID.ColumnName = "ServerPartitionGUID";
                colvarServerPartitionGUID.DataType = DbType.Guid;
                colvarServerPartitionGUID.MaxLength = 0;
                colvarServerPartitionGUID.AutoIncrement = false;
                colvarServerPartitionGUID.IsNullable = false;
                colvarServerPartitionGUID.IsPrimaryKey = false;
                colvarServerPartitionGUID.IsForeignKey = true;
                colvarServerPartitionGUID.IsReadOnly = false;
                colvarServerPartitionGUID.DefaultSetting = @"";

                colvarServerPartitionGUID.ForeignKeyTableName = "ServerPartition";
                schema.Columns.Add(colvarServerPartitionGUID);

                var colvarServerSopClassGUID = new TableSchema.TableColumn(schema);
                colvarServerSopClassGUID.ColumnName = "ServerSopClassGUID";
                colvarServerSopClassGUID.DataType = DbType.Guid;
                colvarServerSopClassGUID.MaxLength = 0;
                colvarServerSopClassGUID.AutoIncrement = false;
                colvarServerSopClassGUID.IsNullable = false;
                colvarServerSopClassGUID.IsPrimaryKey = false;
                colvarServerSopClassGUID.IsForeignKey = true;
                colvarServerSopClassGUID.IsReadOnly = false;
                colvarServerSopClassGUID.DefaultSetting = @"";

                colvarServerSopClassGUID.ForeignKeyTableName = "ServerSopClass";
                schema.Columns.Add(colvarServerSopClassGUID);

                var colvarEnabled = new TableSchema.TableColumn(schema);
                colvarEnabled.ColumnName = "Enabled";
                colvarEnabled.DataType = DbType.Boolean;
                colvarEnabled.MaxLength = 0;
                colvarEnabled.AutoIncrement = false;
                colvarEnabled.IsNullable = false;
                colvarEnabled.IsPrimaryKey = false;
                colvarEnabled.IsForeignKey = false;
                colvarEnabled.IsReadOnly = false;
                colvarEnabled.DefaultSetting = @"";
                colvarEnabled.ForeignKeyTableName = "";
                schema.Columns.Add(colvarEnabled);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("PartitionSopClass", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("ServerPartitionGUID")]
        [Bindable(true)]
        public Guid ServerPartitionGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerPartitionGUID); }
            set { SetColumnValue(Columns.ServerPartitionGUID, value); }
        }

        [XmlAttribute("ServerSopClassGUID")]
        [Bindable(true)]
        public Guid ServerSopClassGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerSopClassGUID); }
            set { SetColumnValue(Columns.ServerSopClassGUID, value); }
        }

        [XmlAttribute("Enabled")]
        [Bindable(true)]
        public bool Enabled
        {
            get { return GetColumnValue<bool>(Columns.Enabled); }
            set { SetColumnValue(Columns.Enabled, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a ServerPartition ActiveRecord object related to this PartitionSopClass
        /// 
        /// </summary>
        public ServerPartition ServerPartition
        {
            get { return ServerPartition.FetchByID(ServerPartitionGUID); }
            set { SetColumnValue("ServerPartitionGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a ServerSopClass ActiveRecord object related to this PartitionSopClass
        /// 
        /// </summary>
        public ServerSopClass ServerSopClass
        {
            get { return ServerSopClass.FetchByID(ServerSopClassGUID); }
            set { SetColumnValue("ServerSopClassGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varServerPartitionGUID, Guid varServerSopClassGUID, bool varEnabled)
        {
            var item = new PartitionSopClass();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.ServerSopClassGUID = varServerSopClassGUID;

            item.Enabled = varEnabled;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varServerPartitionGUID, Guid varServerSopClassGUID, bool varEnabled)
        {
            var item = new PartitionSopClass();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.ServerSopClassGUID = varServerSopClassGUID;

            item.Enabled = varEnabled;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ServerPartitionGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn ServerSopClassGUIDColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn EnabledColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string ServerPartitionGUID = @"ServerPartitionGUID";
            public static string ServerSopClassGUID = @"ServerSopClassGUID";
            public static string Enabled = @"Enabled";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}