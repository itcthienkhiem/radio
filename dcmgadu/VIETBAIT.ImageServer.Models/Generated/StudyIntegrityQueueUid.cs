using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the StudyIntegrityQueueUid class.
    /// </summary>
    [Serializable]
    public class StudyIntegrityQueueUidCollection : ActiveList<StudyIntegrityQueueUid, StudyIntegrityQueueUidCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>StudyIntegrityQueueUidCollection</returns>
        public StudyIntegrityQueueUidCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                StudyIntegrityQueueUid o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the StudyIntegrityQueueUid table.
    /// </summary>
    [Serializable]
    public class StudyIntegrityQueueUid : ActiveRecord<StudyIntegrityQueueUid>, IActiveRecord
    {
        #region .ctors and Default Settings

        public StudyIntegrityQueueUid()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public StudyIntegrityQueueUid(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public StudyIntegrityQueueUid(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public StudyIntegrityQueueUid(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("StudyIntegrityQueueUid", TableType.Table,
                                                   DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarStudyIntegrityQueueGUID = new TableSchema.TableColumn(schema);
                colvarStudyIntegrityQueueGUID.ColumnName = "StudyIntegrityQueueGUID";
                colvarStudyIntegrityQueueGUID.DataType = DbType.Guid;
                colvarStudyIntegrityQueueGUID.MaxLength = 0;
                colvarStudyIntegrityQueueGUID.AutoIncrement = false;
                colvarStudyIntegrityQueueGUID.IsNullable = false;
                colvarStudyIntegrityQueueGUID.IsPrimaryKey = false;
                colvarStudyIntegrityQueueGUID.IsForeignKey = true;
                colvarStudyIntegrityQueueGUID.IsReadOnly = false;
                colvarStudyIntegrityQueueGUID.DefaultSetting = @"";

                colvarStudyIntegrityQueueGUID.ForeignKeyTableName = "StudyIntegrityQueue";
                schema.Columns.Add(colvarStudyIntegrityQueueGUID);

                var colvarSeriesDescription = new TableSchema.TableColumn(schema);
                colvarSeriesDescription.ColumnName = "SeriesDescription";
                colvarSeriesDescription.DataType = DbType.String;
                colvarSeriesDescription.MaxLength = 64;
                colvarSeriesDescription.AutoIncrement = false;
                colvarSeriesDescription.IsNullable = true;
                colvarSeriesDescription.IsPrimaryKey = false;
                colvarSeriesDescription.IsForeignKey = false;
                colvarSeriesDescription.IsReadOnly = false;
                colvarSeriesDescription.DefaultSetting = @"";
                colvarSeriesDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSeriesDescription);

                var colvarSeriesInstanceUid = new TableSchema.TableColumn(schema);
                colvarSeriesInstanceUid.ColumnName = "SeriesInstanceUid";
                colvarSeriesInstanceUid.DataType = DbType.AnsiString;
                colvarSeriesInstanceUid.MaxLength = 64;
                colvarSeriesInstanceUid.AutoIncrement = false;
                colvarSeriesInstanceUid.IsNullable = false;
                colvarSeriesInstanceUid.IsPrimaryKey = false;
                colvarSeriesInstanceUid.IsForeignKey = false;
                colvarSeriesInstanceUid.IsReadOnly = false;
                colvarSeriesInstanceUid.DefaultSetting = @"";
                colvarSeriesInstanceUid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSeriesInstanceUid);

                var colvarSopInstanceUid = new TableSchema.TableColumn(schema);
                colvarSopInstanceUid.ColumnName = "SopInstanceUid";
                colvarSopInstanceUid.DataType = DbType.AnsiString;
                colvarSopInstanceUid.MaxLength = 64;
                colvarSopInstanceUid.AutoIncrement = false;
                colvarSopInstanceUid.IsNullable = false;
                colvarSopInstanceUid.IsPrimaryKey = false;
                colvarSopInstanceUid.IsForeignKey = false;
                colvarSopInstanceUid.IsReadOnly = false;
                colvarSopInstanceUid.DefaultSetting = @"";
                colvarSopInstanceUid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSopInstanceUid);

                var colvarRelativePath = new TableSchema.TableColumn(schema);
                colvarRelativePath.ColumnName = "RelativePath";
                colvarRelativePath.DataType = DbType.AnsiString;
                colvarRelativePath.MaxLength = 256;
                colvarRelativePath.AutoIncrement = false;
                colvarRelativePath.IsNullable = true;
                colvarRelativePath.IsPrimaryKey = false;
                colvarRelativePath.IsForeignKey = false;
                colvarRelativePath.IsReadOnly = false;
                colvarRelativePath.DefaultSetting = @"";
                colvarRelativePath.ForeignKeyTableName = "";
                schema.Columns.Add(colvarRelativePath);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("StudyIntegrityQueueUid", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("StudyIntegrityQueueGUID")]
        [Bindable(true)]
        public Guid StudyIntegrityQueueGUID
        {
            get { return GetColumnValue<Guid>(Columns.StudyIntegrityQueueGUID); }
            set { SetColumnValue(Columns.StudyIntegrityQueueGUID, value); }
        }

        [XmlAttribute("SeriesDescription")]
        [Bindable(true)]
        public string SeriesDescription
        {
            get { return GetColumnValue<string>(Columns.SeriesDescription); }
            set { SetColumnValue(Columns.SeriesDescription, value); }
        }

        [XmlAttribute("SeriesInstanceUid")]
        [Bindable(true)]
        public string SeriesInstanceUid
        {
            get { return GetColumnValue<string>(Columns.SeriesInstanceUid); }
            set { SetColumnValue(Columns.SeriesInstanceUid, value); }
        }

        [XmlAttribute("SopInstanceUid")]
        [Bindable(true)]
        public string SopInstanceUid
        {
            get { return GetColumnValue<string>(Columns.SopInstanceUid); }
            set { SetColumnValue(Columns.SopInstanceUid, value); }
        }

        [XmlAttribute("RelativePath")]
        [Bindable(true)]
        public string RelativePath
        {
            get { return GetColumnValue<string>(Columns.RelativePath); }
            set { SetColumnValue(Columns.RelativePath, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a StudyIntegrityQueue ActiveRecord object related to this StudyIntegrityQueueUid
        /// 
        /// </summary>
        public StudyIntegrityQueue StudyIntegrityQueue
        {
            get { return StudyIntegrityQueue.FetchByID(StudyIntegrityQueueGUID); }
            set { SetColumnValue("StudyIntegrityQueueGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varStudyIntegrityQueueGUID, string varSeriesDescription,
                                  string varSeriesInstanceUid, string varSopInstanceUid, string varRelativePath)
        {
            var item = new StudyIntegrityQueueUid();

            item.Guid = varGuid;

            item.StudyIntegrityQueueGUID = varStudyIntegrityQueueGUID;

            item.SeriesDescription = varSeriesDescription;

            item.SeriesInstanceUid = varSeriesInstanceUid;

            item.SopInstanceUid = varSopInstanceUid;

            item.RelativePath = varRelativePath;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varStudyIntegrityQueueGUID, string varSeriesDescription,
                                  string varSeriesInstanceUid, string varSopInstanceUid, string varRelativePath)
        {
            var item = new StudyIntegrityQueueUid();

            item.Guid = varGuid;

            item.StudyIntegrityQueueGUID = varStudyIntegrityQueueGUID;

            item.SeriesDescription = varSeriesDescription;

            item.SeriesInstanceUid = varSeriesInstanceUid;

            item.SopInstanceUid = varSopInstanceUid;

            item.RelativePath = varRelativePath;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn StudyIntegrityQueueGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn SeriesDescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn SeriesInstanceUidColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn SopInstanceUidColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn RelativePathColumn
        {
            get { return Schema.Columns[5]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string StudyIntegrityQueueGUID = @"StudyIntegrityQueueGUID";
            public static string SeriesDescription = @"SeriesDescription";
            public static string SeriesInstanceUid = @"SeriesInstanceUid";
            public static string SopInstanceUid = @"SopInstanceUid";
            public static string RelativePath = @"RelativePath";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}