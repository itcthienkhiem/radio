using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the CannedText class.
    /// </summary>
    [Serializable]
    public class CannedTextCollection : ActiveList<CannedText, CannedTextCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CannedTextCollection</returns>
        public CannedTextCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                CannedText o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the CannedText table.
    /// </summary>
    [Serializable]
    public class CannedText : ActiveRecord<CannedText>, IActiveRecord
    {
        #region .ctors and Default Settings

        public CannedText()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public CannedText(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public CannedText(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public CannedText(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("CannedText", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;
                colvarGuid.DefaultSetting = @"";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarLabel = new TableSchema.TableColumn(schema);
                colvarLabel.ColumnName = "Label";
                colvarLabel.DataType = DbType.String;
                colvarLabel.MaxLength = 50;
                colvarLabel.AutoIncrement = false;
                colvarLabel.IsNullable = false;
                colvarLabel.IsPrimaryKey = false;
                colvarLabel.IsForeignKey = false;
                colvarLabel.IsReadOnly = false;
                colvarLabel.DefaultSetting = @"";
                colvarLabel.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLabel);

                var colvarCategory = new TableSchema.TableColumn(schema);
                colvarCategory.ColumnName = "Category";
                colvarCategory.DataType = DbType.String;
                colvarCategory.MaxLength = 255;
                colvarCategory.AutoIncrement = false;
                colvarCategory.IsNullable = false;
                colvarCategory.IsPrimaryKey = false;
                colvarCategory.IsForeignKey = false;
                colvarCategory.IsReadOnly = false;
                colvarCategory.DefaultSetting = @"";
                colvarCategory.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCategory);

                var colvarTextX = new TableSchema.TableColumn(schema);
                colvarTextX.ColumnName = "Text";
                colvarTextX.DataType = DbType.String;
                colvarTextX.MaxLength = 1024;
                colvarTextX.AutoIncrement = false;
                colvarTextX.IsNullable = false;
                colvarTextX.IsPrimaryKey = false;
                colvarTextX.IsForeignKey = false;
                colvarTextX.IsReadOnly = false;
                colvarTextX.DefaultSetting = @"";
                colvarTextX.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTextX);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("CannedText", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("Label")]
        [Bindable(true)]
        public string Label
        {
            get { return GetColumnValue<string>(Columns.Label); }
            set { SetColumnValue(Columns.Label, value); }
        }

        [XmlAttribute("Category")]
        [Bindable(true)]
        public string Category
        {
            get { return GetColumnValue<string>(Columns.Category); }
            set { SetColumnValue(Columns.Category, value); }
        }

        [XmlAttribute("TextX")]
        [Bindable(true)]
        public string TextX
        {
            get { return GetColumnValue<string>(Columns.TextX); }
            set { SetColumnValue(Columns.TextX, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, string varLabel, string varCategory, string varTextX)
        {
            var item = new CannedText();

            item.Guid = varGuid;

            item.Label = varLabel;

            item.Category = varCategory;

            item.TextX = varTextX;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, string varLabel, string varCategory, string varTextX)
        {
            var item = new CannedText();

            item.Guid = varGuid;

            item.Label = varLabel;

            item.Category = varCategory;

            item.TextX = varTextX;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn LabelColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn CategoryColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn TextXColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string Label = @"Label";
            public static string Category = @"Category";
            public static string TextX = @"Text";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}