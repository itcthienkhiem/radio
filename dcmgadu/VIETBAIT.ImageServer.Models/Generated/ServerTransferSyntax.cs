using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the ServerTransferSyntax class.
    /// </summary>
    [Serializable]
    public class ServerTransferSyntaxCollection : ActiveList<ServerTransferSyntax, ServerTransferSyntaxCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ServerTransferSyntaxCollection</returns>
        public ServerTransferSyntaxCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                ServerTransferSyntax o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the ServerTransferSyntax table.
    /// </summary>
    [Serializable]
    public class ServerTransferSyntax : ActiveRecord<ServerTransferSyntax>, IActiveRecord
    {
        #region .ctors and Default Settings

        public ServerTransferSyntax()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public ServerTransferSyntax(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public ServerTransferSyntax(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public ServerTransferSyntax(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("ServerTransferSyntax", TableType.Table,
                                                   DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarUid = new TableSchema.TableColumn(schema);
                colvarUid.ColumnName = "Uid";
                colvarUid.DataType = DbType.AnsiString;
                colvarUid.MaxLength = 64;
                colvarUid.AutoIncrement = false;
                colvarUid.IsNullable = false;
                colvarUid.IsPrimaryKey = false;
                colvarUid.IsForeignKey = false;
                colvarUid.IsReadOnly = false;
                colvarUid.DefaultSetting = @"";
                colvarUid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarUid);

                var colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 256;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = false;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                var colvarLossless = new TableSchema.TableColumn(schema);
                colvarLossless.ColumnName = "Lossless";
                colvarLossless.DataType = DbType.Boolean;
                colvarLossless.MaxLength = 0;
                colvarLossless.AutoIncrement = false;
                colvarLossless.IsNullable = false;
                colvarLossless.IsPrimaryKey = false;
                colvarLossless.IsForeignKey = false;
                colvarLossless.IsReadOnly = false;
                colvarLossless.DefaultSetting = @"";
                colvarLossless.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLossless);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("ServerTransferSyntax", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("Uid")]
        [Bindable(true)]
        public string Uid
        {
            get { return GetColumnValue<string>(Columns.Uid); }
            set { SetColumnValue(Columns.Uid, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("Lossless")]
        [Bindable(true)]
        public bool Lossless
        {
            get { return GetColumnValue<bool>(Columns.Lossless); }
            set { SetColumnValue(Columns.Lossless, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public ArchiveStudyStorageCollection ArchiveStudyStorageRecords()
        {
            return
                new ArchiveStudyStorageCollection().Where(ArchiveStudyStorage.Columns.ServerTransferSyntaxGUID, Guid).
                    Load();
        }

        public DevicePreferredTransferSyntaxCollection DevicePreferredTransferSyntaxRecords()
        {
            return
                new DevicePreferredTransferSyntaxCollection().Where(
                    DevicePreferredTransferSyntax.Columns.ServerTransferSyntaxGUID, Guid).Load();
        }

        public FilesystemStudyStorageCollection FilesystemStudyStorageRecords()
        {
            return
                new FilesystemStudyStorageCollection().Where(FilesystemStudyStorage.Columns.ServerTransferSyntaxGUID,
                                                             Guid).Load();
        }

        public PartitionTransferSyntaxCollection PartitionTransferSyntaxRecords()
        {
            return
                new PartitionTransferSyntaxCollection().Where(PartitionTransferSyntax.Columns.ServerTransferSyntaxGUID,
                                                              Guid).Load();
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, string varUid, string varDescription, bool varLossless)
        {
            var item = new ServerTransferSyntax();

            item.Guid = varGuid;

            item.Uid = varUid;

            item.Description = varDescription;

            item.Lossless = varLossless;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, string varUid, string varDescription, bool varLossless)
        {
            var item = new ServerTransferSyntax();

            item.Guid = varGuid;

            item.Uid = varUid;

            item.Description = varDescription;

            item.Lossless = varLossless;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn UidColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn LosslessColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string Uid = @"Uid";
            public static string Description = @"Description";
            public static string Lossless = @"Lossless";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}