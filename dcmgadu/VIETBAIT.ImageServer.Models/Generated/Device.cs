using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the Device class.
    /// </summary>
    [Serializable]
    public class DeviceCollection : ActiveList<Device, DeviceCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DeviceCollection</returns>
        public DeviceCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                Device o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the Device table.
    /// </summary>
    [Serializable]
    public class Device : ActiveRecord<Device>, IActiveRecord
    {
        #region .ctors and Default Settings

        public Device()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public Device(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Device(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Device(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("Device", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarServerPartitionGUID = new TableSchema.TableColumn(schema);
                colvarServerPartitionGUID.ColumnName = "ServerPartitionGUID";
                colvarServerPartitionGUID.DataType = DbType.Guid;
                colvarServerPartitionGUID.MaxLength = 0;
                colvarServerPartitionGUID.AutoIncrement = false;
                colvarServerPartitionGUID.IsNullable = false;
                colvarServerPartitionGUID.IsPrimaryKey = false;
                colvarServerPartitionGUID.IsForeignKey = true;
                colvarServerPartitionGUID.IsReadOnly = false;
                colvarServerPartitionGUID.DefaultSetting = @"";

                colvarServerPartitionGUID.ForeignKeyTableName = "ServerPartition";
                schema.Columns.Add(colvarServerPartitionGUID);

                var colvarAeTitle = new TableSchema.TableColumn(schema);
                colvarAeTitle.ColumnName = "AeTitle";
                colvarAeTitle.DataType = DbType.AnsiString;
                colvarAeTitle.MaxLength = 16;
                colvarAeTitle.AutoIncrement = false;
                colvarAeTitle.IsNullable = false;
                colvarAeTitle.IsPrimaryKey = false;
                colvarAeTitle.IsForeignKey = false;
                colvarAeTitle.IsReadOnly = false;
                colvarAeTitle.DefaultSetting = @"";
                colvarAeTitle.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAeTitle);

                var colvarIpAddress = new TableSchema.TableColumn(schema);
                colvarIpAddress.ColumnName = "IpAddress";
                colvarIpAddress.DataType = DbType.AnsiString;
                colvarIpAddress.MaxLength = 16;
                colvarIpAddress.AutoIncrement = false;
                colvarIpAddress.IsNullable = true;
                colvarIpAddress.IsPrimaryKey = false;
                colvarIpAddress.IsForeignKey = false;
                colvarIpAddress.IsReadOnly = false;
                colvarIpAddress.DefaultSetting = @"";
                colvarIpAddress.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIpAddress);

                var colvarPort = new TableSchema.TableColumn(schema);
                colvarPort.ColumnName = "Port";
                colvarPort.DataType = DbType.Int32;
                colvarPort.MaxLength = 0;
                colvarPort.AutoIncrement = false;
                colvarPort.IsNullable = false;
                colvarPort.IsPrimaryKey = false;
                colvarPort.IsForeignKey = false;
                colvarPort.IsReadOnly = false;
                colvarPort.DefaultSetting = @"";
                colvarPort.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPort);

                var colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 256;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                var colvarDhcp = new TableSchema.TableColumn(schema);
                colvarDhcp.ColumnName = "Dhcp";
                colvarDhcp.DataType = DbType.Boolean;
                colvarDhcp.MaxLength = 0;
                colvarDhcp.AutoIncrement = false;
                colvarDhcp.IsNullable = false;
                colvarDhcp.IsPrimaryKey = false;
                colvarDhcp.IsForeignKey = false;
                colvarDhcp.IsReadOnly = false;
                colvarDhcp.DefaultSetting = @"";
                colvarDhcp.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDhcp);

                var colvarEnabled = new TableSchema.TableColumn(schema);
                colvarEnabled.ColumnName = "Enabled";
                colvarEnabled.DataType = DbType.Boolean;
                colvarEnabled.MaxLength = 0;
                colvarEnabled.AutoIncrement = false;
                colvarEnabled.IsNullable = false;
                colvarEnabled.IsPrimaryKey = false;
                colvarEnabled.IsForeignKey = false;
                colvarEnabled.IsReadOnly = false;
                colvarEnabled.DefaultSetting = @"";
                colvarEnabled.ForeignKeyTableName = "";
                schema.Columns.Add(colvarEnabled);

                var colvarAllowStorage = new TableSchema.TableColumn(schema);
                colvarAllowStorage.ColumnName = "AllowStorage";
                colvarAllowStorage.DataType = DbType.Boolean;
                colvarAllowStorage.MaxLength = 0;
                colvarAllowStorage.AutoIncrement = false;
                colvarAllowStorage.IsNullable = false;
                colvarAllowStorage.IsPrimaryKey = false;
                colvarAllowStorage.IsForeignKey = false;
                colvarAllowStorage.IsReadOnly = false;

                colvarAllowStorage.DefaultSetting = @"((0))";
                colvarAllowStorage.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAllowStorage);

                var colvarAcceptKOPR = new TableSchema.TableColumn(schema);
                colvarAcceptKOPR.ColumnName = "AcceptKOPR";
                colvarAcceptKOPR.DataType = DbType.Boolean;
                colvarAcceptKOPR.MaxLength = 0;
                colvarAcceptKOPR.AutoIncrement = false;
                colvarAcceptKOPR.IsNullable = false;
                colvarAcceptKOPR.IsPrimaryKey = false;
                colvarAcceptKOPR.IsForeignKey = false;
                colvarAcceptKOPR.IsReadOnly = false;

                colvarAcceptKOPR.DefaultSetting = @"((0))";
                colvarAcceptKOPR.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAcceptKOPR);

                var colvarAllowRetrieve = new TableSchema.TableColumn(schema);
                colvarAllowRetrieve.ColumnName = "AllowRetrieve";
                colvarAllowRetrieve.DataType = DbType.Boolean;
                colvarAllowRetrieve.MaxLength = 0;
                colvarAllowRetrieve.AutoIncrement = false;
                colvarAllowRetrieve.IsNullable = false;
                colvarAllowRetrieve.IsPrimaryKey = false;
                colvarAllowRetrieve.IsForeignKey = false;
                colvarAllowRetrieve.IsReadOnly = false;

                colvarAllowRetrieve.DefaultSetting = @"((0))";
                colvarAllowRetrieve.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAllowRetrieve);

                var colvarAllowQuery = new TableSchema.TableColumn(schema);
                colvarAllowQuery.ColumnName = "AllowQuery";
                colvarAllowQuery.DataType = DbType.Boolean;
                colvarAllowQuery.MaxLength = 0;
                colvarAllowQuery.AutoIncrement = false;
                colvarAllowQuery.IsNullable = false;
                colvarAllowQuery.IsPrimaryKey = false;
                colvarAllowQuery.IsForeignKey = false;
                colvarAllowQuery.IsReadOnly = false;

                colvarAllowQuery.DefaultSetting = @"((0))";
                colvarAllowQuery.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAllowQuery);

                var colvarAllowAutoRoute = new TableSchema.TableColumn(schema);
                colvarAllowAutoRoute.ColumnName = "AllowAutoRoute";
                colvarAllowAutoRoute.DataType = DbType.Boolean;
                colvarAllowAutoRoute.MaxLength = 0;
                colvarAllowAutoRoute.AutoIncrement = false;
                colvarAllowAutoRoute.IsNullable = false;
                colvarAllowAutoRoute.IsPrimaryKey = false;
                colvarAllowAutoRoute.IsForeignKey = false;
                colvarAllowAutoRoute.IsReadOnly = false;

                colvarAllowAutoRoute.DefaultSetting = @"((1))";
                colvarAllowAutoRoute.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAllowAutoRoute);

                var colvarThrottleMaxConnections = new TableSchema.TableColumn(schema);
                colvarThrottleMaxConnections.ColumnName = "ThrottleMaxConnections";
                colvarThrottleMaxConnections.DataType = DbType.Int16;
                colvarThrottleMaxConnections.MaxLength = 0;
                colvarThrottleMaxConnections.AutoIncrement = false;
                colvarThrottleMaxConnections.IsNullable = false;
                colvarThrottleMaxConnections.IsPrimaryKey = false;
                colvarThrottleMaxConnections.IsForeignKey = false;
                colvarThrottleMaxConnections.IsReadOnly = false;

                colvarThrottleMaxConnections.DefaultSetting = @"((-1))";
                colvarThrottleMaxConnections.ForeignKeyTableName = "";
                schema.Columns.Add(colvarThrottleMaxConnections);

                var colvarLastAccessedTime = new TableSchema.TableColumn(schema);
                colvarLastAccessedTime.ColumnName = "LastAccessedTime";
                colvarLastAccessedTime.DataType = DbType.DateTime;
                colvarLastAccessedTime.MaxLength = 0;
                colvarLastAccessedTime.AutoIncrement = false;
                colvarLastAccessedTime.IsNullable = false;
                colvarLastAccessedTime.IsPrimaryKey = false;
                colvarLastAccessedTime.IsForeignKey = false;
                colvarLastAccessedTime.IsReadOnly = false;

                colvarLastAccessedTime.DefaultSetting = @"(getdate())";
                colvarLastAccessedTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLastAccessedTime);

                var colvarDeviceTypeEnum = new TableSchema.TableColumn(schema);
                colvarDeviceTypeEnum.ColumnName = "DeviceTypeEnum";
                colvarDeviceTypeEnum.DataType = DbType.Int16;
                colvarDeviceTypeEnum.MaxLength = 0;
                colvarDeviceTypeEnum.AutoIncrement = false;
                colvarDeviceTypeEnum.IsNullable = false;
                colvarDeviceTypeEnum.IsPrimaryKey = false;
                colvarDeviceTypeEnum.IsForeignKey = true;
                colvarDeviceTypeEnum.IsReadOnly = false;

                colvarDeviceTypeEnum.DefaultSetting = @"((100))";

                colvarDeviceTypeEnum.ForeignKeyTableName = "DeviceTypeEnum";
                schema.Columns.Add(colvarDeviceTypeEnum);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("Device", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("ServerPartitionGUID")]
        [Bindable(true)]
        public Guid ServerPartitionGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerPartitionGUID); }
            set { SetColumnValue(Columns.ServerPartitionGUID, value); }
        }

        [XmlAttribute("AeTitle")]
        [Bindable(true)]
        public string AeTitle
        {
            get { return GetColumnValue<string>(Columns.AeTitle); }
            set { SetColumnValue(Columns.AeTitle, value); }
        }

        [XmlAttribute("IpAddress")]
        [Bindable(true)]
        public string IpAddress
        {
            get { return GetColumnValue<string>(Columns.IpAddress); }
            set { SetColumnValue(Columns.IpAddress, value); }
        }

        [XmlAttribute("Port")]
        [Bindable(true)]
        public int Port
        {
            get { return GetColumnValue<int>(Columns.Port); }
            set { SetColumnValue(Columns.Port, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("Dhcp")]
        [Bindable(true)]
        public bool Dhcp
        {
            get { return GetColumnValue<bool>(Columns.Dhcp); }
            set { SetColumnValue(Columns.Dhcp, value); }
        }

        [XmlAttribute("Enabled")]
        [Bindable(true)]
        public bool Enabled
        {
            get { return GetColumnValue<bool>(Columns.Enabled); }
            set { SetColumnValue(Columns.Enabled, value); }
        }

        [XmlAttribute("AllowStorage")]
        [Bindable(true)]
        public bool AllowStorage
        {
            get { return GetColumnValue<bool>(Columns.AllowStorage); }
            set { SetColumnValue(Columns.AllowStorage, value); }
        }

        [XmlAttribute("AcceptKOPR")]
        [Bindable(true)]
        public bool AcceptKOPR
        {
            get { return GetColumnValue<bool>(Columns.AcceptKOPR); }
            set { SetColumnValue(Columns.AcceptKOPR, value); }
        }

        [XmlAttribute("AllowRetrieve")]
        [Bindable(true)]
        public bool AllowRetrieve
        {
            get { return GetColumnValue<bool>(Columns.AllowRetrieve); }
            set { SetColumnValue(Columns.AllowRetrieve, value); }
        }

        [XmlAttribute("AllowQuery")]
        [Bindable(true)]
        public bool AllowQuery
        {
            get { return GetColumnValue<bool>(Columns.AllowQuery); }
            set { SetColumnValue(Columns.AllowQuery, value); }
        }

        [XmlAttribute("AllowAutoRoute")]
        [Bindable(true)]
        public bool AllowAutoRoute
        {
            get { return GetColumnValue<bool>(Columns.AllowAutoRoute); }
            set { SetColumnValue(Columns.AllowAutoRoute, value); }
        }

        [XmlAttribute("ThrottleMaxConnections")]
        [Bindable(true)]
        public short ThrottleMaxConnections
        {
            get { return GetColumnValue<short>(Columns.ThrottleMaxConnections); }
            set { SetColumnValue(Columns.ThrottleMaxConnections, value); }
        }

        [XmlAttribute("LastAccessedTime")]
        [Bindable(true)]
        public DateTime LastAccessedTime
        {
            get { return GetColumnValue<DateTime>(Columns.LastAccessedTime); }
            set { SetColumnValue(Columns.LastAccessedTime, value); }
        }

        [XmlAttribute("DeviceTypeEnum")]
        [Bindable(true)]
        public short DeviceTypeEnum
        {
            get { return GetColumnValue<short>(Columns.DeviceTypeEnum); }
            set { SetColumnValue(Columns.DeviceTypeEnum, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public DevicePreferredTransferSyntaxCollection DevicePreferredTransferSyntaxRecords()
        {
            return
                new DevicePreferredTransferSyntaxCollection().Where(DevicePreferredTransferSyntax.Columns.DeviceGUID,
                                                                    Guid).Load();
        }

        public WorkQueueCollection WorkQueueRecords()
        {
            return new WorkQueueCollection().Where(WorkQueue.Columns.DeviceGUID, Guid).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a DeviceTypeEnum ActiveRecord object related to this Device
        /// 
        /// </summary>
        public DeviceTypeEnum DeviceTypeEnumRecord
        {
            get { return Models.DeviceTypeEnum.FetchByID(DeviceTypeEnum); }
            set { SetColumnValue("DeviceTypeEnum", value.EnumX); }
        }


        /// <summary>
        /// Returns a ServerPartition ActiveRecord object related to this Device
        /// 
        /// </summary>
        public ServerPartition ServerPartition
        {
            get { return ServerPartition.FetchByID(ServerPartitionGUID); }
            set { SetColumnValue("ServerPartitionGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varServerPartitionGUID, string varAeTitle, string varIpAddress,
                                  int varPort, string varDescription, bool varDhcp, bool varEnabled,
                                  bool varAllowStorage, bool varAcceptKOPR, bool varAllowRetrieve, bool varAllowQuery,
                                  bool varAllowAutoRoute, short varThrottleMaxConnections, DateTime varLastAccessedTime,
                                  short varDeviceTypeEnum)
        {
            var item = new Device();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.AeTitle = varAeTitle;

            item.IpAddress = varIpAddress;

            item.Port = varPort;

            item.Description = varDescription;

            item.Dhcp = varDhcp;

            item.Enabled = varEnabled;

            item.AllowStorage = varAllowStorage;

            item.AcceptKOPR = varAcceptKOPR;

            item.AllowRetrieve = varAllowRetrieve;

            item.AllowQuery = varAllowQuery;

            item.AllowAutoRoute = varAllowAutoRoute;

            item.ThrottleMaxConnections = varThrottleMaxConnections;

            item.LastAccessedTime = varLastAccessedTime;

            item.DeviceTypeEnum = varDeviceTypeEnum;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varServerPartitionGUID, string varAeTitle, string varIpAddress,
                                  int varPort, string varDescription, bool varDhcp, bool varEnabled,
                                  bool varAllowStorage, bool varAcceptKOPR, bool varAllowRetrieve, bool varAllowQuery,
                                  bool varAllowAutoRoute, short varThrottleMaxConnections, DateTime varLastAccessedTime,
                                  short varDeviceTypeEnum)
        {
            var item = new Device();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.AeTitle = varAeTitle;

            item.IpAddress = varIpAddress;

            item.Port = varPort;

            item.Description = varDescription;

            item.Dhcp = varDhcp;

            item.Enabled = varEnabled;

            item.AllowStorage = varAllowStorage;

            item.AcceptKOPR = varAcceptKOPR;

            item.AllowRetrieve = varAllowRetrieve;

            item.AllowQuery = varAllowQuery;

            item.AllowAutoRoute = varAllowAutoRoute;

            item.ThrottleMaxConnections = varThrottleMaxConnections;

            item.LastAccessedTime = varLastAccessedTime;

            item.DeviceTypeEnum = varDeviceTypeEnum;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ServerPartitionGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn AeTitleColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn PortColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn DhcpColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn EnabledColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn AllowStorageColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn AcceptKOPRColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn AllowRetrieveColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn AllowQueryColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn AllowAutoRouteColumn
        {
            get { return Schema.Columns[12]; }
        }


        public static TableSchema.TableColumn ThrottleMaxConnectionsColumn
        {
            get { return Schema.Columns[13]; }
        }


        public static TableSchema.TableColumn LastAccessedTimeColumn
        {
            get { return Schema.Columns[14]; }
        }


        public static TableSchema.TableColumn DeviceTypeEnumColumn
        {
            get { return Schema.Columns[15]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string ServerPartitionGUID = @"ServerPartitionGUID";
            public static string AeTitle = @"AeTitle";
            public static string IpAddress = @"IpAddress";
            public static string Port = @"Port";
            public static string Description = @"Description";
            public static string Dhcp = @"Dhcp";
            public static string Enabled = @"Enabled";
            public static string AllowStorage = @"AllowStorage";
            public static string AcceptKOPR = @"AcceptKOPR";
            public static string AllowRetrieve = @"AllowRetrieve";
            public static string AllowQuery = @"AllowQuery";
            public static string AllowAutoRoute = @"AllowAutoRoute";
            public static string ThrottleMaxConnections = @"ThrottleMaxConnections";
            public static string LastAccessedTime = @"LastAccessedTime";
            public static string DeviceTypeEnum = @"DeviceTypeEnum";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no ManyToMany tables defined (0)
    }
}