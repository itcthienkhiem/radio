using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the Alert class.
    /// </summary>
    [Serializable]
    public class AlertCollection : ActiveList<Alert, AlertCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>AlertCollection</returns>
        public AlertCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                Alert o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the Alert table.
    /// </summary>
    [Serializable]
    public class Alert : ActiveRecord<Alert>, IActiveRecord
    {
        #region .ctors and Default Settings

        public Alert()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public Alert(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Alert(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Alert(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("Alert", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarInsertTime = new TableSchema.TableColumn(schema);
                colvarInsertTime.ColumnName = "InsertTime";
                colvarInsertTime.DataType = DbType.DateTime;
                colvarInsertTime.MaxLength = 0;
                colvarInsertTime.AutoIncrement = false;
                colvarInsertTime.IsNullable = false;
                colvarInsertTime.IsPrimaryKey = false;
                colvarInsertTime.IsForeignKey = false;
                colvarInsertTime.IsReadOnly = false;
                colvarInsertTime.DefaultSetting = @"";
                colvarInsertTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarInsertTime);

                var colvarComponent = new TableSchema.TableColumn(schema);
                colvarComponent.ColumnName = "Component";
                colvarComponent.DataType = DbType.String;
                colvarComponent.MaxLength = 50;
                colvarComponent.AutoIncrement = false;
                colvarComponent.IsNullable = false;
                colvarComponent.IsPrimaryKey = false;
                colvarComponent.IsForeignKey = false;
                colvarComponent.IsReadOnly = false;
                colvarComponent.DefaultSetting = @"";
                colvarComponent.ForeignKeyTableName = "";
                schema.Columns.Add(colvarComponent);

                var colvarTypeCodeX = new TableSchema.TableColumn(schema);
                colvarTypeCodeX.ColumnName = "TypeCode";
                colvarTypeCodeX.DataType = DbType.Int32;
                colvarTypeCodeX.MaxLength = 0;
                colvarTypeCodeX.AutoIncrement = false;
                colvarTypeCodeX.IsNullable = false;
                colvarTypeCodeX.IsPrimaryKey = false;
                colvarTypeCodeX.IsForeignKey = false;
                colvarTypeCodeX.IsReadOnly = false;
                colvarTypeCodeX.DefaultSetting = @"";
                colvarTypeCodeX.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTypeCodeX);

                var colvarSource = new TableSchema.TableColumn(schema);
                colvarSource.ColumnName = "Source";
                colvarSource.DataType = DbType.String;
                colvarSource.MaxLength = 256;
                colvarSource.AutoIncrement = false;
                colvarSource.IsNullable = false;
                colvarSource.IsPrimaryKey = false;
                colvarSource.IsForeignKey = false;
                colvarSource.IsReadOnly = false;
                colvarSource.DefaultSetting = @"";
                colvarSource.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSource);

                var colvarAlertLevelEnum = new TableSchema.TableColumn(schema);
                colvarAlertLevelEnum.ColumnName = "AlertLevelEnum";
                colvarAlertLevelEnum.DataType = DbType.Int16;
                colvarAlertLevelEnum.MaxLength = 0;
                colvarAlertLevelEnum.AutoIncrement = false;
                colvarAlertLevelEnum.IsNullable = false;
                colvarAlertLevelEnum.IsPrimaryKey = false;
                colvarAlertLevelEnum.IsForeignKey = true;
                colvarAlertLevelEnum.IsReadOnly = false;
                colvarAlertLevelEnum.DefaultSetting = @"";

                colvarAlertLevelEnum.ForeignKeyTableName = "AlertLevelEnum";
                schema.Columns.Add(colvarAlertLevelEnum);

                var colvarAlertCategoryEnum = new TableSchema.TableColumn(schema);
                colvarAlertCategoryEnum.ColumnName = "AlertCategoryEnum";
                colvarAlertCategoryEnum.DataType = DbType.Int16;
                colvarAlertCategoryEnum.MaxLength = 0;
                colvarAlertCategoryEnum.AutoIncrement = false;
                colvarAlertCategoryEnum.IsNullable = false;
                colvarAlertCategoryEnum.IsPrimaryKey = false;
                colvarAlertCategoryEnum.IsForeignKey = true;
                colvarAlertCategoryEnum.IsReadOnly = false;
                colvarAlertCategoryEnum.DefaultSetting = @"";

                colvarAlertCategoryEnum.ForeignKeyTableName = "AlertCategoryEnum";
                schema.Columns.Add(colvarAlertCategoryEnum);

                var colvarContent = new TableSchema.TableColumn(schema);
                colvarContent.ColumnName = "Content";
                colvarContent.DataType = DbType.AnsiString;
                colvarContent.MaxLength = -1;
                colvarContent.AutoIncrement = false;
                colvarContent.IsNullable = false;
                colvarContent.IsPrimaryKey = false;
                colvarContent.IsForeignKey = false;
                colvarContent.IsReadOnly = false;
                colvarContent.DefaultSetting = @"";
                colvarContent.ForeignKeyTableName = "";
                schema.Columns.Add(colvarContent);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("Alert", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("InsertTime")]
        [Bindable(true)]
        public DateTime InsertTime
        {
            get { return GetColumnValue<DateTime>(Columns.InsertTime); }
            set { SetColumnValue(Columns.InsertTime, value); }
        }

        [XmlAttribute("Component")]
        [Bindable(true)]
        public string Component
        {
            get { return GetColumnValue<string>(Columns.Component); }
            set { SetColumnValue(Columns.Component, value); }
        }

        [XmlAttribute("TypeCodeX")]
        [Bindable(true)]
        public int TypeCodeX
        {
            get { return GetColumnValue<int>(Columns.TypeCodeX); }
            set { SetColumnValue(Columns.TypeCodeX, value); }
        }

        [XmlAttribute("Source")]
        [Bindable(true)]
        public string Source
        {
            get { return GetColumnValue<string>(Columns.Source); }
            set { SetColumnValue(Columns.Source, value); }
        }

        [XmlAttribute("AlertLevelEnum")]
        [Bindable(true)]
        public short AlertLevelEnum
        {
            get { return GetColumnValue<short>(Columns.AlertLevelEnum); }
            set { SetColumnValue(Columns.AlertLevelEnum, value); }
        }

        [XmlAttribute("AlertCategoryEnum")]
        [Bindable(true)]
        public short AlertCategoryEnum
        {
            get { return GetColumnValue<short>(Columns.AlertCategoryEnum); }
            set { SetColumnValue(Columns.AlertCategoryEnum, value); }
        }

        [XmlAttribute("Content")]
        [Bindable(true)]
        public string Content
        {
            get { return GetColumnValue<string>(Columns.Content); }
            set { SetColumnValue(Columns.Content, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a AlertCategoryEnum ActiveRecord object related to this Alert
        /// 
        /// </summary>
        public AlertCategoryEnum AlertCategoryEnumRecord
        {
            get { return Models.AlertCategoryEnum.FetchByID(AlertCategoryEnum); }
            set { SetColumnValue("AlertCategoryEnum", value.EnumX); }
        }


        /// <summary>
        /// Returns a AlertLevelEnum ActiveRecord object related to this Alert
        /// 
        /// </summary>
        public AlertLevelEnum AlertLevelEnumRecord
        {
            get { return Models.AlertLevelEnum.FetchByID(AlertLevelEnum); }
            set { SetColumnValue("AlertLevelEnum", value.EnumX); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, DateTime varInsertTime, string varComponent, int varTypeCodeX,
                                  string varSource, short varAlertLevelEnum, short varAlertCategoryEnum,
                                  string varContent)
        {
            var item = new Alert();

            item.Guid = varGuid;

            item.InsertTime = varInsertTime;

            item.Component = varComponent;

            item.TypeCodeX = varTypeCodeX;

            item.Source = varSource;

            item.AlertLevelEnum = varAlertLevelEnum;

            item.AlertCategoryEnum = varAlertCategoryEnum;

            item.Content = varContent;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, DateTime varInsertTime, string varComponent, int varTypeCodeX,
                                  string varSource, short varAlertLevelEnum, short varAlertCategoryEnum,
                                  string varContent)
        {
            var item = new Alert();

            item.Guid = varGuid;

            item.InsertTime = varInsertTime;

            item.Component = varComponent;

            item.TypeCodeX = varTypeCodeX;

            item.Source = varSource;

            item.AlertLevelEnum = varAlertLevelEnum;

            item.AlertCategoryEnum = varAlertCategoryEnum;

            item.Content = varContent;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn InsertTimeColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn ComponentColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn TypeCodeXColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn SourceColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn AlertLevelEnumColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn AlertCategoryEnumColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn ContentColumn
        {
            get { return Schema.Columns[7]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string InsertTime = @"InsertTime";
            public static string Component = @"Component";
            public static string TypeCodeX = @"TypeCode";
            public static string Source = @"Source";
            public static string AlertLevelEnum = @"AlertLevelEnum";
            public static string AlertCategoryEnum = @"AlertCategoryEnum";
            public static string Content = @"Content";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}