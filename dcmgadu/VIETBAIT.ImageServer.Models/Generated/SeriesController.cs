using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Controller class for Series
    /// </summary>
    [DataObject]
    public class SeriesController
    {
        // Preload our schema..
        private Series thisSchemaLoad = new Series();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public SeriesCollection FetchAll()
        {
            var coll = new SeriesCollection();
            var qry = new Query(Series.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public SeriesCollection FetchByID(object Guid)
        {
            SeriesCollection coll = new SeriesCollection().Where("GUID", Guid).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public SeriesCollection FetchByQuery(Query qry)
        {
            var coll = new SeriesCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Guid)
        {
            return (Series.Delete(Guid) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Guid)
        {
            return (Series.Destroy(Guid) == 1);
        }


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(Guid Guid, Guid ServerPartitionGUID, Guid StudyGUID, string SeriesInstanceUid,
                           string Modality, string SeriesNumber, string SeriesDescription,
                           int NumberOfSeriesRelatedInstances, string PerformedProcedureStepStartDate,
                           string PerformedProcedureStepStartTime, string SourceApplicationEntityTitle)
        {
            var item = new Series();

            item.Guid = Guid;

            item.ServerPartitionGUID = ServerPartitionGUID;

            item.StudyGUID = StudyGUID;

            item.SeriesInstanceUid = SeriesInstanceUid;

            item.Modality = Modality;

            item.SeriesNumber = SeriesNumber;

            item.SeriesDescription = SeriesDescription;

            item.NumberOfSeriesRelatedInstances = NumberOfSeriesRelatedInstances;

            item.PerformedProcedureStepStartDate = PerformedProcedureStepStartDate;

            item.PerformedProcedureStepStartTime = PerformedProcedureStepStartTime;

            item.SourceApplicationEntityTitle = SourceApplicationEntityTitle;


            item.Save(UserName);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(Guid Guid, Guid ServerPartitionGUID, Guid StudyGUID, string SeriesInstanceUid,
                           string Modality, string SeriesNumber, string SeriesDescription,
                           int NumberOfSeriesRelatedInstances, string PerformedProcedureStepStartDate,
                           string PerformedProcedureStepStartTime, string SourceApplicationEntityTitle)
        {
            var item = new Series();
            item.MarkOld();
            item.IsLoaded = true;

            item.Guid = Guid;

            item.ServerPartitionGUID = ServerPartitionGUID;

            item.StudyGUID = StudyGUID;

            item.SeriesInstanceUid = SeriesInstanceUid;

            item.Modality = Modality;

            item.SeriesNumber = SeriesNumber;

            item.SeriesDescription = SeriesDescription;

            item.NumberOfSeriesRelatedInstances = NumberOfSeriesRelatedInstances;

            item.PerformedProcedureStepStartDate = PerformedProcedureStepStartDate;

            item.PerformedProcedureStepStartTime = PerformedProcedureStepStartTime;

            item.SourceApplicationEntityTitle = SourceApplicationEntityTitle;

            item.Save(UserName);
        }
    }
}