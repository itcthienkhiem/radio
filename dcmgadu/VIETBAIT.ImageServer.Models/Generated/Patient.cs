using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the Patient class.
    /// </summary>
    [Serializable]
    public class PatientCollection : ActiveList<Patient, PatientCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PatientCollection</returns>
        public PatientCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                Patient o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the Patient table.
    /// </summary>
    [Serializable]
    public class Patient : ActiveRecord<Patient>, IActiveRecord
    {
        #region .ctors and Default Settings

        public Patient()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public Patient(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Patient(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Patient(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("Patient", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarServerPartitionGUID = new TableSchema.TableColumn(schema);
                colvarServerPartitionGUID.ColumnName = "ServerPartitionGUID";
                colvarServerPartitionGUID.DataType = DbType.Guid;
                colvarServerPartitionGUID.MaxLength = 0;
                colvarServerPartitionGUID.AutoIncrement = false;
                colvarServerPartitionGUID.IsNullable = false;
                colvarServerPartitionGUID.IsPrimaryKey = false;
                colvarServerPartitionGUID.IsForeignKey = true;
                colvarServerPartitionGUID.IsReadOnly = false;
                colvarServerPartitionGUID.DefaultSetting = @"";

                colvarServerPartitionGUID.ForeignKeyTableName = "ServerPartition";
                schema.Columns.Add(colvarServerPartitionGUID);

                var colvarPatientsName = new TableSchema.TableColumn(schema);
                colvarPatientsName.ColumnName = "PatientsName";
                colvarPatientsName.DataType = DbType.String;
                colvarPatientsName.MaxLength = 64;
                colvarPatientsName.AutoIncrement = false;
                colvarPatientsName.IsNullable = true;
                colvarPatientsName.IsPrimaryKey = false;
                colvarPatientsName.IsForeignKey = false;
                colvarPatientsName.IsReadOnly = false;
                colvarPatientsName.DefaultSetting = @"";
                colvarPatientsName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientsName);

                var colvarPatientId = new TableSchema.TableColumn(schema);
                colvarPatientId.ColumnName = "PatientId";
                colvarPatientId.DataType = DbType.String;
                colvarPatientId.MaxLength = 64;
                colvarPatientId.AutoIncrement = false;
                colvarPatientId.IsNullable = true;
                colvarPatientId.IsPrimaryKey = false;
                colvarPatientId.IsForeignKey = false;
                colvarPatientId.IsReadOnly = false;
                colvarPatientId.DefaultSetting = @"";
                colvarPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientId);

                var colvarIssuerOfPatientId = new TableSchema.TableColumn(schema);
                colvarIssuerOfPatientId.ColumnName = "IssuerOfPatientId";
                colvarIssuerOfPatientId.DataType = DbType.String;
                colvarIssuerOfPatientId.MaxLength = 64;
                colvarIssuerOfPatientId.AutoIncrement = false;
                colvarIssuerOfPatientId.IsNullable = true;
                colvarIssuerOfPatientId.IsPrimaryKey = false;
                colvarIssuerOfPatientId.IsForeignKey = false;
                colvarIssuerOfPatientId.IsReadOnly = false;
                colvarIssuerOfPatientId.DefaultSetting = @"";
                colvarIssuerOfPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIssuerOfPatientId);

                var colvarNumberOfPatientRelatedStudies = new TableSchema.TableColumn(schema);
                colvarNumberOfPatientRelatedStudies.ColumnName = "NumberOfPatientRelatedStudies";
                colvarNumberOfPatientRelatedStudies.DataType = DbType.Int32;
                colvarNumberOfPatientRelatedStudies.MaxLength = 0;
                colvarNumberOfPatientRelatedStudies.AutoIncrement = false;
                colvarNumberOfPatientRelatedStudies.IsNullable = false;
                colvarNumberOfPatientRelatedStudies.IsPrimaryKey = false;
                colvarNumberOfPatientRelatedStudies.IsForeignKey = false;
                colvarNumberOfPatientRelatedStudies.IsReadOnly = false;
                colvarNumberOfPatientRelatedStudies.DefaultSetting = @"";
                colvarNumberOfPatientRelatedStudies.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNumberOfPatientRelatedStudies);

                var colvarNumberOfPatientRelatedSeries = new TableSchema.TableColumn(schema);
                colvarNumberOfPatientRelatedSeries.ColumnName = "NumberOfPatientRelatedSeries";
                colvarNumberOfPatientRelatedSeries.DataType = DbType.Int32;
                colvarNumberOfPatientRelatedSeries.MaxLength = 0;
                colvarNumberOfPatientRelatedSeries.AutoIncrement = false;
                colvarNumberOfPatientRelatedSeries.IsNullable = false;
                colvarNumberOfPatientRelatedSeries.IsPrimaryKey = false;
                colvarNumberOfPatientRelatedSeries.IsForeignKey = false;
                colvarNumberOfPatientRelatedSeries.IsReadOnly = false;
                colvarNumberOfPatientRelatedSeries.DefaultSetting = @"";
                colvarNumberOfPatientRelatedSeries.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNumberOfPatientRelatedSeries);

                var colvarNumberOfPatientRelatedInstances = new TableSchema.TableColumn(schema);
                colvarNumberOfPatientRelatedInstances.ColumnName = "NumberOfPatientRelatedInstances";
                colvarNumberOfPatientRelatedInstances.DataType = DbType.Int32;
                colvarNumberOfPatientRelatedInstances.MaxLength = 0;
                colvarNumberOfPatientRelatedInstances.AutoIncrement = false;
                colvarNumberOfPatientRelatedInstances.IsNullable = false;
                colvarNumberOfPatientRelatedInstances.IsPrimaryKey = false;
                colvarNumberOfPatientRelatedInstances.IsForeignKey = false;
                colvarNumberOfPatientRelatedInstances.IsReadOnly = false;
                colvarNumberOfPatientRelatedInstances.DefaultSetting = @"";
                colvarNumberOfPatientRelatedInstances.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNumberOfPatientRelatedInstances);

                var colvarSpecificCharacterSet = new TableSchema.TableColumn(schema);
                colvarSpecificCharacterSet.ColumnName = "SpecificCharacterSet";
                colvarSpecificCharacterSet.DataType = DbType.AnsiString;
                colvarSpecificCharacterSet.MaxLength = 128;
                colvarSpecificCharacterSet.AutoIncrement = false;
                colvarSpecificCharacterSet.IsNullable = true;
                colvarSpecificCharacterSet.IsPrimaryKey = false;
                colvarSpecificCharacterSet.IsForeignKey = false;
                colvarSpecificCharacterSet.IsReadOnly = false;
                colvarSpecificCharacterSet.DefaultSetting = @"";
                colvarSpecificCharacterSet.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSpecificCharacterSet);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("Patient", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("ServerPartitionGUID")]
        [Bindable(true)]
        public Guid ServerPartitionGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerPartitionGUID); }
            set { SetColumnValue(Columns.ServerPartitionGUID, value); }
        }

        [XmlAttribute("PatientsName")]
        [Bindable(true)]
        public string PatientsName
        {
            get { return GetColumnValue<string>(Columns.PatientsName); }
            set { SetColumnValue(Columns.PatientsName, value); }
        }

        [XmlAttribute("PatientId")]
        [Bindable(true)]
        public string PatientId
        {
            get { return GetColumnValue<string>(Columns.PatientId); }
            set { SetColumnValue(Columns.PatientId, value); }
        }

        [XmlAttribute("IssuerOfPatientId")]
        [Bindable(true)]
        public string IssuerOfPatientId
        {
            get { return GetColumnValue<string>(Columns.IssuerOfPatientId); }
            set { SetColumnValue(Columns.IssuerOfPatientId, value); }
        }

        [XmlAttribute("NumberOfPatientRelatedStudies")]
        [Bindable(true)]
        public int NumberOfPatientRelatedStudies
        {
            get { return GetColumnValue<int>(Columns.NumberOfPatientRelatedStudies); }
            set { SetColumnValue(Columns.NumberOfPatientRelatedStudies, value); }
        }

        [XmlAttribute("NumberOfPatientRelatedSeries")]
        [Bindable(true)]
        public int NumberOfPatientRelatedSeries
        {
            get { return GetColumnValue<int>(Columns.NumberOfPatientRelatedSeries); }
            set { SetColumnValue(Columns.NumberOfPatientRelatedSeries, value); }
        }

        [XmlAttribute("NumberOfPatientRelatedInstances")]
        [Bindable(true)]
        public int NumberOfPatientRelatedInstances
        {
            get { return GetColumnValue<int>(Columns.NumberOfPatientRelatedInstances); }
            set { SetColumnValue(Columns.NumberOfPatientRelatedInstances, value); }
        }

        [XmlAttribute("SpecificCharacterSet")]
        [Bindable(true)]
        public string SpecificCharacterSet
        {
            get { return GetColumnValue<string>(Columns.SpecificCharacterSet); }
            set { SetColumnValue(Columns.SpecificCharacterSet, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public StudyCollection StudyRecords()
        {
            return new StudyCollection().Where(Study.Columns.PatientGUID, Guid).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a ServerPartition ActiveRecord object related to this Patient
        /// 
        /// </summary>
        public ServerPartition ServerPartition
        {
            get { return ServerPartition.FetchByID(ServerPartitionGUID); }
            set { SetColumnValue("ServerPartitionGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varServerPartitionGUID, string varPatientsName, string varPatientId,
                                  string varIssuerOfPatientId, int varNumberOfPatientRelatedStudies,
                                  int varNumberOfPatientRelatedSeries, int varNumberOfPatientRelatedInstances,
                                  string varSpecificCharacterSet)
        {
            var item = new Patient();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.PatientsName = varPatientsName;

            item.PatientId = varPatientId;

            item.IssuerOfPatientId = varIssuerOfPatientId;

            item.NumberOfPatientRelatedStudies = varNumberOfPatientRelatedStudies;

            item.NumberOfPatientRelatedSeries = varNumberOfPatientRelatedSeries;

            item.NumberOfPatientRelatedInstances = varNumberOfPatientRelatedInstances;

            item.SpecificCharacterSet = varSpecificCharacterSet;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varServerPartitionGUID, string varPatientsName, string varPatientId,
                                  string varIssuerOfPatientId, int varNumberOfPatientRelatedStudies,
                                  int varNumberOfPatientRelatedSeries, int varNumberOfPatientRelatedInstances,
                                  string varSpecificCharacterSet)
        {
            var item = new Patient();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.PatientsName = varPatientsName;

            item.PatientId = varPatientId;

            item.IssuerOfPatientId = varIssuerOfPatientId;

            item.NumberOfPatientRelatedStudies = varNumberOfPatientRelatedStudies;

            item.NumberOfPatientRelatedSeries = varNumberOfPatientRelatedSeries;

            item.NumberOfPatientRelatedInstances = varNumberOfPatientRelatedInstances;

            item.SpecificCharacterSet = varSpecificCharacterSet;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ServerPartitionGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn PatientsNameColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn IssuerOfPatientIdColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn NumberOfPatientRelatedStudiesColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn NumberOfPatientRelatedSeriesColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn NumberOfPatientRelatedInstancesColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn SpecificCharacterSetColumn
        {
            get { return Schema.Columns[8]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string ServerPartitionGUID = @"ServerPartitionGUID";
            public static string PatientsName = @"PatientsName";
            public static string PatientId = @"PatientId";
            public static string IssuerOfPatientId = @"IssuerOfPatientId";
            public static string NumberOfPatientRelatedStudies = @"NumberOfPatientRelatedStudies";
            public static string NumberOfPatientRelatedSeries = @"NumberOfPatientRelatedSeries";
            public static string NumberOfPatientRelatedInstances = @"NumberOfPatientRelatedInstances";
            public static string SpecificCharacterSet = @"SpecificCharacterSet";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no ManyToMany tables defined (0)
    }
}