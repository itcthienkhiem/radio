using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the StudyIntegrityQueue class.
    /// </summary>
    [Serializable]
    public class StudyIntegrityQueueCollection : ActiveList<StudyIntegrityQueue, StudyIntegrityQueueCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>StudyIntegrityQueueCollection</returns>
        public StudyIntegrityQueueCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                StudyIntegrityQueue o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the StudyIntegrityQueue table.
    /// </summary>
    [Serializable]
    public class StudyIntegrityQueue : ActiveRecord<StudyIntegrityQueue>, IActiveRecord
    {
        #region .ctors and Default Settings

        public StudyIntegrityQueue()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public StudyIntegrityQueue(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public StudyIntegrityQueue(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public StudyIntegrityQueue(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("StudyIntegrityQueue", TableType.Table,
                                                   DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarServerPartitionGUID = new TableSchema.TableColumn(schema);
                colvarServerPartitionGUID.ColumnName = "ServerPartitionGUID";
                colvarServerPartitionGUID.DataType = DbType.Guid;
                colvarServerPartitionGUID.MaxLength = 0;
                colvarServerPartitionGUID.AutoIncrement = false;
                colvarServerPartitionGUID.IsNullable = false;
                colvarServerPartitionGUID.IsPrimaryKey = false;
                colvarServerPartitionGUID.IsForeignKey = true;
                colvarServerPartitionGUID.IsReadOnly = false;
                colvarServerPartitionGUID.DefaultSetting = @"";

                colvarServerPartitionGUID.ForeignKeyTableName = "ServerPartition";
                schema.Columns.Add(colvarServerPartitionGUID);

                var colvarStudyStorageGUID = new TableSchema.TableColumn(schema);
                colvarStudyStorageGUID.ColumnName = "StudyStorageGUID";
                colvarStudyStorageGUID.DataType = DbType.Guid;
                colvarStudyStorageGUID.MaxLength = 0;
                colvarStudyStorageGUID.AutoIncrement = false;
                colvarStudyStorageGUID.IsNullable = false;
                colvarStudyStorageGUID.IsPrimaryKey = false;
                colvarStudyStorageGUID.IsForeignKey = true;
                colvarStudyStorageGUID.IsReadOnly = false;
                colvarStudyStorageGUID.DefaultSetting = @"";

                colvarStudyStorageGUID.ForeignKeyTableName = "StudyStorage";
                schema.Columns.Add(colvarStudyStorageGUID);

                var colvarInsertTime = new TableSchema.TableColumn(schema);
                colvarInsertTime.ColumnName = "InsertTime";
                colvarInsertTime.DataType = DbType.DateTime;
                colvarInsertTime.MaxLength = 0;
                colvarInsertTime.AutoIncrement = false;
                colvarInsertTime.IsNullable = false;
                colvarInsertTime.IsPrimaryKey = false;
                colvarInsertTime.IsForeignKey = false;
                colvarInsertTime.IsReadOnly = false;

                colvarInsertTime.DefaultSetting = @"(getdate())";
                colvarInsertTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarInsertTime);

                var colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 1024;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                var colvarStudyData = new TableSchema.TableColumn(schema);
                colvarStudyData.ColumnName = "StudyData";
                colvarStudyData.DataType = DbType.AnsiString;
                colvarStudyData.MaxLength = -1;
                colvarStudyData.AutoIncrement = false;
                colvarStudyData.IsNullable = false;
                colvarStudyData.IsPrimaryKey = false;
                colvarStudyData.IsForeignKey = false;
                colvarStudyData.IsReadOnly = false;
                colvarStudyData.DefaultSetting = @"";
                colvarStudyData.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudyData);

                var colvarDetails = new TableSchema.TableColumn(schema);
                colvarDetails.ColumnName = "Details";
                colvarDetails.DataType = DbType.AnsiString;
                colvarDetails.MaxLength = -1;
                colvarDetails.AutoIncrement = false;
                colvarDetails.IsNullable = true;
                colvarDetails.IsPrimaryKey = false;
                colvarDetails.IsForeignKey = false;
                colvarDetails.IsReadOnly = false;
                colvarDetails.DefaultSetting = @"";
                colvarDetails.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDetails);

                var colvarStudyIntegrityReasonEnum = new TableSchema.TableColumn(schema);
                colvarStudyIntegrityReasonEnum.ColumnName = "StudyIntegrityReasonEnum";
                colvarStudyIntegrityReasonEnum.DataType = DbType.Int16;
                colvarStudyIntegrityReasonEnum.MaxLength = 0;
                colvarStudyIntegrityReasonEnum.AutoIncrement = false;
                colvarStudyIntegrityReasonEnum.IsNullable = false;
                colvarStudyIntegrityReasonEnum.IsPrimaryKey = false;
                colvarStudyIntegrityReasonEnum.IsForeignKey = true;
                colvarStudyIntegrityReasonEnum.IsReadOnly = false;
                colvarStudyIntegrityReasonEnum.DefaultSetting = @"";

                colvarStudyIntegrityReasonEnum.ForeignKeyTableName = "StudyIntegrityReasonEnum";
                schema.Columns.Add(colvarStudyIntegrityReasonEnum);

                var colvarGroupID = new TableSchema.TableColumn(schema);
                colvarGroupID.ColumnName = "GroupID";
                colvarGroupID.DataType = DbType.AnsiString;
                colvarGroupID.MaxLength = 64;
                colvarGroupID.AutoIncrement = false;
                colvarGroupID.IsNullable = true;
                colvarGroupID.IsPrimaryKey = false;
                colvarGroupID.IsForeignKey = false;
                colvarGroupID.IsReadOnly = false;
                colvarGroupID.DefaultSetting = @"";
                colvarGroupID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGroupID);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("StudyIntegrityQueue", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("ServerPartitionGUID")]
        [Bindable(true)]
        public Guid ServerPartitionGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerPartitionGUID); }
            set { SetColumnValue(Columns.ServerPartitionGUID, value); }
        }

        [XmlAttribute("StudyStorageGUID")]
        [Bindable(true)]
        public Guid StudyStorageGUID
        {
            get { return GetColumnValue<Guid>(Columns.StudyStorageGUID); }
            set { SetColumnValue(Columns.StudyStorageGUID, value); }
        }

        [XmlAttribute("InsertTime")]
        [Bindable(true)]
        public DateTime InsertTime
        {
            get { return GetColumnValue<DateTime>(Columns.InsertTime); }
            set { SetColumnValue(Columns.InsertTime, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("StudyData")]
        [Bindable(true)]
        public string StudyData
        {
            get { return GetColumnValue<string>(Columns.StudyData); }
            set { SetColumnValue(Columns.StudyData, value); }
        }

        [XmlAttribute("Details")]
        [Bindable(true)]
        public string Details
        {
            get { return GetColumnValue<string>(Columns.Details); }
            set { SetColumnValue(Columns.Details, value); }
        }

        [XmlAttribute("StudyIntegrityReasonEnum")]
        [Bindable(true)]
        public short StudyIntegrityReasonEnum
        {
            get { return GetColumnValue<short>(Columns.StudyIntegrityReasonEnum); }
            set { SetColumnValue(Columns.StudyIntegrityReasonEnum, value); }
        }

        [XmlAttribute("GroupID")]
        [Bindable(true)]
        public string GroupID
        {
            get { return GetColumnValue<string>(Columns.GroupID); }
            set { SetColumnValue(Columns.GroupID, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public StudyIntegrityQueueUidCollection StudyIntegrityQueueUidRecords()
        {
            return
                new StudyIntegrityQueueUidCollection().Where(StudyIntegrityQueueUid.Columns.StudyIntegrityQueueGUID,
                                                             Guid).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a ServerPartition ActiveRecord object related to this StudyIntegrityQueue
        /// 
        /// </summary>
        public ServerPartition ServerPartition
        {
            get { return ServerPartition.FetchByID(ServerPartitionGUID); }
            set { SetColumnValue("ServerPartitionGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a StudyIntegrityReasonEnum ActiveRecord object related to this StudyIntegrityQueue
        /// 
        /// </summary>
        public StudyIntegrityReasonEnum StudyIntegrityReasonEnumRecord
        {
            get { return Models.StudyIntegrityReasonEnum.FetchByID(StudyIntegrityReasonEnum); }
            set { SetColumnValue("StudyIntegrityReasonEnum", value.EnumX); }
        }


        /// <summary>
        /// Returns a StudyStorage ActiveRecord object related to this StudyIntegrityQueue
        /// 
        /// </summary>
        public StudyStorage StudyStorage
        {
            get { return StudyStorage.FetchByID(StudyStorageGUID); }
            set { SetColumnValue("StudyStorageGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varServerPartitionGUID, Guid varStudyStorageGUID,
                                  DateTime varInsertTime, string varDescription, string varStudyData, string varDetails,
                                  short varStudyIntegrityReasonEnum, string varGroupID)
        {
            var item = new StudyIntegrityQueue();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.InsertTime = varInsertTime;

            item.Description = varDescription;

            item.StudyData = varStudyData;

            item.Details = varDetails;

            item.StudyIntegrityReasonEnum = varStudyIntegrityReasonEnum;

            item.GroupID = varGroupID;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varServerPartitionGUID, Guid varStudyStorageGUID,
                                  DateTime varInsertTime, string varDescription, string varStudyData, string varDetails,
                                  short varStudyIntegrityReasonEnum, string varGroupID)
        {
            var item = new StudyIntegrityQueue();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.InsertTime = varInsertTime;

            item.Description = varDescription;

            item.StudyData = varStudyData;

            item.Details = varDetails;

            item.StudyIntegrityReasonEnum = varStudyIntegrityReasonEnum;

            item.GroupID = varGroupID;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ServerPartitionGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn StudyStorageGUIDColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn InsertTimeColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn StudyDataColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn DetailsColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn StudyIntegrityReasonEnumColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn GroupIDColumn
        {
            get { return Schema.Columns[8]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string ServerPartitionGUID = @"ServerPartitionGUID";
            public static string StudyStorageGUID = @"StudyStorageGUID";
            public static string InsertTime = @"InsertTime";
            public static string Description = @"Description";
            public static string StudyData = @"StudyData";
            public static string Details = @"Details";
            public static string StudyIntegrityReasonEnum = @"StudyIntegrityReasonEnum";
            public static string GroupID = @"GroupID";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no ManyToMany tables defined (0)
    }
}