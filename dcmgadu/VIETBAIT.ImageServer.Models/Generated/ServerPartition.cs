using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the ServerPartition class.
    /// </summary>
    [Serializable]
    public class ServerPartitionCollection : ActiveList<ServerPartition, ServerPartitionCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ServerPartitionCollection</returns>
        public ServerPartitionCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                ServerPartition o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the ServerPartition table.
    /// </summary>
    [Serializable]
    public class ServerPartition : ActiveRecord<ServerPartition>, IActiveRecord
    {
        #region .ctors and Default Settings

        public ServerPartition()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public ServerPartition(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public ServerPartition(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public ServerPartition(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("ServerPartition", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarEnabled = new TableSchema.TableColumn(schema);
                colvarEnabled.ColumnName = "Enabled";
                colvarEnabled.DataType = DbType.Boolean;
                colvarEnabled.MaxLength = 0;
                colvarEnabled.AutoIncrement = false;
                colvarEnabled.IsNullable = false;
                colvarEnabled.IsPrimaryKey = false;
                colvarEnabled.IsForeignKey = false;
                colvarEnabled.IsReadOnly = false;
                colvarEnabled.DefaultSetting = @"";
                colvarEnabled.ForeignKeyTableName = "";
                schema.Columns.Add(colvarEnabled);

                var colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 128;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = false;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                var colvarAeTitle = new TableSchema.TableColumn(schema);
                colvarAeTitle.ColumnName = "AeTitle";
                colvarAeTitle.DataType = DbType.AnsiString;
                colvarAeTitle.MaxLength = 16;
                colvarAeTitle.AutoIncrement = false;
                colvarAeTitle.IsNullable = false;
                colvarAeTitle.IsPrimaryKey = false;
                colvarAeTitle.IsForeignKey = false;
                colvarAeTitle.IsReadOnly = false;
                colvarAeTitle.DefaultSetting = @"";
                colvarAeTitle.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAeTitle);

                var colvarPort = new TableSchema.TableColumn(schema);
                colvarPort.ColumnName = "Port";
                colvarPort.DataType = DbType.Int32;
                colvarPort.MaxLength = 0;
                colvarPort.AutoIncrement = false;
                colvarPort.IsNullable = false;
                colvarPort.IsPrimaryKey = false;
                colvarPort.IsForeignKey = false;
                colvarPort.IsReadOnly = false;
                colvarPort.DefaultSetting = @"";
                colvarPort.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPort);

                var colvarPartitionFolder = new TableSchema.TableColumn(schema);
                colvarPartitionFolder.ColumnName = "PartitionFolder";
                colvarPartitionFolder.DataType = DbType.String;
                colvarPartitionFolder.MaxLength = 16;
                colvarPartitionFolder.AutoIncrement = false;
                colvarPartitionFolder.IsNullable = false;
                colvarPartitionFolder.IsPrimaryKey = false;
                colvarPartitionFolder.IsForeignKey = false;
                colvarPartitionFolder.IsReadOnly = false;
                colvarPartitionFolder.DefaultSetting = @"";
                colvarPartitionFolder.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPartitionFolder);

                var colvarAcceptAnyDevice = new TableSchema.TableColumn(schema);
                colvarAcceptAnyDevice.ColumnName = "AcceptAnyDevice";
                colvarAcceptAnyDevice.DataType = DbType.Boolean;
                colvarAcceptAnyDevice.MaxLength = 0;
                colvarAcceptAnyDevice.AutoIncrement = false;
                colvarAcceptAnyDevice.IsNullable = false;
                colvarAcceptAnyDevice.IsPrimaryKey = false;
                colvarAcceptAnyDevice.IsForeignKey = false;
                colvarAcceptAnyDevice.IsReadOnly = false;

                colvarAcceptAnyDevice.DefaultSetting = @"((1))";
                colvarAcceptAnyDevice.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAcceptAnyDevice);

                var colvarAuditDeleteStudy = new TableSchema.TableColumn(schema);
                colvarAuditDeleteStudy.ColumnName = "AuditDeleteStudy";
                colvarAuditDeleteStudy.DataType = DbType.Boolean;
                colvarAuditDeleteStudy.MaxLength = 0;
                colvarAuditDeleteStudy.AutoIncrement = false;
                colvarAuditDeleteStudy.IsNullable = false;
                colvarAuditDeleteStudy.IsPrimaryKey = false;
                colvarAuditDeleteStudy.IsForeignKey = false;
                colvarAuditDeleteStudy.IsReadOnly = false;

                colvarAuditDeleteStudy.DefaultSetting = @"((0))";
                colvarAuditDeleteStudy.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAuditDeleteStudy);

                var colvarAutoInsertDevice = new TableSchema.TableColumn(schema);
                colvarAutoInsertDevice.ColumnName = "AutoInsertDevice";
                colvarAutoInsertDevice.DataType = DbType.Boolean;
                colvarAutoInsertDevice.MaxLength = 0;
                colvarAutoInsertDevice.AutoIncrement = false;
                colvarAutoInsertDevice.IsNullable = false;
                colvarAutoInsertDevice.IsPrimaryKey = false;
                colvarAutoInsertDevice.IsForeignKey = false;
                colvarAutoInsertDevice.IsReadOnly = false;

                colvarAutoInsertDevice.DefaultSetting = @"((1))";
                colvarAutoInsertDevice.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAutoInsertDevice);

                var colvarDefaultRemotePort = new TableSchema.TableColumn(schema);
                colvarDefaultRemotePort.ColumnName = "DefaultRemotePort";
                colvarDefaultRemotePort.DataType = DbType.Int32;
                colvarDefaultRemotePort.MaxLength = 0;
                colvarDefaultRemotePort.AutoIncrement = false;
                colvarDefaultRemotePort.IsNullable = false;
                colvarDefaultRemotePort.IsPrimaryKey = false;
                colvarDefaultRemotePort.IsForeignKey = false;
                colvarDefaultRemotePort.IsReadOnly = false;

                colvarDefaultRemotePort.DefaultSetting = @"((104))";
                colvarDefaultRemotePort.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDefaultRemotePort);

                var colvarStudyCount = new TableSchema.TableColumn(schema);
                colvarStudyCount.ColumnName = "StudyCount";
                colvarStudyCount.DataType = DbType.Int32;
                colvarStudyCount.MaxLength = 0;
                colvarStudyCount.AutoIncrement = false;
                colvarStudyCount.IsNullable = false;
                colvarStudyCount.IsPrimaryKey = false;
                colvarStudyCount.IsForeignKey = false;
                colvarStudyCount.IsReadOnly = false;

                colvarStudyCount.DefaultSetting = @"((0))";
                colvarStudyCount.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStudyCount);

                var colvarDuplicateSopPolicyEnum = new TableSchema.TableColumn(schema);
                colvarDuplicateSopPolicyEnum.ColumnName = "DuplicateSopPolicyEnum";
                colvarDuplicateSopPolicyEnum.DataType = DbType.Int16;
                colvarDuplicateSopPolicyEnum.MaxLength = 0;
                colvarDuplicateSopPolicyEnum.AutoIncrement = false;
                colvarDuplicateSopPolicyEnum.IsNullable = false;
                colvarDuplicateSopPolicyEnum.IsPrimaryKey = false;
                colvarDuplicateSopPolicyEnum.IsForeignKey = true;
                colvarDuplicateSopPolicyEnum.IsReadOnly = false;
                colvarDuplicateSopPolicyEnum.DefaultSetting = @"";

                colvarDuplicateSopPolicyEnum.ForeignKeyTableName = "DuplicateSopPolicyEnum";
                schema.Columns.Add(colvarDuplicateSopPolicyEnum);

                var colvarMatchAccessionNumber = new TableSchema.TableColumn(schema);
                colvarMatchAccessionNumber.ColumnName = "MatchAccessionNumber";
                colvarMatchAccessionNumber.DataType = DbType.Boolean;
                colvarMatchAccessionNumber.MaxLength = 0;
                colvarMatchAccessionNumber.AutoIncrement = false;
                colvarMatchAccessionNumber.IsNullable = false;
                colvarMatchAccessionNumber.IsPrimaryKey = false;
                colvarMatchAccessionNumber.IsForeignKey = false;
                colvarMatchAccessionNumber.IsReadOnly = false;

                colvarMatchAccessionNumber.DefaultSetting = @"((1))";
                colvarMatchAccessionNumber.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMatchAccessionNumber);

                var colvarMatchIssuerOfPatientId = new TableSchema.TableColumn(schema);
                colvarMatchIssuerOfPatientId.ColumnName = "MatchIssuerOfPatientId";
                colvarMatchIssuerOfPatientId.DataType = DbType.Boolean;
                colvarMatchIssuerOfPatientId.MaxLength = 0;
                colvarMatchIssuerOfPatientId.AutoIncrement = false;
                colvarMatchIssuerOfPatientId.IsNullable = false;
                colvarMatchIssuerOfPatientId.IsPrimaryKey = false;
                colvarMatchIssuerOfPatientId.IsForeignKey = false;
                colvarMatchIssuerOfPatientId.IsReadOnly = false;

                colvarMatchIssuerOfPatientId.DefaultSetting = @"((1))";
                colvarMatchIssuerOfPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMatchIssuerOfPatientId);

                var colvarMatchPatientId = new TableSchema.TableColumn(schema);
                colvarMatchPatientId.ColumnName = "MatchPatientId";
                colvarMatchPatientId.DataType = DbType.Boolean;
                colvarMatchPatientId.MaxLength = 0;
                colvarMatchPatientId.AutoIncrement = false;
                colvarMatchPatientId.IsNullable = false;
                colvarMatchPatientId.IsPrimaryKey = false;
                colvarMatchPatientId.IsForeignKey = false;
                colvarMatchPatientId.IsReadOnly = false;

                colvarMatchPatientId.DefaultSetting = @"((1))";
                colvarMatchPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMatchPatientId);

                var colvarMatchPatientsBirthDate = new TableSchema.TableColumn(schema);
                colvarMatchPatientsBirthDate.ColumnName = "MatchPatientsBirthDate";
                colvarMatchPatientsBirthDate.DataType = DbType.Boolean;
                colvarMatchPatientsBirthDate.MaxLength = 0;
                colvarMatchPatientsBirthDate.AutoIncrement = false;
                colvarMatchPatientsBirthDate.IsNullable = false;
                colvarMatchPatientsBirthDate.IsPrimaryKey = false;
                colvarMatchPatientsBirthDate.IsForeignKey = false;
                colvarMatchPatientsBirthDate.IsReadOnly = false;

                colvarMatchPatientsBirthDate.DefaultSetting = @"((1))";
                colvarMatchPatientsBirthDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMatchPatientsBirthDate);

                var colvarMatchPatientsName = new TableSchema.TableColumn(schema);
                colvarMatchPatientsName.ColumnName = "MatchPatientsName";
                colvarMatchPatientsName.DataType = DbType.Boolean;
                colvarMatchPatientsName.MaxLength = 0;
                colvarMatchPatientsName.AutoIncrement = false;
                colvarMatchPatientsName.IsNullable = false;
                colvarMatchPatientsName.IsPrimaryKey = false;
                colvarMatchPatientsName.IsForeignKey = false;
                colvarMatchPatientsName.IsReadOnly = false;

                colvarMatchPatientsName.DefaultSetting = @"((1))";
                colvarMatchPatientsName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMatchPatientsName);

                var colvarMatchPatientsSex = new TableSchema.TableColumn(schema);
                colvarMatchPatientsSex.ColumnName = "MatchPatientsSex";
                colvarMatchPatientsSex.DataType = DbType.Boolean;
                colvarMatchPatientsSex.MaxLength = 0;
                colvarMatchPatientsSex.AutoIncrement = false;
                colvarMatchPatientsSex.IsNullable = false;
                colvarMatchPatientsSex.IsPrimaryKey = false;
                colvarMatchPatientsSex.IsForeignKey = false;
                colvarMatchPatientsSex.IsReadOnly = false;

                colvarMatchPatientsSex.DefaultSetting = @"((1))";
                colvarMatchPatientsSex.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMatchPatientsSex);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("ServerPartition", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("Enabled")]
        [Bindable(true)]
        public bool Enabled
        {
            get { return GetColumnValue<bool>(Columns.Enabled); }
            set { SetColumnValue(Columns.Enabled, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("AeTitle")]
        [Bindable(true)]
        public string AeTitle
        {
            get { return GetColumnValue<string>(Columns.AeTitle); }
            set { SetColumnValue(Columns.AeTitle, value); }
        }

        [XmlAttribute("Port")]
        [Bindable(true)]
        public int Port
        {
            get { return GetColumnValue<int>(Columns.Port); }
            set { SetColumnValue(Columns.Port, value); }
        }

        [XmlAttribute("PartitionFolder")]
        [Bindable(true)]
        public string PartitionFolder
        {
            get { return GetColumnValue<string>(Columns.PartitionFolder); }
            set { SetColumnValue(Columns.PartitionFolder, value); }
        }

        [XmlAttribute("AcceptAnyDevice")]
        [Bindable(true)]
        public bool AcceptAnyDevice
        {
            get { return GetColumnValue<bool>(Columns.AcceptAnyDevice); }
            set { SetColumnValue(Columns.AcceptAnyDevice, value); }
        }

        [XmlAttribute("AuditDeleteStudy")]
        [Bindable(true)]
        public bool AuditDeleteStudy
        {
            get { return GetColumnValue<bool>(Columns.AuditDeleteStudy); }
            set { SetColumnValue(Columns.AuditDeleteStudy, value); }
        }

        [XmlAttribute("AutoInsertDevice")]
        [Bindable(true)]
        public bool AutoInsertDevice
        {
            get { return GetColumnValue<bool>(Columns.AutoInsertDevice); }
            set { SetColumnValue(Columns.AutoInsertDevice, value); }
        }

        [XmlAttribute("DefaultRemotePort")]
        [Bindable(true)]
        public int DefaultRemotePort
        {
            get { return GetColumnValue<int>(Columns.DefaultRemotePort); }
            set { SetColumnValue(Columns.DefaultRemotePort, value); }
        }

        [XmlAttribute("StudyCount")]
        [Bindable(true)]
        public int StudyCount
        {
            get { return GetColumnValue<int>(Columns.StudyCount); }
            set { SetColumnValue(Columns.StudyCount, value); }
        }

        [XmlAttribute("DuplicateSopPolicyEnum")]
        [Bindable(true)]
        public short DuplicateSopPolicyEnum
        {
            get { return GetColumnValue<short>(Columns.DuplicateSopPolicyEnum); }
            set { SetColumnValue(Columns.DuplicateSopPolicyEnum, value); }
        }

        [XmlAttribute("MatchAccessionNumber")]
        [Bindable(true)]
        public bool MatchAccessionNumber
        {
            get { return GetColumnValue<bool>(Columns.MatchAccessionNumber); }
            set { SetColumnValue(Columns.MatchAccessionNumber, value); }
        }

        [XmlAttribute("MatchIssuerOfPatientId")]
        [Bindable(true)]
        public bool MatchIssuerOfPatientId
        {
            get { return GetColumnValue<bool>(Columns.MatchIssuerOfPatientId); }
            set { SetColumnValue(Columns.MatchIssuerOfPatientId, value); }
        }

        [XmlAttribute("MatchPatientId")]
        [Bindable(true)]
        public bool MatchPatientId
        {
            get { return GetColumnValue<bool>(Columns.MatchPatientId); }
            set { SetColumnValue(Columns.MatchPatientId, value); }
        }

        [XmlAttribute("MatchPatientsBirthDate")]
        [Bindable(true)]
        public bool MatchPatientsBirthDate
        {
            get { return GetColumnValue<bool>(Columns.MatchPatientsBirthDate); }
            set { SetColumnValue(Columns.MatchPatientsBirthDate, value); }
        }

        [XmlAttribute("MatchPatientsName")]
        [Bindable(true)]
        public bool MatchPatientsName
        {
            get { return GetColumnValue<bool>(Columns.MatchPatientsName); }
            set { SetColumnValue(Columns.MatchPatientsName, value); }
        }

        [XmlAttribute("MatchPatientsSex")]
        [Bindable(true)]
        public bool MatchPatientsSex
        {
            get { return GetColumnValue<bool>(Columns.MatchPatientsSex); }
            set { SetColumnValue(Columns.MatchPatientsSex, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public DeviceCollection DeviceRecords()
        {
            return new DeviceCollection().Where(Device.Columns.ServerPartitionGUID, Guid).Load();
        }

        public PartitionArchiveCollection PartitionArchiveRecords()
        {
            return new PartitionArchiveCollection().Where(PartitionArchive.Columns.ServerPartitionGUID, Guid).Load();
        }

        public PartitionSopClassCollection PartitionSopClassRecords()
        {
            return new PartitionSopClassCollection().Where(PartitionSopClass.Columns.ServerPartitionGUID, Guid).Load();
        }

        public PartitionTransferSyntaxCollection PartitionTransferSyntaxRecords()
        {
            return
                new PartitionTransferSyntaxCollection().Where(PartitionTransferSyntax.Columns.ServerPartitionGUID, Guid)
                    .Load();
        }

        public PatientCollection PatientRecords()
        {
            return new PatientCollection().Where(Patient.Columns.ServerPartitionGUID, Guid).Load();
        }

        public SeriesCollection SeriesRecords()
        {
            return new SeriesCollection().Where(Series.Columns.ServerPartitionGUID, Guid).Load();
        }

        public ServerRuleCollection ServerRuleRecords()
        {
            return new ServerRuleCollection().Where(ServerRule.Columns.ServerPartitionGUID, Guid).Load();
        }

        public StudyCollection StudyRecords()
        {
            return new StudyCollection().Where(Study.Columns.ServerPartitionGUID, Guid).Load();
        }

        public StudyIntegrityQueueCollection StudyIntegrityQueueRecords()
        {
            return
                new StudyIntegrityQueueCollection().Where(StudyIntegrityQueue.Columns.ServerPartitionGUID, Guid).Load();
        }

        public StudyStorageCollection StudyStorageRecords()
        {
            return new StudyStorageCollection().Where(StudyStorage.Columns.ServerPartitionGUID, Guid).Load();
        }

        public WorkQueueCollection WorkQueueRecords()
        {
            return new WorkQueueCollection().Where(WorkQueue.Columns.ServerPartitionGUID, Guid).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a DuplicateSopPolicyEnum ActiveRecord object related to this ServerPartition
        /// 
        /// </summary>
        public DuplicateSopPolicyEnum DuplicateSopPolicyEnumRecord
        {
            get { return Models.DuplicateSopPolicyEnum.FetchByID(DuplicateSopPolicyEnum); }
            set { SetColumnValue("DuplicateSopPolicyEnum", value.EnumX); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, bool varEnabled, string varDescription, string varAeTitle, int varPort,
                                  string varPartitionFolder, bool varAcceptAnyDevice, bool varAuditDeleteStudy,
                                  bool varAutoInsertDevice, int varDefaultRemotePort, int varStudyCount,
                                  short varDuplicateSopPolicyEnum, bool varMatchAccessionNumber,
                                  bool varMatchIssuerOfPatientId, bool varMatchPatientId, bool varMatchPatientsBirthDate,
                                  bool varMatchPatientsName, bool varMatchPatientsSex)
        {
            var item = new ServerPartition();

            item.Guid = varGuid;

            item.Enabled = varEnabled;

            item.Description = varDescription;

            item.AeTitle = varAeTitle;

            item.Port = varPort;

            item.PartitionFolder = varPartitionFolder;

            item.AcceptAnyDevice = varAcceptAnyDevice;

            item.AuditDeleteStudy = varAuditDeleteStudy;

            item.AutoInsertDevice = varAutoInsertDevice;

            item.DefaultRemotePort = varDefaultRemotePort;

            item.StudyCount = varStudyCount;

            item.DuplicateSopPolicyEnum = varDuplicateSopPolicyEnum;

            item.MatchAccessionNumber = varMatchAccessionNumber;

            item.MatchIssuerOfPatientId = varMatchIssuerOfPatientId;

            item.MatchPatientId = varMatchPatientId;

            item.MatchPatientsBirthDate = varMatchPatientsBirthDate;

            item.MatchPatientsName = varMatchPatientsName;

            item.MatchPatientsSex = varMatchPatientsSex;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, bool varEnabled, string varDescription, string varAeTitle, int varPort,
                                  string varPartitionFolder, bool varAcceptAnyDevice, bool varAuditDeleteStudy,
                                  bool varAutoInsertDevice, int varDefaultRemotePort, int varStudyCount,
                                  short varDuplicateSopPolicyEnum, bool varMatchAccessionNumber,
                                  bool varMatchIssuerOfPatientId, bool varMatchPatientId, bool varMatchPatientsBirthDate,
                                  bool varMatchPatientsName, bool varMatchPatientsSex)
        {
            var item = new ServerPartition();

            item.Guid = varGuid;

            item.Enabled = varEnabled;

            item.Description = varDescription;

            item.AeTitle = varAeTitle;

            item.Port = varPort;

            item.PartitionFolder = varPartitionFolder;

            item.AcceptAnyDevice = varAcceptAnyDevice;

            item.AuditDeleteStudy = varAuditDeleteStudy;

            item.AutoInsertDevice = varAutoInsertDevice;

            item.DefaultRemotePort = varDefaultRemotePort;

            item.StudyCount = varStudyCount;

            item.DuplicateSopPolicyEnum = varDuplicateSopPolicyEnum;

            item.MatchAccessionNumber = varMatchAccessionNumber;

            item.MatchIssuerOfPatientId = varMatchIssuerOfPatientId;

            item.MatchPatientId = varMatchPatientId;

            item.MatchPatientsBirthDate = varMatchPatientsBirthDate;

            item.MatchPatientsName = varMatchPatientsName;

            item.MatchPatientsSex = varMatchPatientsSex;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn EnabledColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn AeTitleColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn PortColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn PartitionFolderColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn AcceptAnyDeviceColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn AuditDeleteStudyColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn AutoInsertDeviceColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn DefaultRemotePortColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn StudyCountColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn DuplicateSopPolicyEnumColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn MatchAccessionNumberColumn
        {
            get { return Schema.Columns[12]; }
        }


        public static TableSchema.TableColumn MatchIssuerOfPatientIdColumn
        {
            get { return Schema.Columns[13]; }
        }


        public static TableSchema.TableColumn MatchPatientIdColumn
        {
            get { return Schema.Columns[14]; }
        }


        public static TableSchema.TableColumn MatchPatientsBirthDateColumn
        {
            get { return Schema.Columns[15]; }
        }


        public static TableSchema.TableColumn MatchPatientsNameColumn
        {
            get { return Schema.Columns[16]; }
        }


        public static TableSchema.TableColumn MatchPatientsSexColumn
        {
            get { return Schema.Columns[17]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string Enabled = @"Enabled";
            public static string Description = @"Description";
            public static string AeTitle = @"AeTitle";
            public static string Port = @"Port";
            public static string PartitionFolder = @"PartitionFolder";
            public static string AcceptAnyDevice = @"AcceptAnyDevice";
            public static string AuditDeleteStudy = @"AuditDeleteStudy";
            public static string AutoInsertDevice = @"AutoInsertDevice";
            public static string DefaultRemotePort = @"DefaultRemotePort";
            public static string StudyCount = @"StudyCount";
            public static string DuplicateSopPolicyEnum = @"DuplicateSopPolicyEnum";
            public static string MatchAccessionNumber = @"MatchAccessionNumber";
            public static string MatchIssuerOfPatientId = @"MatchIssuerOfPatientId";
            public static string MatchPatientId = @"MatchPatientId";
            public static string MatchPatientsBirthDate = @"MatchPatientsBirthDate";
            public static string MatchPatientsName = @"MatchPatientsName";
            public static string MatchPatientsSex = @"MatchPatientsSex";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no ManyToMany tables defined (0)
    }
}