using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the WorkQueueUid class.
    /// </summary>
    [Serializable]
    public class WorkQueueUidCollection : ActiveList<WorkQueueUid, WorkQueueUidCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>WorkQueueUidCollection</returns>
        public WorkQueueUidCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                WorkQueueUid o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the WorkQueueUid table.
    /// </summary>
    [Serializable]
    public class WorkQueueUid : ActiveRecord<WorkQueueUid>, IActiveRecord
    {
        #region .ctors and Default Settings

        public WorkQueueUid()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public WorkQueueUid(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public WorkQueueUid(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public WorkQueueUid(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("WorkQueueUid", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarWorkQueueGUID = new TableSchema.TableColumn(schema);
                colvarWorkQueueGUID.ColumnName = "WorkQueueGUID";
                colvarWorkQueueGUID.DataType = DbType.Guid;
                colvarWorkQueueGUID.MaxLength = 0;
                colvarWorkQueueGUID.AutoIncrement = false;
                colvarWorkQueueGUID.IsNullable = false;
                colvarWorkQueueGUID.IsPrimaryKey = false;
                colvarWorkQueueGUID.IsForeignKey = true;
                colvarWorkQueueGUID.IsReadOnly = false;
                colvarWorkQueueGUID.DefaultSetting = @"";

                colvarWorkQueueGUID.ForeignKeyTableName = "WorkQueue";
                schema.Columns.Add(colvarWorkQueueGUID);

                var colvarSeriesInstanceUid = new TableSchema.TableColumn(schema);
                colvarSeriesInstanceUid.ColumnName = "SeriesInstanceUid";
                colvarSeriesInstanceUid.DataType = DbType.AnsiString;
                colvarSeriesInstanceUid.MaxLength = 64;
                colvarSeriesInstanceUid.AutoIncrement = false;
                colvarSeriesInstanceUid.IsNullable = true;
                colvarSeriesInstanceUid.IsPrimaryKey = false;
                colvarSeriesInstanceUid.IsForeignKey = false;
                colvarSeriesInstanceUid.IsReadOnly = false;
                colvarSeriesInstanceUid.DefaultSetting = @"";
                colvarSeriesInstanceUid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSeriesInstanceUid);

                var colvarSopInstanceUid = new TableSchema.TableColumn(schema);
                colvarSopInstanceUid.ColumnName = "SopInstanceUid";
                colvarSopInstanceUid.DataType = DbType.AnsiString;
                colvarSopInstanceUid.MaxLength = 64;
                colvarSopInstanceUid.AutoIncrement = false;
                colvarSopInstanceUid.IsNullable = true;
                colvarSopInstanceUid.IsPrimaryKey = false;
                colvarSopInstanceUid.IsForeignKey = false;
                colvarSopInstanceUid.IsReadOnly = false;
                colvarSopInstanceUid.DefaultSetting = @"";
                colvarSopInstanceUid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSopInstanceUid);

                var colvarFailed = new TableSchema.TableColumn(schema);
                colvarFailed.ColumnName = "Failed";
                colvarFailed.DataType = DbType.Boolean;
                colvarFailed.MaxLength = 0;
                colvarFailed.AutoIncrement = false;
                colvarFailed.IsNullable = false;
                colvarFailed.IsPrimaryKey = false;
                colvarFailed.IsForeignKey = false;
                colvarFailed.IsReadOnly = false;

                colvarFailed.DefaultSetting = @"((0))";
                colvarFailed.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFailed);

                var colvarDuplicate = new TableSchema.TableColumn(schema);
                colvarDuplicate.ColumnName = "Duplicate";
                colvarDuplicate.DataType = DbType.Boolean;
                colvarDuplicate.MaxLength = 0;
                colvarDuplicate.AutoIncrement = false;
                colvarDuplicate.IsNullable = false;
                colvarDuplicate.IsPrimaryKey = false;
                colvarDuplicate.IsForeignKey = false;
                colvarDuplicate.IsReadOnly = false;

                colvarDuplicate.DefaultSetting = @"((0))";
                colvarDuplicate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDuplicate);

                var colvarExtension = new TableSchema.TableColumn(schema);
                colvarExtension.ColumnName = "Extension";
                colvarExtension.DataType = DbType.AnsiString;
                colvarExtension.MaxLength = 10;
                colvarExtension.AutoIncrement = false;
                colvarExtension.IsNullable = true;
                colvarExtension.IsPrimaryKey = false;
                colvarExtension.IsForeignKey = false;
                colvarExtension.IsReadOnly = false;
                colvarExtension.DefaultSetting = @"";
                colvarExtension.ForeignKeyTableName = "";
                schema.Columns.Add(colvarExtension);

                var colvarFailureCount = new TableSchema.TableColumn(schema);
                colvarFailureCount.ColumnName = "FailureCount";
                colvarFailureCount.DataType = DbType.Int16;
                colvarFailureCount.MaxLength = 0;
                colvarFailureCount.AutoIncrement = false;
                colvarFailureCount.IsNullable = false;
                colvarFailureCount.IsPrimaryKey = false;
                colvarFailureCount.IsForeignKey = false;
                colvarFailureCount.IsReadOnly = false;

                colvarFailureCount.DefaultSetting = @"((0))";
                colvarFailureCount.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFailureCount);

                var colvarGroupID = new TableSchema.TableColumn(schema);
                colvarGroupID.ColumnName = "GroupID";
                colvarGroupID.DataType = DbType.AnsiString;
                colvarGroupID.MaxLength = 64;
                colvarGroupID.AutoIncrement = false;
                colvarGroupID.IsNullable = true;
                colvarGroupID.IsPrimaryKey = false;
                colvarGroupID.IsForeignKey = false;
                colvarGroupID.IsReadOnly = false;
                colvarGroupID.DefaultSetting = @"";
                colvarGroupID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGroupID);

                var colvarRelativePath = new TableSchema.TableColumn(schema);
                colvarRelativePath.ColumnName = "RelativePath";
                colvarRelativePath.DataType = DbType.AnsiString;
                colvarRelativePath.MaxLength = 256;
                colvarRelativePath.AutoIncrement = false;
                colvarRelativePath.IsNullable = true;
                colvarRelativePath.IsPrimaryKey = false;
                colvarRelativePath.IsForeignKey = false;
                colvarRelativePath.IsReadOnly = false;
                colvarRelativePath.DefaultSetting = @"";
                colvarRelativePath.ForeignKeyTableName = "";
                schema.Columns.Add(colvarRelativePath);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("WorkQueueUid", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("WorkQueueGUID")]
        [Bindable(true)]
        public Guid WorkQueueGUID
        {
            get { return GetColumnValue<Guid>(Columns.WorkQueueGUID); }
            set { SetColumnValue(Columns.WorkQueueGUID, value); }
        }

        [XmlAttribute("SeriesInstanceUid")]
        [Bindable(true)]
        public string SeriesInstanceUid
        {
            get { return GetColumnValue<string>(Columns.SeriesInstanceUid); }
            set { SetColumnValue(Columns.SeriesInstanceUid, value); }
        }

        [XmlAttribute("SopInstanceUid")]
        [Bindable(true)]
        public string SopInstanceUid
        {
            get { return GetColumnValue<string>(Columns.SopInstanceUid); }
            set { SetColumnValue(Columns.SopInstanceUid, value); }
        }

        [XmlAttribute("Failed")]
        [Bindable(true)]
        public bool Failed
        {
            get { return GetColumnValue<bool>(Columns.Failed); }
            set { SetColumnValue(Columns.Failed, value); }
        }

        [XmlAttribute("Duplicate")]
        [Bindable(true)]
        public bool Duplicate
        {
            get { return GetColumnValue<bool>(Columns.Duplicate); }
            set { SetColumnValue(Columns.Duplicate, value); }
        }

        [XmlAttribute("Extension")]
        [Bindable(true)]
        public string Extension
        {
            get { return GetColumnValue<string>(Columns.Extension); }
            set { SetColumnValue(Columns.Extension, value); }
        }

        [XmlAttribute("FailureCount")]
        [Bindable(true)]
        public short FailureCount
        {
            get { return GetColumnValue<short>(Columns.FailureCount); }
            set { SetColumnValue(Columns.FailureCount, value); }
        }

        [XmlAttribute("GroupID")]
        [Bindable(true)]
        public string GroupID
        {
            get { return GetColumnValue<string>(Columns.GroupID); }
            set { SetColumnValue(Columns.GroupID, value); }
        }

        [XmlAttribute("RelativePath")]
        [Bindable(true)]
        public string RelativePath
        {
            get { return GetColumnValue<string>(Columns.RelativePath); }
            set { SetColumnValue(Columns.RelativePath, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a WorkQueue ActiveRecord object related to this WorkQueueUid
        /// 
        /// </summary>
        public WorkQueue WorkQueue
        {
            get { return WorkQueue.FetchByID(WorkQueueGUID); }
            set { SetColumnValue("WorkQueueGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varWorkQueueGUID, string varSeriesInstanceUid,
                                  string varSopInstanceUid, bool varFailed, bool varDuplicate, string varExtension,
                                  short varFailureCount, string varGroupID, string varRelativePath)
        {
            var item = new WorkQueueUid();

            item.Guid = varGuid;

            item.WorkQueueGUID = varWorkQueueGUID;

            item.SeriesInstanceUid = varSeriesInstanceUid;

            item.SopInstanceUid = varSopInstanceUid;

            item.Failed = varFailed;

            item.Duplicate = varDuplicate;

            item.Extension = varExtension;

            item.FailureCount = varFailureCount;

            item.GroupID = varGroupID;

            item.RelativePath = varRelativePath;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varWorkQueueGUID, string varSeriesInstanceUid,
                                  string varSopInstanceUid, bool varFailed, bool varDuplicate, string varExtension,
                                  short varFailureCount, string varGroupID, string varRelativePath)
        {
            var item = new WorkQueueUid();

            item.Guid = varGuid;

            item.WorkQueueGUID = varWorkQueueGUID;

            item.SeriesInstanceUid = varSeriesInstanceUid;

            item.SopInstanceUid = varSopInstanceUid;

            item.Failed = varFailed;

            item.Duplicate = varDuplicate;

            item.Extension = varExtension;

            item.FailureCount = varFailureCount;

            item.GroupID = varGroupID;

            item.RelativePath = varRelativePath;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn WorkQueueGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn SeriesInstanceUidColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn SopInstanceUidColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn FailedColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn DuplicateColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn ExtensionColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn FailureCountColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn GroupIDColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn RelativePathColumn
        {
            get { return Schema.Columns[9]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string WorkQueueGUID = @"WorkQueueGUID";
            public static string SeriesInstanceUid = @"SeriesInstanceUid";
            public static string SopInstanceUid = @"SopInstanceUid";
            public static string Failed = @"Failed";
            public static string Duplicate = @"Duplicate";
            public static string Extension = @"Extension";
            public static string FailureCount = @"FailureCount";
            public static string GroupID = @"GroupID";
            public static string RelativePath = @"RelativePath";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}