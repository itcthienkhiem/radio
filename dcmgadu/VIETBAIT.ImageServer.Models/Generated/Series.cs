using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the Series class.
    /// </summary>
    [Serializable]
    public class SeriesCollection : ActiveList<Series, SeriesCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SeriesCollection</returns>
        public SeriesCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                Series o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the Series table.
    /// </summary>
    [Serializable]
    public class Series : ActiveRecord<Series>, IActiveRecord
    {
        #region .ctors and Default Settings

        public Series()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public Series(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Series(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Series(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("Series", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarServerPartitionGUID = new TableSchema.TableColumn(schema);
                colvarServerPartitionGUID.ColumnName = "ServerPartitionGUID";
                colvarServerPartitionGUID.DataType = DbType.Guid;
                colvarServerPartitionGUID.MaxLength = 0;
                colvarServerPartitionGUID.AutoIncrement = false;
                colvarServerPartitionGUID.IsNullable = false;
                colvarServerPartitionGUID.IsPrimaryKey = false;
                colvarServerPartitionGUID.IsForeignKey = true;
                colvarServerPartitionGUID.IsReadOnly = false;
                colvarServerPartitionGUID.DefaultSetting = @"";

                colvarServerPartitionGUID.ForeignKeyTableName = "ServerPartition";
                schema.Columns.Add(colvarServerPartitionGUID);

                var colvarStudyGUID = new TableSchema.TableColumn(schema);
                colvarStudyGUID.ColumnName = "StudyGUID";
                colvarStudyGUID.DataType = DbType.Guid;
                colvarStudyGUID.MaxLength = 0;
                colvarStudyGUID.AutoIncrement = false;
                colvarStudyGUID.IsNullable = false;
                colvarStudyGUID.IsPrimaryKey = false;
                colvarStudyGUID.IsForeignKey = true;
                colvarStudyGUID.IsReadOnly = false;
                colvarStudyGUID.DefaultSetting = @"";

                colvarStudyGUID.ForeignKeyTableName = "Study";
                schema.Columns.Add(colvarStudyGUID);

                var colvarSeriesInstanceUid = new TableSchema.TableColumn(schema);
                colvarSeriesInstanceUid.ColumnName = "SeriesInstanceUid";
                colvarSeriesInstanceUid.DataType = DbType.AnsiString;
                colvarSeriesInstanceUid.MaxLength = 64;
                colvarSeriesInstanceUid.AutoIncrement = false;
                colvarSeriesInstanceUid.IsNullable = false;
                colvarSeriesInstanceUid.IsPrimaryKey = false;
                colvarSeriesInstanceUid.IsForeignKey = false;
                colvarSeriesInstanceUid.IsReadOnly = false;
                colvarSeriesInstanceUid.DefaultSetting = @"";
                colvarSeriesInstanceUid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSeriesInstanceUid);

                var colvarModality = new TableSchema.TableColumn(schema);
                colvarModality.ColumnName = "Modality";
                colvarModality.DataType = DbType.AnsiString;
                colvarModality.MaxLength = 16;
                colvarModality.AutoIncrement = false;
                colvarModality.IsNullable = false;
                colvarModality.IsPrimaryKey = false;
                colvarModality.IsForeignKey = false;
                colvarModality.IsReadOnly = false;
                colvarModality.DefaultSetting = @"";
                colvarModality.ForeignKeyTableName = "";
                schema.Columns.Add(colvarModality);

                var colvarSeriesNumber = new TableSchema.TableColumn(schema);
                colvarSeriesNumber.ColumnName = "SeriesNumber";
                colvarSeriesNumber.DataType = DbType.AnsiString;
                colvarSeriesNumber.MaxLength = 12;
                colvarSeriesNumber.AutoIncrement = false;
                colvarSeriesNumber.IsNullable = true;
                colvarSeriesNumber.IsPrimaryKey = false;
                colvarSeriesNumber.IsForeignKey = false;
                colvarSeriesNumber.IsReadOnly = false;
                colvarSeriesNumber.DefaultSetting = @"";
                colvarSeriesNumber.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSeriesNumber);

                var colvarSeriesDescription = new TableSchema.TableColumn(schema);
                colvarSeriesDescription.ColumnName = "SeriesDescription";
                colvarSeriesDescription.DataType = DbType.String;
                colvarSeriesDescription.MaxLength = 64;
                colvarSeriesDescription.AutoIncrement = false;
                colvarSeriesDescription.IsNullable = true;
                colvarSeriesDescription.IsPrimaryKey = false;
                colvarSeriesDescription.IsForeignKey = false;
                colvarSeriesDescription.IsReadOnly = false;
                colvarSeriesDescription.DefaultSetting = @"";
                colvarSeriesDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSeriesDescription);

                var colvarNumberOfSeriesRelatedInstances = new TableSchema.TableColumn(schema);
                colvarNumberOfSeriesRelatedInstances.ColumnName = "NumberOfSeriesRelatedInstances";
                colvarNumberOfSeriesRelatedInstances.DataType = DbType.Int32;
                colvarNumberOfSeriesRelatedInstances.MaxLength = 0;
                colvarNumberOfSeriesRelatedInstances.AutoIncrement = false;
                colvarNumberOfSeriesRelatedInstances.IsNullable = false;
                colvarNumberOfSeriesRelatedInstances.IsPrimaryKey = false;
                colvarNumberOfSeriesRelatedInstances.IsForeignKey = false;
                colvarNumberOfSeriesRelatedInstances.IsReadOnly = false;
                colvarNumberOfSeriesRelatedInstances.DefaultSetting = @"";
                colvarNumberOfSeriesRelatedInstances.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNumberOfSeriesRelatedInstances);

                var colvarPerformedProcedureStepStartDate = new TableSchema.TableColumn(schema);
                colvarPerformedProcedureStepStartDate.ColumnName = "PerformedProcedureStepStartDate";
                colvarPerformedProcedureStepStartDate.DataType = DbType.AnsiString;
                colvarPerformedProcedureStepStartDate.MaxLength = 8;
                colvarPerformedProcedureStepStartDate.AutoIncrement = false;
                colvarPerformedProcedureStepStartDate.IsNullable = true;
                colvarPerformedProcedureStepStartDate.IsPrimaryKey = false;
                colvarPerformedProcedureStepStartDate.IsForeignKey = false;
                colvarPerformedProcedureStepStartDate.IsReadOnly = false;
                colvarPerformedProcedureStepStartDate.DefaultSetting = @"";
                colvarPerformedProcedureStepStartDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPerformedProcedureStepStartDate);

                var colvarPerformedProcedureStepStartTime = new TableSchema.TableColumn(schema);
                colvarPerformedProcedureStepStartTime.ColumnName = "PerformedProcedureStepStartTime";
                colvarPerformedProcedureStepStartTime.DataType = DbType.AnsiString;
                colvarPerformedProcedureStepStartTime.MaxLength = 16;
                colvarPerformedProcedureStepStartTime.AutoIncrement = false;
                colvarPerformedProcedureStepStartTime.IsNullable = true;
                colvarPerformedProcedureStepStartTime.IsPrimaryKey = false;
                colvarPerformedProcedureStepStartTime.IsForeignKey = false;
                colvarPerformedProcedureStepStartTime.IsReadOnly = false;
                colvarPerformedProcedureStepStartTime.DefaultSetting = @"";
                colvarPerformedProcedureStepStartTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPerformedProcedureStepStartTime);

                var colvarSourceApplicationEntityTitle = new TableSchema.TableColumn(schema);
                colvarSourceApplicationEntityTitle.ColumnName = "SourceApplicationEntityTitle";
                colvarSourceApplicationEntityTitle.DataType = DbType.AnsiString;
                colvarSourceApplicationEntityTitle.MaxLength = 16;
                colvarSourceApplicationEntityTitle.AutoIncrement = false;
                colvarSourceApplicationEntityTitle.IsNullable = true;
                colvarSourceApplicationEntityTitle.IsPrimaryKey = false;
                colvarSourceApplicationEntityTitle.IsForeignKey = false;
                colvarSourceApplicationEntityTitle.IsReadOnly = false;
                colvarSourceApplicationEntityTitle.DefaultSetting = @"";
                colvarSourceApplicationEntityTitle.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSourceApplicationEntityTitle);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("Series", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("ServerPartitionGUID")]
        [Bindable(true)]
        public Guid ServerPartitionGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerPartitionGUID); }
            set { SetColumnValue(Columns.ServerPartitionGUID, value); }
        }

        [XmlAttribute("StudyGUID")]
        [Bindable(true)]
        public Guid StudyGUID
        {
            get { return GetColumnValue<Guid>(Columns.StudyGUID); }
            set { SetColumnValue(Columns.StudyGUID, value); }
        }

        [XmlAttribute("SeriesInstanceUid")]
        [Bindable(true)]
        public string SeriesInstanceUid
        {
            get { return GetColumnValue<string>(Columns.SeriesInstanceUid); }
            set { SetColumnValue(Columns.SeriesInstanceUid, value); }
        }

        [XmlAttribute("Modality")]
        [Bindable(true)]
        public string Modality
        {
            get { return GetColumnValue<string>(Columns.Modality); }
            set { SetColumnValue(Columns.Modality, value); }
        }

        [XmlAttribute("SeriesNumber")]
        [Bindable(true)]
        public string SeriesNumber
        {
            get { return GetColumnValue<string>(Columns.SeriesNumber); }
            set { SetColumnValue(Columns.SeriesNumber, value); }
        }

        [XmlAttribute("SeriesDescription")]
        [Bindable(true)]
        public string SeriesDescription
        {
            get { return GetColumnValue<string>(Columns.SeriesDescription); }
            set { SetColumnValue(Columns.SeriesDescription, value); }
        }

        [XmlAttribute("NumberOfSeriesRelatedInstances")]
        [Bindable(true)]
        public int NumberOfSeriesRelatedInstances
        {
            get { return GetColumnValue<int>(Columns.NumberOfSeriesRelatedInstances); }
            set { SetColumnValue(Columns.NumberOfSeriesRelatedInstances, value); }
        }

        [XmlAttribute("PerformedProcedureStepStartDate")]
        [Bindable(true)]
        public string PerformedProcedureStepStartDate
        {
            get { return GetColumnValue<string>(Columns.PerformedProcedureStepStartDate); }
            set { SetColumnValue(Columns.PerformedProcedureStepStartDate, value); }
        }

        [XmlAttribute("PerformedProcedureStepStartTime")]
        [Bindable(true)]
        public string PerformedProcedureStepStartTime
        {
            get { return GetColumnValue<string>(Columns.PerformedProcedureStepStartTime); }
            set { SetColumnValue(Columns.PerformedProcedureStepStartTime, value); }
        }

        [XmlAttribute("SourceApplicationEntityTitle")]
        [Bindable(true)]
        public string SourceApplicationEntityTitle
        {
            get { return GetColumnValue<string>(Columns.SourceApplicationEntityTitle); }
            set { SetColumnValue(Columns.SourceApplicationEntityTitle, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public RequestAttributeCollection RequestAttributes()
        {
            return new RequestAttributeCollection().Where(RequestAttribute.Columns.SeriesGUID, Guid).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a ServerPartition ActiveRecord object related to this Series
        /// 
        /// </summary>
        public ServerPartition ServerPartition
        {
            get { return ServerPartition.FetchByID(ServerPartitionGUID); }
            set { SetColumnValue("ServerPartitionGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a Study ActiveRecord object related to this Series
        /// 
        /// </summary>
        public Study Study
        {
            get { return Study.FetchByID(StudyGUID); }
            set { SetColumnValue("StudyGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varServerPartitionGUID, Guid varStudyGUID,
                                  string varSeriesInstanceUid, string varModality, string varSeriesNumber,
                                  string varSeriesDescription, int varNumberOfSeriesRelatedInstances,
                                  string varPerformedProcedureStepStartDate, string varPerformedProcedureStepStartTime,
                                  string varSourceApplicationEntityTitle)
        {
            var item = new Series();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.StudyGUID = varStudyGUID;

            item.SeriesInstanceUid = varSeriesInstanceUid;

            item.Modality = varModality;

            item.SeriesNumber = varSeriesNumber;

            item.SeriesDescription = varSeriesDescription;

            item.NumberOfSeriesRelatedInstances = varNumberOfSeriesRelatedInstances;

            item.PerformedProcedureStepStartDate = varPerformedProcedureStepStartDate;

            item.PerformedProcedureStepStartTime = varPerformedProcedureStepStartTime;

            item.SourceApplicationEntityTitle = varSourceApplicationEntityTitle;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varServerPartitionGUID, Guid varStudyGUID,
                                  string varSeriesInstanceUid, string varModality, string varSeriesNumber,
                                  string varSeriesDescription, int varNumberOfSeriesRelatedInstances,
                                  string varPerformedProcedureStepStartDate, string varPerformedProcedureStepStartTime,
                                  string varSourceApplicationEntityTitle)
        {
            var item = new Series();

            item.Guid = varGuid;

            item.ServerPartitionGUID = varServerPartitionGUID;

            item.StudyGUID = varStudyGUID;

            item.SeriesInstanceUid = varSeriesInstanceUid;

            item.Modality = varModality;

            item.SeriesNumber = varSeriesNumber;

            item.SeriesDescription = varSeriesDescription;

            item.NumberOfSeriesRelatedInstances = varNumberOfSeriesRelatedInstances;

            item.PerformedProcedureStepStartDate = varPerformedProcedureStepStartDate;

            item.PerformedProcedureStepStartTime = varPerformedProcedureStepStartTime;

            item.SourceApplicationEntityTitle = varSourceApplicationEntityTitle;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ServerPartitionGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn StudyGUIDColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn SeriesInstanceUidColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn ModalityColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn SeriesNumberColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn SeriesDescriptionColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn NumberOfSeriesRelatedInstancesColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn PerformedProcedureStepStartDateColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn PerformedProcedureStepStartTimeColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn SourceApplicationEntityTitleColumn
        {
            get { return Schema.Columns[10]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string ServerPartitionGUID = @"ServerPartitionGUID";
            public static string StudyGUID = @"StudyGUID";
            public static string SeriesInstanceUid = @"SeriesInstanceUid";
            public static string Modality = @"Modality";
            public static string SeriesNumber = @"SeriesNumber";
            public static string SeriesDescription = @"SeriesDescription";
            public static string NumberOfSeriesRelatedInstances = @"NumberOfSeriesRelatedInstances";
            public static string PerformedProcedureStepStartDate = @"PerformedProcedureStepStartDate";
            public static string PerformedProcedureStepStartTime = @"PerformedProcedureStepStartTime";
            public static string SourceApplicationEntityTitle = @"SourceApplicationEntityTitle";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no ManyToMany tables defined (0)
    }
}