using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Controller class for ServerPartition
    /// </summary>
    [DataObject]
    public class ServerPartitionController
    {
        // Preload our schema..
        private ServerPartition thisSchemaLoad = new ServerPartition();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ServerPartitionCollection FetchAll()
        {
            var coll = new ServerPartitionCollection();
            var qry = new Query(ServerPartition.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ServerPartitionCollection FetchByID(object Guid)
        {
            ServerPartitionCollection coll = new ServerPartitionCollection().Where("GUID", Guid).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ServerPartitionCollection FetchByQuery(Query qry)
        {
            var coll = new ServerPartitionCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Guid)
        {
            return (ServerPartition.Delete(Guid) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Guid)
        {
            return (ServerPartition.Destroy(Guid) == 1);
        }


        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(Guid Guid, bool Enabled, string Description, string AeTitle, int Port, string PartitionFolder,
                           bool AcceptAnyDevice, bool AuditDeleteStudy, bool AutoInsertDevice, int DefaultRemotePort,
                           int StudyCount, short DuplicateSopPolicyEnum, bool MatchAccessionNumber,
                           bool MatchIssuerOfPatientId, bool MatchPatientId, bool MatchPatientsBirthDate,
                           bool MatchPatientsName, bool MatchPatientsSex)
        {
            var item = new ServerPartition();

            item.Guid = Guid;

            item.Enabled = Enabled;

            item.Description = Description;

            item.AeTitle = AeTitle;

            item.Port = Port;

            item.PartitionFolder = PartitionFolder;

            item.AcceptAnyDevice = AcceptAnyDevice;

            item.AuditDeleteStudy = AuditDeleteStudy;

            item.AutoInsertDevice = AutoInsertDevice;

            item.DefaultRemotePort = DefaultRemotePort;

            item.StudyCount = StudyCount;

            item.DuplicateSopPolicyEnum = DuplicateSopPolicyEnum;

            item.MatchAccessionNumber = MatchAccessionNumber;

            item.MatchIssuerOfPatientId = MatchIssuerOfPatientId;

            item.MatchPatientId = MatchPatientId;

            item.MatchPatientsBirthDate = MatchPatientsBirthDate;

            item.MatchPatientsName = MatchPatientsName;

            item.MatchPatientsSex = MatchPatientsSex;


            item.Save(UserName);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(Guid Guid, bool Enabled, string Description, string AeTitle, int Port, string PartitionFolder,
                           bool AcceptAnyDevice, bool AuditDeleteStudy, bool AutoInsertDevice, int DefaultRemotePort,
                           int StudyCount, short DuplicateSopPolicyEnum, bool MatchAccessionNumber,
                           bool MatchIssuerOfPatientId, bool MatchPatientId, bool MatchPatientsBirthDate,
                           bool MatchPatientsName, bool MatchPatientsSex)
        {
            var item = new ServerPartition();
            item.MarkOld();
            item.IsLoaded = true;

            item.Guid = Guid;

            item.Enabled = Enabled;

            item.Description = Description;

            item.AeTitle = AeTitle;

            item.Port = Port;

            item.PartitionFolder = PartitionFolder;

            item.AcceptAnyDevice = AcceptAnyDevice;

            item.AuditDeleteStudy = AuditDeleteStudy;

            item.AutoInsertDevice = AutoInsertDevice;

            item.DefaultRemotePort = DefaultRemotePort;

            item.StudyCount = StudyCount;

            item.DuplicateSopPolicyEnum = DuplicateSopPolicyEnum;

            item.MatchAccessionNumber = MatchAccessionNumber;

            item.MatchIssuerOfPatientId = MatchIssuerOfPatientId;

            item.MatchPatientId = MatchPatientId;

            item.MatchPatientsBirthDate = MatchPatientsBirthDate;

            item.MatchPatientsName = MatchPatientsName;

            item.MatchPatientsSex = MatchPatientsSex;

            item.Save(UserName);
        }
    }
}