using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the ServiceLock class.
    /// </summary>
    [Serializable]
    public class ServiceLockCollection : ActiveList<ServiceLock, ServiceLockCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ServiceLockCollection</returns>
        public ServiceLockCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                ServiceLock o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the ServiceLock table.
    /// </summary>
    [Serializable]
    public class ServiceLock : ActiveRecord<ServiceLock>, IActiveRecord
    {
        #region .ctors and Default Settings

        public ServiceLock()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public ServiceLock(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public ServiceLock(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public ServiceLock(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("ServiceLock", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarServiceLockTypeEnum = new TableSchema.TableColumn(schema);
                colvarServiceLockTypeEnum.ColumnName = "ServiceLockTypeEnum";
                colvarServiceLockTypeEnum.DataType = DbType.Int16;
                colvarServiceLockTypeEnum.MaxLength = 0;
                colvarServiceLockTypeEnum.AutoIncrement = false;
                colvarServiceLockTypeEnum.IsNullable = false;
                colvarServiceLockTypeEnum.IsPrimaryKey = false;
                colvarServiceLockTypeEnum.IsForeignKey = true;
                colvarServiceLockTypeEnum.IsReadOnly = false;
                colvarServiceLockTypeEnum.DefaultSetting = @"";

                colvarServiceLockTypeEnum.ForeignKeyTableName = "ServiceLockTypeEnum";
                schema.Columns.Add(colvarServiceLockTypeEnum);

                var colvarProcessorId = new TableSchema.TableColumn(schema);
                colvarProcessorId.ColumnName = "ProcessorId";
                colvarProcessorId.DataType = DbType.AnsiString;
                colvarProcessorId.MaxLength = 128;
                colvarProcessorId.AutoIncrement = false;
                colvarProcessorId.IsNullable = true;
                colvarProcessorId.IsPrimaryKey = false;
                colvarProcessorId.IsForeignKey = false;
                colvarProcessorId.IsReadOnly = false;
                colvarProcessorId.DefaultSetting = @"";
                colvarProcessorId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarProcessorId);

                var colvarLockX = new TableSchema.TableColumn(schema);
                colvarLockX.ColumnName = "Lock";
                colvarLockX.DataType = DbType.Boolean;
                colvarLockX.MaxLength = 0;
                colvarLockX.AutoIncrement = false;
                colvarLockX.IsNullable = false;
                colvarLockX.IsPrimaryKey = false;
                colvarLockX.IsForeignKey = false;
                colvarLockX.IsReadOnly = false;
                colvarLockX.DefaultSetting = @"";
                colvarLockX.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLockX);

                var colvarScheduledTime = new TableSchema.TableColumn(schema);
                colvarScheduledTime.ColumnName = "ScheduledTime";
                colvarScheduledTime.DataType = DbType.DateTime;
                colvarScheduledTime.MaxLength = 0;
                colvarScheduledTime.AutoIncrement = false;
                colvarScheduledTime.IsNullable = false;
                colvarScheduledTime.IsPrimaryKey = false;
                colvarScheduledTime.IsForeignKey = false;
                colvarScheduledTime.IsReadOnly = false;
                colvarScheduledTime.DefaultSetting = @"";
                colvarScheduledTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarScheduledTime);

                var colvarFilesystemGUID = new TableSchema.TableColumn(schema);
                colvarFilesystemGUID.ColumnName = "FilesystemGUID";
                colvarFilesystemGUID.DataType = DbType.Guid;
                colvarFilesystemGUID.MaxLength = 0;
                colvarFilesystemGUID.AutoIncrement = false;
                colvarFilesystemGUID.IsNullable = true;
                colvarFilesystemGUID.IsPrimaryKey = false;
                colvarFilesystemGUID.IsForeignKey = true;
                colvarFilesystemGUID.IsReadOnly = false;
                colvarFilesystemGUID.DefaultSetting = @"";

                colvarFilesystemGUID.ForeignKeyTableName = "Filesystem";
                schema.Columns.Add(colvarFilesystemGUID);

                var colvarEnabled = new TableSchema.TableColumn(schema);
                colvarEnabled.ColumnName = "Enabled";
                colvarEnabled.DataType = DbType.Boolean;
                colvarEnabled.MaxLength = 0;
                colvarEnabled.AutoIncrement = false;
                colvarEnabled.IsNullable = false;
                colvarEnabled.IsPrimaryKey = false;
                colvarEnabled.IsForeignKey = false;
                colvarEnabled.IsReadOnly = false;

                colvarEnabled.DefaultSetting = @"((1))";
                colvarEnabled.ForeignKeyTableName = "";
                schema.Columns.Add(colvarEnabled);

                var colvarState = new TableSchema.TableColumn(schema);
                colvarState.ColumnName = "State";
                colvarState.DataType = DbType.AnsiString;
                colvarState.MaxLength = -1;
                colvarState.AutoIncrement = false;
                colvarState.IsNullable = true;
                colvarState.IsPrimaryKey = false;
                colvarState.IsForeignKey = false;
                colvarState.IsReadOnly = false;
                colvarState.DefaultSetting = @"";
                colvarState.ForeignKeyTableName = "";
                schema.Columns.Add(colvarState);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("ServiceLock", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("ServiceLockTypeEnum")]
        [Bindable(true)]
        public short ServiceLockTypeEnum
        {
            get { return GetColumnValue<short>(Columns.ServiceLockTypeEnum); }
            set { SetColumnValue(Columns.ServiceLockTypeEnum, value); }
        }

        [XmlAttribute("ProcessorId")]
        [Bindable(true)]
        public string ProcessorId
        {
            get { return GetColumnValue<string>(Columns.ProcessorId); }
            set { SetColumnValue(Columns.ProcessorId, value); }
        }

        [XmlAttribute("LockX")]
        [Bindable(true)]
        public bool LockX
        {
            get { return GetColumnValue<bool>(Columns.LockX); }
            set { SetColumnValue(Columns.LockX, value); }
        }

        [XmlAttribute("ScheduledTime")]
        [Bindable(true)]
        public DateTime ScheduledTime
        {
            get { return GetColumnValue<DateTime>(Columns.ScheduledTime); }
            set { SetColumnValue(Columns.ScheduledTime, value); }
        }

        [XmlAttribute("FilesystemGUID")]
        [Bindable(true)]
        public Guid? FilesystemGUID
        {
            get { return GetColumnValue<Guid?>(Columns.FilesystemGUID); }
            set { SetColumnValue(Columns.FilesystemGUID, value); }
        }

        [XmlAttribute("Enabled")]
        [Bindable(true)]
        public bool Enabled
        {
            get { return GetColumnValue<bool>(Columns.Enabled); }
            set { SetColumnValue(Columns.Enabled, value); }
        }

        [XmlAttribute("State")]
        [Bindable(true)]
        public string State
        {
            get { return GetColumnValue<string>(Columns.State); }
            set { SetColumnValue(Columns.State, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a Filesystem ActiveRecord object related to this ServiceLock
        /// 
        /// </summary>
        public Filesystem Filesystem
        {
            get { return Filesystem.FetchByID(FilesystemGUID); }
            set { SetColumnValue("FilesystemGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a ServiceLockTypeEnum ActiveRecord object related to this ServiceLock
        /// 
        /// </summary>
        public ServiceLockTypeEnum ServiceLockTypeEnumRecord
        {
            get { return Models.ServiceLockTypeEnum.FetchByID(ServiceLockTypeEnum); }
            set { SetColumnValue("ServiceLockTypeEnum", value.EnumX); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, short varServiceLockTypeEnum, string varProcessorId, bool varLockX,
                                  DateTime varScheduledTime, Guid? varFilesystemGUID, bool varEnabled, string varState)
        {
            var item = new ServiceLock();

            item.Guid = varGuid;

            item.ServiceLockTypeEnum = varServiceLockTypeEnum;

            item.ProcessorId = varProcessorId;

            item.LockX = varLockX;

            item.ScheduledTime = varScheduledTime;

            item.FilesystemGUID = varFilesystemGUID;

            item.Enabled = varEnabled;

            item.State = varState;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, short varServiceLockTypeEnum, string varProcessorId, bool varLockX,
                                  DateTime varScheduledTime, Guid? varFilesystemGUID, bool varEnabled, string varState)
        {
            var item = new ServiceLock();

            item.Guid = varGuid;

            item.ServiceLockTypeEnum = varServiceLockTypeEnum;

            item.ProcessorId = varProcessorId;

            item.LockX = varLockX;

            item.ScheduledTime = varScheduledTime;

            item.FilesystemGUID = varFilesystemGUID;

            item.Enabled = varEnabled;

            item.State = varState;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ServiceLockTypeEnumColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn ProcessorIdColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn LockXColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn ScheduledTimeColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn FilesystemGUIDColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn EnabledColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn StateColumn
        {
            get { return Schema.Columns[7]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string ServiceLockTypeEnum = @"ServiceLockTypeEnum";
            public static string ProcessorId = @"ProcessorId";
            public static string LockX = @"Lock";
            public static string ScheduledTime = @"ScheduledTime";
            public static string FilesystemGUID = @"FilesystemGUID";
            public static string Enabled = @"Enabled";
            public static string State = @"State";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}