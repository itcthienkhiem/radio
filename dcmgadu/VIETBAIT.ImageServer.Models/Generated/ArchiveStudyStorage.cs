using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the ArchiveStudyStorage class.
    /// </summary>
    [Serializable]
    public class ArchiveStudyStorageCollection : ActiveList<ArchiveStudyStorage, ArchiveStudyStorageCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ArchiveStudyStorageCollection</returns>
        public ArchiveStudyStorageCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                ArchiveStudyStorage o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the ArchiveStudyStorage table.
    /// </summary>
    [Serializable]
    public class ArchiveStudyStorage : ActiveRecord<ArchiveStudyStorage>, IActiveRecord
    {
        #region .ctors and Default Settings

        public ArchiveStudyStorage()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public ArchiveStudyStorage(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public ArchiveStudyStorage(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public ArchiveStudyStorage(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("ArchiveStudyStorage", TableType.Table,
                                                   DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarPartitionArchiveGUID = new TableSchema.TableColumn(schema);
                colvarPartitionArchiveGUID.ColumnName = "PartitionArchiveGUID";
                colvarPartitionArchiveGUID.DataType = DbType.Guid;
                colvarPartitionArchiveGUID.MaxLength = 0;
                colvarPartitionArchiveGUID.AutoIncrement = false;
                colvarPartitionArchiveGUID.IsNullable = false;
                colvarPartitionArchiveGUID.IsPrimaryKey = false;
                colvarPartitionArchiveGUID.IsForeignKey = true;
                colvarPartitionArchiveGUID.IsReadOnly = false;
                colvarPartitionArchiveGUID.DefaultSetting = @"";

                colvarPartitionArchiveGUID.ForeignKeyTableName = "PartitionArchive";
                schema.Columns.Add(colvarPartitionArchiveGUID);

                var colvarStudyStorageGUID = new TableSchema.TableColumn(schema);
                colvarStudyStorageGUID.ColumnName = "StudyStorageGUID";
                colvarStudyStorageGUID.DataType = DbType.Guid;
                colvarStudyStorageGUID.MaxLength = 0;
                colvarStudyStorageGUID.AutoIncrement = false;
                colvarStudyStorageGUID.IsNullable = false;
                colvarStudyStorageGUID.IsPrimaryKey = false;
                colvarStudyStorageGUID.IsForeignKey = true;
                colvarStudyStorageGUID.IsReadOnly = false;
                colvarStudyStorageGUID.DefaultSetting = @"";

                colvarStudyStorageGUID.ForeignKeyTableName = "StudyStorage";
                schema.Columns.Add(colvarStudyStorageGUID);

                var colvarServerTransferSyntaxGUID = new TableSchema.TableColumn(schema);
                colvarServerTransferSyntaxGUID.ColumnName = "ServerTransferSyntaxGUID";
                colvarServerTransferSyntaxGUID.DataType = DbType.Guid;
                colvarServerTransferSyntaxGUID.MaxLength = 0;
                colvarServerTransferSyntaxGUID.AutoIncrement = false;
                colvarServerTransferSyntaxGUID.IsNullable = false;
                colvarServerTransferSyntaxGUID.IsPrimaryKey = false;
                colvarServerTransferSyntaxGUID.IsForeignKey = true;
                colvarServerTransferSyntaxGUID.IsReadOnly = false;
                colvarServerTransferSyntaxGUID.DefaultSetting = @"";

                colvarServerTransferSyntaxGUID.ForeignKeyTableName = "ServerTransferSyntax";
                schema.Columns.Add(colvarServerTransferSyntaxGUID);

                var colvarArchiveTime = new TableSchema.TableColumn(schema);
                colvarArchiveTime.ColumnName = "ArchiveTime";
                colvarArchiveTime.DataType = DbType.DateTime;
                colvarArchiveTime.MaxLength = 0;
                colvarArchiveTime.AutoIncrement = false;
                colvarArchiveTime.IsNullable = false;
                colvarArchiveTime.IsPrimaryKey = false;
                colvarArchiveTime.IsForeignKey = false;
                colvarArchiveTime.IsReadOnly = false;
                colvarArchiveTime.DefaultSetting = @"";
                colvarArchiveTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarArchiveTime);

                var colvarArchiveXml = new TableSchema.TableColumn(schema);
                colvarArchiveXml.ColumnName = "ArchiveXml";
                colvarArchiveXml.DataType = DbType.AnsiString;
                colvarArchiveXml.MaxLength = -1;
                colvarArchiveXml.AutoIncrement = false;
                colvarArchiveXml.IsNullable = true;
                colvarArchiveXml.IsPrimaryKey = false;
                colvarArchiveXml.IsForeignKey = false;
                colvarArchiveXml.IsReadOnly = false;
                colvarArchiveXml.DefaultSetting = @"";
                colvarArchiveXml.ForeignKeyTableName = "";
                schema.Columns.Add(colvarArchiveXml);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("ArchiveStudyStorage", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("PartitionArchiveGUID")]
        [Bindable(true)]
        public Guid PartitionArchiveGUID
        {
            get { return GetColumnValue<Guid>(Columns.PartitionArchiveGUID); }
            set { SetColumnValue(Columns.PartitionArchiveGUID, value); }
        }

        [XmlAttribute("StudyStorageGUID")]
        [Bindable(true)]
        public Guid StudyStorageGUID
        {
            get { return GetColumnValue<Guid>(Columns.StudyStorageGUID); }
            set { SetColumnValue(Columns.StudyStorageGUID, value); }
        }

        [XmlAttribute("ServerTransferSyntaxGUID")]
        [Bindable(true)]
        public Guid ServerTransferSyntaxGUID
        {
            get { return GetColumnValue<Guid>(Columns.ServerTransferSyntaxGUID); }
            set { SetColumnValue(Columns.ServerTransferSyntaxGUID, value); }
        }

        [XmlAttribute("ArchiveTime")]
        [Bindable(true)]
        public DateTime ArchiveTime
        {
            get { return GetColumnValue<DateTime>(Columns.ArchiveTime); }
            set { SetColumnValue(Columns.ArchiveTime, value); }
        }

        [XmlAttribute("ArchiveXml")]
        [Bindable(true)]
        public string ArchiveXml
        {
            get { return GetColumnValue<string>(Columns.ArchiveXml); }
            set { SetColumnValue(Columns.ArchiveXml, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public RestoreQueueCollection RestoreQueueRecords()
        {
            return new RestoreQueueCollection().Where(RestoreQueue.Columns.ArchiveStudyStorageGUID, Guid).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a PartitionArchive ActiveRecord object related to this ArchiveStudyStorage
        /// 
        /// </summary>
        public PartitionArchive PartitionArchive
        {
            get { return PartitionArchive.FetchByID(PartitionArchiveGUID); }
            set { SetColumnValue("PartitionArchiveGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a ServerTransferSyntax ActiveRecord object related to this ArchiveStudyStorage
        /// 
        /// </summary>
        public ServerTransferSyntax ServerTransferSyntax
        {
            get { return ServerTransferSyntax.FetchByID(ServerTransferSyntaxGUID); }
            set { SetColumnValue("ServerTransferSyntaxGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a StudyStorage ActiveRecord object related to this ArchiveStudyStorage
        /// 
        /// </summary>
        public StudyStorage StudyStorage
        {
            get { return StudyStorage.FetchByID(StudyStorageGUID); }
            set { SetColumnValue("StudyStorageGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varPartitionArchiveGUID, Guid varStudyStorageGUID,
                                  Guid varServerTransferSyntaxGUID, DateTime varArchiveTime, string varArchiveXml)
        {
            var item = new ArchiveStudyStorage();

            item.Guid = varGuid;

            item.PartitionArchiveGUID = varPartitionArchiveGUID;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.ServerTransferSyntaxGUID = varServerTransferSyntaxGUID;

            item.ArchiveTime = varArchiveTime;

            item.ArchiveXml = varArchiveXml;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varPartitionArchiveGUID, Guid varStudyStorageGUID,
                                  Guid varServerTransferSyntaxGUID, DateTime varArchiveTime, string varArchiveXml)
        {
            var item = new ArchiveStudyStorage();

            item.Guid = varGuid;

            item.PartitionArchiveGUID = varPartitionArchiveGUID;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.ServerTransferSyntaxGUID = varServerTransferSyntaxGUID;

            item.ArchiveTime = varArchiveTime;

            item.ArchiveXml = varArchiveXml;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn PartitionArchiveGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn StudyStorageGUIDColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn ServerTransferSyntaxGUIDColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn ArchiveTimeColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn ArchiveXmlColumn
        {
            get { return Schema.Columns[5]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string PartitionArchiveGUID = @"PartitionArchiveGUID";
            public static string StudyStorageGUID = @"StudyStorageGUID";
            public static string ServerTransferSyntaxGUID = @"ServerTransferSyntaxGUID";
            public static string ArchiveTime = @"ArchiveTime";
            public static string ArchiveXml = @"ArchiveXml";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion

        //no ManyToMany tables defined (0)
    }
}