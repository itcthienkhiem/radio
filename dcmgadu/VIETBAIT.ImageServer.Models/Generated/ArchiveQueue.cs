using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the ArchiveQueue class.
    /// </summary>
    [Serializable]
    public class ArchiveQueueCollection : ActiveList<ArchiveQueue, ArchiveQueueCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ArchiveQueueCollection</returns>
        public ArchiveQueueCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                ArchiveQueue o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the ArchiveQueue table.
    /// </summary>
    [Serializable]
    public class ArchiveQueue : ActiveRecord<ArchiveQueue>, IActiveRecord
    {
        #region .ctors and Default Settings

        public ArchiveQueue()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public ArchiveQueue(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public ArchiveQueue(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public ArchiveQueue(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("ArchiveQueue", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarPartitionArchiveGUID = new TableSchema.TableColumn(schema);
                colvarPartitionArchiveGUID.ColumnName = "PartitionArchiveGUID";
                colvarPartitionArchiveGUID.DataType = DbType.Guid;
                colvarPartitionArchiveGUID.MaxLength = 0;
                colvarPartitionArchiveGUID.AutoIncrement = false;
                colvarPartitionArchiveGUID.IsNullable = false;
                colvarPartitionArchiveGUID.IsPrimaryKey = false;
                colvarPartitionArchiveGUID.IsForeignKey = true;
                colvarPartitionArchiveGUID.IsReadOnly = false;
                colvarPartitionArchiveGUID.DefaultSetting = @"";

                colvarPartitionArchiveGUID.ForeignKeyTableName = "PartitionArchive";
                schema.Columns.Add(colvarPartitionArchiveGUID);

                var colvarScheduledTime = new TableSchema.TableColumn(schema);
                colvarScheduledTime.ColumnName = "ScheduledTime";
                colvarScheduledTime.DataType = DbType.DateTime;
                colvarScheduledTime.MaxLength = 0;
                colvarScheduledTime.AutoIncrement = false;
                colvarScheduledTime.IsNullable = false;
                colvarScheduledTime.IsPrimaryKey = false;
                colvarScheduledTime.IsForeignKey = false;
                colvarScheduledTime.IsReadOnly = false;
                colvarScheduledTime.DefaultSetting = @"";
                colvarScheduledTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarScheduledTime);

                var colvarStudyStorageGUID = new TableSchema.TableColumn(schema);
                colvarStudyStorageGUID.ColumnName = "StudyStorageGUID";
                colvarStudyStorageGUID.DataType = DbType.Guid;
                colvarStudyStorageGUID.MaxLength = 0;
                colvarStudyStorageGUID.AutoIncrement = false;
                colvarStudyStorageGUID.IsNullable = false;
                colvarStudyStorageGUID.IsPrimaryKey = false;
                colvarStudyStorageGUID.IsForeignKey = true;
                colvarStudyStorageGUID.IsReadOnly = false;
                colvarStudyStorageGUID.DefaultSetting = @"";

                colvarStudyStorageGUID.ForeignKeyTableName = "StudyStorage";
                schema.Columns.Add(colvarStudyStorageGUID);

                var colvarArchiveQueueStatusEnum = new TableSchema.TableColumn(schema);
                colvarArchiveQueueStatusEnum.ColumnName = "ArchiveQueueStatusEnum";
                colvarArchiveQueueStatusEnum.DataType = DbType.Int16;
                colvarArchiveQueueStatusEnum.MaxLength = 0;
                colvarArchiveQueueStatusEnum.AutoIncrement = false;
                colvarArchiveQueueStatusEnum.IsNullable = false;
                colvarArchiveQueueStatusEnum.IsPrimaryKey = false;
                colvarArchiveQueueStatusEnum.IsForeignKey = true;
                colvarArchiveQueueStatusEnum.IsReadOnly = false;
                colvarArchiveQueueStatusEnum.DefaultSetting = @"";

                colvarArchiveQueueStatusEnum.ForeignKeyTableName = "ArchiveQueueStatusEnum";
                schema.Columns.Add(colvarArchiveQueueStatusEnum);

                var colvarProcessorId = new TableSchema.TableColumn(schema);
                colvarProcessorId.ColumnName = "ProcessorId";
                colvarProcessorId.DataType = DbType.AnsiString;
                colvarProcessorId.MaxLength = 128;
                colvarProcessorId.AutoIncrement = false;
                colvarProcessorId.IsNullable = true;
                colvarProcessorId.IsPrimaryKey = false;
                colvarProcessorId.IsForeignKey = false;
                colvarProcessorId.IsReadOnly = false;
                colvarProcessorId.DefaultSetting = @"";
                colvarProcessorId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarProcessorId);

                var colvarFailureDescription = new TableSchema.TableColumn(schema);
                colvarFailureDescription.ColumnName = "FailureDescription";
                colvarFailureDescription.DataType = DbType.String;
                colvarFailureDescription.MaxLength = 512;
                colvarFailureDescription.AutoIncrement = false;
                colvarFailureDescription.IsNullable = true;
                colvarFailureDescription.IsPrimaryKey = false;
                colvarFailureDescription.IsForeignKey = false;
                colvarFailureDescription.IsReadOnly = false;
                colvarFailureDescription.DefaultSetting = @"";
                colvarFailureDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFailureDescription);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("ArchiveQueue", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("PartitionArchiveGUID")]
        [Bindable(true)]
        public Guid PartitionArchiveGUID
        {
            get { return GetColumnValue<Guid>(Columns.PartitionArchiveGUID); }
            set { SetColumnValue(Columns.PartitionArchiveGUID, value); }
        }

        [XmlAttribute("ScheduledTime")]
        [Bindable(true)]
        public DateTime ScheduledTime
        {
            get { return GetColumnValue<DateTime>(Columns.ScheduledTime); }
            set { SetColumnValue(Columns.ScheduledTime, value); }
        }

        [XmlAttribute("StudyStorageGUID")]
        [Bindable(true)]
        public Guid StudyStorageGUID
        {
            get { return GetColumnValue<Guid>(Columns.StudyStorageGUID); }
            set { SetColumnValue(Columns.StudyStorageGUID, value); }
        }

        [XmlAttribute("ArchiveQueueStatusEnum")]
        [Bindable(true)]
        public short ArchiveQueueStatusEnum
        {
            get { return GetColumnValue<short>(Columns.ArchiveQueueStatusEnum); }
            set { SetColumnValue(Columns.ArchiveQueueStatusEnum, value); }
        }

        [XmlAttribute("ProcessorId")]
        [Bindable(true)]
        public string ProcessorId
        {
            get { return GetColumnValue<string>(Columns.ProcessorId); }
            set { SetColumnValue(Columns.ProcessorId, value); }
        }

        [XmlAttribute("FailureDescription")]
        [Bindable(true)]
        public string FailureDescription
        {
            get { return GetColumnValue<string>(Columns.FailureDescription); }
            set { SetColumnValue(Columns.FailureDescription, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a ArchiveQueueStatusEnum ActiveRecord object related to this ArchiveQueue
        /// 
        /// </summary>
        public ArchiveQueueStatusEnum ArchiveQueueStatusEnumRecord
        {
            get { return Models.ArchiveQueueStatusEnum.FetchByID(ArchiveQueueStatusEnum); }
            set { SetColumnValue("ArchiveQueueStatusEnum", value.EnumX); }
        }


        /// <summary>
        /// Returns a PartitionArchive ActiveRecord object related to this ArchiveQueue
        /// 
        /// </summary>
        public PartitionArchive PartitionArchive
        {
            get { return PartitionArchive.FetchByID(PartitionArchiveGUID); }
            set { SetColumnValue("PartitionArchiveGUID", value.Guid); }
        }


        /// <summary>
        /// Returns a StudyStorage ActiveRecord object related to this ArchiveQueue
        /// 
        /// </summary>
        public StudyStorage StudyStorage
        {
            get { return StudyStorage.FetchByID(StudyStorageGUID); }
            set { SetColumnValue("StudyStorageGUID", value.Guid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, Guid varPartitionArchiveGUID, DateTime varScheduledTime,
                                  Guid varStudyStorageGUID, short varArchiveQueueStatusEnum, string varProcessorId,
                                  string varFailureDescription)
        {
            var item = new ArchiveQueue();

            item.Guid = varGuid;

            item.PartitionArchiveGUID = varPartitionArchiveGUID;

            item.ScheduledTime = varScheduledTime;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.ArchiveQueueStatusEnum = varArchiveQueueStatusEnum;

            item.ProcessorId = varProcessorId;

            item.FailureDescription = varFailureDescription;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, Guid varPartitionArchiveGUID, DateTime varScheduledTime,
                                  Guid varStudyStorageGUID, short varArchiveQueueStatusEnum, string varProcessorId,
                                  string varFailureDescription)
        {
            var item = new ArchiveQueue();

            item.Guid = varGuid;

            item.PartitionArchiveGUID = varPartitionArchiveGUID;

            item.ScheduledTime = varScheduledTime;

            item.StudyStorageGUID = varStudyStorageGUID;

            item.ArchiveQueueStatusEnum = varArchiveQueueStatusEnum;

            item.ProcessorId = varProcessorId;

            item.FailureDescription = varFailureDescription;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn PartitionArchiveGUIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn ScheduledTimeColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn StudyStorageGUIDColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn ArchiveQueueStatusEnumColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn ProcessorIdColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn FailureDescriptionColumn
        {
            get { return Schema.Columns[6]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string PartitionArchiveGUID = @"PartitionArchiveGUID";
            public static string ScheduledTime = @"ScheduledTime";
            public static string StudyStorageGUID = @"StudyStorageGUID";
            public static string ArchiveQueueStatusEnum = @"ArchiveQueueStatusEnum";
            public static string ProcessorId = @"ProcessorId";
            public static string FailureDescription = @"FailureDescription";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}