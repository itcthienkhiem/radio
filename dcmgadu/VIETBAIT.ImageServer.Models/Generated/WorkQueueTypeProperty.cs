using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    /// <summary>
    /// Strongly-typed collection for the WorkQueueTypeProperty class.
    /// </summary>
    [Serializable]
    public class WorkQueueTypePropertyCollection : ActiveList<WorkQueueTypeProperty, WorkQueueTypePropertyCollection>
    {
        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>WorkQueueTypePropertyCollection</returns>
        public WorkQueueTypePropertyCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                WorkQueueTypeProperty o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the WorkQueueTypeProperties table.
    /// </summary>
    [Serializable]
    public class WorkQueueTypeProperty : ActiveRecord<WorkQueueTypeProperty>, IActiveRecord
    {
        #region .ctors and Default Settings

        public WorkQueueTypeProperty()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public WorkQueueTypeProperty(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public WorkQueueTypeProperty(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public WorkQueueTypeProperty(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("WorkQueueTypeProperties", TableType.Table,
                                                   DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarGuid = new TableSchema.TableColumn(schema);
                colvarGuid.ColumnName = "GUID";
                colvarGuid.DataType = DbType.Guid;
                colvarGuid.MaxLength = 0;
                colvarGuid.AutoIncrement = false;
                colvarGuid.IsNullable = false;
                colvarGuid.IsPrimaryKey = true;
                colvarGuid.IsForeignKey = false;
                colvarGuid.IsReadOnly = false;

                colvarGuid.DefaultSetting = @"(newid())";
                colvarGuid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGuid);

                var colvarWorkQueueTypeEnum = new TableSchema.TableColumn(schema);
                colvarWorkQueueTypeEnum.ColumnName = "WorkQueueTypeEnum";
                colvarWorkQueueTypeEnum.DataType = DbType.Int16;
                colvarWorkQueueTypeEnum.MaxLength = 0;
                colvarWorkQueueTypeEnum.AutoIncrement = false;
                colvarWorkQueueTypeEnum.IsNullable = false;
                colvarWorkQueueTypeEnum.IsPrimaryKey = false;
                colvarWorkQueueTypeEnum.IsForeignKey = true;
                colvarWorkQueueTypeEnum.IsReadOnly = false;
                colvarWorkQueueTypeEnum.DefaultSetting = @"";

                colvarWorkQueueTypeEnum.ForeignKeyTableName = "WorkQueueTypeEnum";
                schema.Columns.Add(colvarWorkQueueTypeEnum);

                var colvarWorkQueuePriorityEnum = new TableSchema.TableColumn(schema);
                colvarWorkQueuePriorityEnum.ColumnName = "WorkQueuePriorityEnum";
                colvarWorkQueuePriorityEnum.DataType = DbType.Int16;
                colvarWorkQueuePriorityEnum.MaxLength = 0;
                colvarWorkQueuePriorityEnum.AutoIncrement = false;
                colvarWorkQueuePriorityEnum.IsNullable = false;
                colvarWorkQueuePriorityEnum.IsPrimaryKey = false;
                colvarWorkQueuePriorityEnum.IsForeignKey = true;
                colvarWorkQueuePriorityEnum.IsReadOnly = false;
                colvarWorkQueuePriorityEnum.DefaultSetting = @"";

                colvarWorkQueuePriorityEnum.ForeignKeyTableName = "WorkQueuePriorityEnum";
                schema.Columns.Add(colvarWorkQueuePriorityEnum);

                var colvarMemoryLimited = new TableSchema.TableColumn(schema);
                colvarMemoryLimited.ColumnName = "MemoryLimited";
                colvarMemoryLimited.DataType = DbType.Boolean;
                colvarMemoryLimited.MaxLength = 0;
                colvarMemoryLimited.AutoIncrement = false;
                colvarMemoryLimited.IsNullable = false;
                colvarMemoryLimited.IsPrimaryKey = false;
                colvarMemoryLimited.IsForeignKey = false;
                colvarMemoryLimited.IsReadOnly = false;
                colvarMemoryLimited.DefaultSetting = @"";
                colvarMemoryLimited.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMemoryLimited);

                var colvarAlertFailedWorkQueue = new TableSchema.TableColumn(schema);
                colvarAlertFailedWorkQueue.ColumnName = "AlertFailedWorkQueue";
                colvarAlertFailedWorkQueue.DataType = DbType.Boolean;
                colvarAlertFailedWorkQueue.MaxLength = 0;
                colvarAlertFailedWorkQueue.AutoIncrement = false;
                colvarAlertFailedWorkQueue.IsNullable = false;
                colvarAlertFailedWorkQueue.IsPrimaryKey = false;
                colvarAlertFailedWorkQueue.IsForeignKey = false;
                colvarAlertFailedWorkQueue.IsReadOnly = false;
                colvarAlertFailedWorkQueue.DefaultSetting = @"";
                colvarAlertFailedWorkQueue.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAlertFailedWorkQueue);

                var colvarMaxFailureCount = new TableSchema.TableColumn(schema);
                colvarMaxFailureCount.ColumnName = "MaxFailureCount";
                colvarMaxFailureCount.DataType = DbType.Int32;
                colvarMaxFailureCount.MaxLength = 0;
                colvarMaxFailureCount.AutoIncrement = false;
                colvarMaxFailureCount.IsNullable = false;
                colvarMaxFailureCount.IsPrimaryKey = false;
                colvarMaxFailureCount.IsForeignKey = false;
                colvarMaxFailureCount.IsReadOnly = false;
                colvarMaxFailureCount.DefaultSetting = @"";
                colvarMaxFailureCount.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMaxFailureCount);

                var colvarProcessDelaySeconds = new TableSchema.TableColumn(schema);
                colvarProcessDelaySeconds.ColumnName = "ProcessDelaySeconds";
                colvarProcessDelaySeconds.DataType = DbType.Int32;
                colvarProcessDelaySeconds.MaxLength = 0;
                colvarProcessDelaySeconds.AutoIncrement = false;
                colvarProcessDelaySeconds.IsNullable = false;
                colvarProcessDelaySeconds.IsPrimaryKey = false;
                colvarProcessDelaySeconds.IsForeignKey = false;
                colvarProcessDelaySeconds.IsReadOnly = false;
                colvarProcessDelaySeconds.DefaultSetting = @"";
                colvarProcessDelaySeconds.ForeignKeyTableName = "";
                schema.Columns.Add(colvarProcessDelaySeconds);

                var colvarFailureDelaySeconds = new TableSchema.TableColumn(schema);
                colvarFailureDelaySeconds.ColumnName = "FailureDelaySeconds";
                colvarFailureDelaySeconds.DataType = DbType.Int32;
                colvarFailureDelaySeconds.MaxLength = 0;
                colvarFailureDelaySeconds.AutoIncrement = false;
                colvarFailureDelaySeconds.IsNullable = false;
                colvarFailureDelaySeconds.IsPrimaryKey = false;
                colvarFailureDelaySeconds.IsForeignKey = false;
                colvarFailureDelaySeconds.IsReadOnly = false;
                colvarFailureDelaySeconds.DefaultSetting = @"";
                colvarFailureDelaySeconds.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFailureDelaySeconds);

                var colvarDeleteDelaySeconds = new TableSchema.TableColumn(schema);
                colvarDeleteDelaySeconds.ColumnName = "DeleteDelaySeconds";
                colvarDeleteDelaySeconds.DataType = DbType.Int32;
                colvarDeleteDelaySeconds.MaxLength = 0;
                colvarDeleteDelaySeconds.AutoIncrement = false;
                colvarDeleteDelaySeconds.IsNullable = false;
                colvarDeleteDelaySeconds.IsPrimaryKey = false;
                colvarDeleteDelaySeconds.IsForeignKey = false;
                colvarDeleteDelaySeconds.IsReadOnly = false;
                colvarDeleteDelaySeconds.DefaultSetting = @"";
                colvarDeleteDelaySeconds.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeleteDelaySeconds);

                var colvarPostponeDelaySeconds = new TableSchema.TableColumn(schema);
                colvarPostponeDelaySeconds.ColumnName = "PostponeDelaySeconds";
                colvarPostponeDelaySeconds.DataType = DbType.Int32;
                colvarPostponeDelaySeconds.MaxLength = 0;
                colvarPostponeDelaySeconds.AutoIncrement = false;
                colvarPostponeDelaySeconds.IsNullable = false;
                colvarPostponeDelaySeconds.IsPrimaryKey = false;
                colvarPostponeDelaySeconds.IsForeignKey = false;
                colvarPostponeDelaySeconds.IsReadOnly = false;
                colvarPostponeDelaySeconds.DefaultSetting = @"";
                colvarPostponeDelaySeconds.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPostponeDelaySeconds);

                var colvarExpireDelaySeconds = new TableSchema.TableColumn(schema);
                colvarExpireDelaySeconds.ColumnName = "ExpireDelaySeconds";
                colvarExpireDelaySeconds.DataType = DbType.Int32;
                colvarExpireDelaySeconds.MaxLength = 0;
                colvarExpireDelaySeconds.AutoIncrement = false;
                colvarExpireDelaySeconds.IsNullable = false;
                colvarExpireDelaySeconds.IsPrimaryKey = false;
                colvarExpireDelaySeconds.IsForeignKey = false;
                colvarExpireDelaySeconds.IsReadOnly = false;
                colvarExpireDelaySeconds.DefaultSetting = @"";
                colvarExpireDelaySeconds.ForeignKeyTableName = "";
                schema.Columns.Add(colvarExpireDelaySeconds);

                var colvarMaxBatchSize = new TableSchema.TableColumn(schema);
                colvarMaxBatchSize.ColumnName = "MaxBatchSize";
                colvarMaxBatchSize.DataType = DbType.Int32;
                colvarMaxBatchSize.MaxLength = 0;
                colvarMaxBatchSize.AutoIncrement = false;
                colvarMaxBatchSize.IsNullable = false;
                colvarMaxBatchSize.IsPrimaryKey = false;
                colvarMaxBatchSize.IsForeignKey = false;
                colvarMaxBatchSize.IsReadOnly = false;
                colvarMaxBatchSize.DefaultSetting = @"";
                colvarMaxBatchSize.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMaxBatchSize);

                var colvarQueueStudyStateEnum = new TableSchema.TableColumn(schema);
                colvarQueueStudyStateEnum.ColumnName = "QueueStudyStateEnum";
                colvarQueueStudyStateEnum.DataType = DbType.Int16;
                colvarQueueStudyStateEnum.MaxLength = 0;
                colvarQueueStudyStateEnum.AutoIncrement = false;
                colvarQueueStudyStateEnum.IsNullable = true;
                colvarQueueStudyStateEnum.IsPrimaryKey = false;
                colvarQueueStudyStateEnum.IsForeignKey = false;
                colvarQueueStudyStateEnum.IsReadOnly = false;
                colvarQueueStudyStateEnum.DefaultSetting = @"";
                colvarQueueStudyStateEnum.ForeignKeyTableName = "";
                schema.Columns.Add(colvarQueueStudyStateEnum);

                var colvarQueueStudyStateOrder = new TableSchema.TableColumn(schema);
                colvarQueueStudyStateOrder.ColumnName = "QueueStudyStateOrder";
                colvarQueueStudyStateOrder.DataType = DbType.Int16;
                colvarQueueStudyStateOrder.MaxLength = 0;
                colvarQueueStudyStateOrder.AutoIncrement = false;
                colvarQueueStudyStateOrder.IsNullable = true;
                colvarQueueStudyStateOrder.IsPrimaryKey = false;
                colvarQueueStudyStateOrder.IsForeignKey = false;
                colvarQueueStudyStateOrder.IsReadOnly = false;
                colvarQueueStudyStateOrder.DefaultSetting = @"";
                colvarQueueStudyStateOrder.ForeignKeyTableName = "";
                schema.Columns.Add(colvarQueueStudyStateOrder);

                var colvarReadLock = new TableSchema.TableColumn(schema);
                colvarReadLock.ColumnName = "ReadLock";
                colvarReadLock.DataType = DbType.Boolean;
                colvarReadLock.MaxLength = 0;
                colvarReadLock.AutoIncrement = false;
                colvarReadLock.IsNullable = false;
                colvarReadLock.IsPrimaryKey = false;
                colvarReadLock.IsForeignKey = false;
                colvarReadLock.IsReadOnly = false;
                colvarReadLock.DefaultSetting = @"";
                colvarReadLock.ForeignKeyTableName = "";
                schema.Columns.Add(colvarReadLock);

                var colvarWriteLock = new TableSchema.TableColumn(schema);
                colvarWriteLock.ColumnName = "WriteLock";
                colvarWriteLock.DataType = DbType.Boolean;
                colvarWriteLock.MaxLength = 0;
                colvarWriteLock.AutoIncrement = false;
                colvarWriteLock.IsNullable = false;
                colvarWriteLock.IsPrimaryKey = false;
                colvarWriteLock.IsForeignKey = false;
                colvarWriteLock.IsReadOnly = false;
                colvarWriteLock.DefaultSetting = @"";
                colvarWriteLock.ForeignKeyTableName = "";
                schema.Columns.Add(colvarWriteLock);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("WorkQueueTypeProperties", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Guid")]
        [Bindable(true)]
        public Guid Guid
        {
            get { return GetColumnValue<Guid>(Columns.Guid); }
            set { SetColumnValue(Columns.Guid, value); }
        }

        [XmlAttribute("WorkQueueTypeEnum")]
        [Bindable(true)]
        public short WorkQueueTypeEnum
        {
            get { return GetColumnValue<short>(Columns.WorkQueueTypeEnum); }
            set { SetColumnValue(Columns.WorkQueueTypeEnum, value); }
        }

        [XmlAttribute("WorkQueuePriorityEnum")]
        [Bindable(true)]
        public short WorkQueuePriorityEnum
        {
            get { return GetColumnValue<short>(Columns.WorkQueuePriorityEnum); }
            set { SetColumnValue(Columns.WorkQueuePriorityEnum, value); }
        }

        [XmlAttribute("MemoryLimited")]
        [Bindable(true)]
        public bool MemoryLimited
        {
            get { return GetColumnValue<bool>(Columns.MemoryLimited); }
            set { SetColumnValue(Columns.MemoryLimited, value); }
        }

        [XmlAttribute("AlertFailedWorkQueue")]
        [Bindable(true)]
        public bool AlertFailedWorkQueue
        {
            get { return GetColumnValue<bool>(Columns.AlertFailedWorkQueue); }
            set { SetColumnValue(Columns.AlertFailedWorkQueue, value); }
        }

        [XmlAttribute("MaxFailureCount")]
        [Bindable(true)]
        public int MaxFailureCount
        {
            get { return GetColumnValue<int>(Columns.MaxFailureCount); }
            set { SetColumnValue(Columns.MaxFailureCount, value); }
        }

        [XmlAttribute("ProcessDelaySeconds")]
        [Bindable(true)]
        public int ProcessDelaySeconds
        {
            get { return GetColumnValue<int>(Columns.ProcessDelaySeconds); }
            set { SetColumnValue(Columns.ProcessDelaySeconds, value); }
        }

        [XmlAttribute("FailureDelaySeconds")]
        [Bindable(true)]
        public int FailureDelaySeconds
        {
            get { return GetColumnValue<int>(Columns.FailureDelaySeconds); }
            set { SetColumnValue(Columns.FailureDelaySeconds, value); }
        }

        [XmlAttribute("DeleteDelaySeconds")]
        [Bindable(true)]
        public int DeleteDelaySeconds
        {
            get { return GetColumnValue<int>(Columns.DeleteDelaySeconds); }
            set { SetColumnValue(Columns.DeleteDelaySeconds, value); }
        }

        [XmlAttribute("PostponeDelaySeconds")]
        [Bindable(true)]
        public int PostponeDelaySeconds
        {
            get { return GetColumnValue<int>(Columns.PostponeDelaySeconds); }
            set { SetColumnValue(Columns.PostponeDelaySeconds, value); }
        }

        [XmlAttribute("ExpireDelaySeconds")]
        [Bindable(true)]
        public int ExpireDelaySeconds
        {
            get { return GetColumnValue<int>(Columns.ExpireDelaySeconds); }
            set { SetColumnValue(Columns.ExpireDelaySeconds, value); }
        }

        [XmlAttribute("MaxBatchSize")]
        [Bindable(true)]
        public int MaxBatchSize
        {
            get { return GetColumnValue<int>(Columns.MaxBatchSize); }
            set { SetColumnValue(Columns.MaxBatchSize, value); }
        }

        [XmlAttribute("QueueStudyStateEnum")]
        [Bindable(true)]
        public short? QueueStudyStateEnum
        {
            get { return GetColumnValue<short?>(Columns.QueueStudyStateEnum); }
            set { SetColumnValue(Columns.QueueStudyStateEnum, value); }
        }

        [XmlAttribute("QueueStudyStateOrder")]
        [Bindable(true)]
        public short? QueueStudyStateOrder
        {
            get { return GetColumnValue<short?>(Columns.QueueStudyStateOrder); }
            set { SetColumnValue(Columns.QueueStudyStateOrder, value); }
        }

        [XmlAttribute("ReadLock")]
        [Bindable(true)]
        public bool ReadLock
        {
            get { return GetColumnValue<bool>(Columns.ReadLock); }
            set { SetColumnValue(Columns.ReadLock, value); }
        }

        [XmlAttribute("WriteLock")]
        [Bindable(true)]
        public bool WriteLock
        {
            get { return GetColumnValue<bool>(Columns.WriteLock); }
            set { SetColumnValue(Columns.WriteLock, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        /// Returns a WorkQueuePriorityEnum ActiveRecord object related to this WorkQueueTypeProperty
        /// 
        /// </summary>
        public WorkQueuePriorityEnum WorkQueuePriorityEnumRecord
        {
            get { return Models.WorkQueuePriorityEnum.FetchByID(WorkQueuePriorityEnum); }
            set { SetColumnValue("WorkQueuePriorityEnum", value.EnumX); }
        }


        /// <summary>
        /// Returns a WorkQueueTypeEnum ActiveRecord object related to this WorkQueueTypeProperty
        /// 
        /// </summary>
        public WorkQueueTypeEnum WorkQueueTypeEnumRecord
        {
            get { return Models.WorkQueueTypeEnum.FetchByID(WorkQueueTypeEnum); }
            set { SetColumnValue("WorkQueueTypeEnum", value.EnumX); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(Guid varGuid, short varWorkQueueTypeEnum, short varWorkQueuePriorityEnum,
                                  bool varMemoryLimited, bool varAlertFailedWorkQueue, int varMaxFailureCount,
                                  int varProcessDelaySeconds, int varFailureDelaySeconds, int varDeleteDelaySeconds,
                                  int varPostponeDelaySeconds, int varExpireDelaySeconds, int varMaxBatchSize,
                                  short? varQueueStudyStateEnum, short? varQueueStudyStateOrder, bool varReadLock,
                                  bool varWriteLock)
        {
            var item = new WorkQueueTypeProperty();

            item.Guid = varGuid;

            item.WorkQueueTypeEnum = varWorkQueueTypeEnum;

            item.WorkQueuePriorityEnum = varWorkQueuePriorityEnum;

            item.MemoryLimited = varMemoryLimited;

            item.AlertFailedWorkQueue = varAlertFailedWorkQueue;

            item.MaxFailureCount = varMaxFailureCount;

            item.ProcessDelaySeconds = varProcessDelaySeconds;

            item.FailureDelaySeconds = varFailureDelaySeconds;

            item.DeleteDelaySeconds = varDeleteDelaySeconds;

            item.PostponeDelaySeconds = varPostponeDelaySeconds;

            item.ExpireDelaySeconds = varExpireDelaySeconds;

            item.MaxBatchSize = varMaxBatchSize;

            item.QueueStudyStateEnum = varQueueStudyStateEnum;

            item.QueueStudyStateOrder = varQueueStudyStateOrder;

            item.ReadLock = varReadLock;

            item.WriteLock = varWriteLock;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varGuid, short varWorkQueueTypeEnum, short varWorkQueuePriorityEnum,
                                  bool varMemoryLimited, bool varAlertFailedWorkQueue, int varMaxFailureCount,
                                  int varProcessDelaySeconds, int varFailureDelaySeconds, int varDeleteDelaySeconds,
                                  int varPostponeDelaySeconds, int varExpireDelaySeconds, int varMaxBatchSize,
                                  short? varQueueStudyStateEnum, short? varQueueStudyStateOrder, bool varReadLock,
                                  bool varWriteLock)
        {
            var item = new WorkQueueTypeProperty();

            item.Guid = varGuid;

            item.WorkQueueTypeEnum = varWorkQueueTypeEnum;

            item.WorkQueuePriorityEnum = varWorkQueuePriorityEnum;

            item.MemoryLimited = varMemoryLimited;

            item.AlertFailedWorkQueue = varAlertFailedWorkQueue;

            item.MaxFailureCount = varMaxFailureCount;

            item.ProcessDelaySeconds = varProcessDelaySeconds;

            item.FailureDelaySeconds = varFailureDelaySeconds;

            item.DeleteDelaySeconds = varDeleteDelaySeconds;

            item.PostponeDelaySeconds = varPostponeDelaySeconds;

            item.ExpireDelaySeconds = varExpireDelaySeconds;

            item.MaxBatchSize = varMaxBatchSize;

            item.QueueStudyStateEnum = varQueueStudyStateEnum;

            item.QueueStudyStateOrder = varQueueStudyStateOrder;

            item.ReadLock = varReadLock;

            item.WriteLock = varWriteLock;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn GuidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn WorkQueueTypeEnumColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn WorkQueuePriorityEnumColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn MemoryLimitedColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn AlertFailedWorkQueueColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn MaxFailureCountColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn ProcessDelaySecondsColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn FailureDelaySecondsColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn DeleteDelaySecondsColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn PostponeDelaySecondsColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn ExpireDelaySecondsColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn MaxBatchSizeColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn QueueStudyStateEnumColumn
        {
            get { return Schema.Columns[12]; }
        }


        public static TableSchema.TableColumn QueueStudyStateOrderColumn
        {
            get { return Schema.Columns[13]; }
        }


        public static TableSchema.TableColumn ReadLockColumn
        {
            get { return Schema.Columns[14]; }
        }


        public static TableSchema.TableColumn WriteLockColumn
        {
            get { return Schema.Columns[15]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Guid = @"GUID";
            public static string WorkQueueTypeEnum = @"WorkQueueTypeEnum";
            public static string WorkQueuePriorityEnum = @"WorkQueuePriorityEnum";
            public static string MemoryLimited = @"MemoryLimited";
            public static string AlertFailedWorkQueue = @"AlertFailedWorkQueue";
            public static string MaxFailureCount = @"MaxFailureCount";
            public static string ProcessDelaySeconds = @"ProcessDelaySeconds";
            public static string FailureDelaySeconds = @"FailureDelaySeconds";
            public static string DeleteDelaySeconds = @"DeleteDelaySeconds";
            public static string PostponeDelaySeconds = @"PostponeDelaySeconds";
            public static string ExpireDelaySeconds = @"ExpireDelaySeconds";
            public static string MaxBatchSize = @"MaxBatchSize";
            public static string QueueStudyStateEnum = @"QueueStudyStateEnum";
            public static string QueueStudyStateOrder = @"QueueStudyStateOrder";
            public static string ReadLock = @"ReadLock";
            public static string WriteLock = @"WriteLock";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}