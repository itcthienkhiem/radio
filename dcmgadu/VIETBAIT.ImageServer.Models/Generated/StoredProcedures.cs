using System;
using System.Data;
using SubSonic;

// <auto-generated />

namespace VIETBAIT.ImageServer.Models
{
    public class SPs
    {
        /// <summary>
        /// Creates an object wrapper for the AttachStudyToPatient Procedure
        /// </summary>
        public static StoredProcedure AttachStudyToPatient(Guid? StudyGUID, Guid? NewPatientGUID)
        {
            var sp = new StoredProcedure("AttachStudyToPatient", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyGUID", StudyGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@NewPatientGUID", NewPatientGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the CreatePatientForStudy Procedure
        /// </summary>
        public static StoredProcedure CreatePatientForStudy(Guid? StudyGUID, string PatientsName, string PatientId,
                                                            string IssuerOfPatientId, string SpecificCharacterSet)
        {
            var sp = new StoredProcedure("CreatePatientForStudy", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyGUID", StudyGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@PatientsName", PatientsName, DbType.String, null, null);

            sp.Command.AddParameter("@PatientId", PatientId, DbType.String, null, null);

            sp.Command.AddParameter("@IssuerOfPatientId", IssuerOfPatientId, DbType.String, null, null);

            sp.Command.AddParameter("@SpecificCharacterSet", SpecificCharacterSet, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the DeleteFilesystemStudyStorage Procedure
        /// </summary>
        public static StoredProcedure DeleteFilesystemStudyStorage(Guid? ServerPartitionGUID, Guid? StudyStorageGUID,
                                                                   short? StudyStatusEnum)
        {
            var sp = new StoredProcedure("DeleteFilesystemStudyStorage", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStatusEnum", StudyStatusEnum, DbType.Int16, 0, 5);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the DeleteInstance Procedure
        /// </summary>
        public static StoredProcedure DeleteInstance(Guid? StudyStorageGUID, string SeriesInstanceUid,
                                                     string SOPInstanceUid)
        {
            var sp = new StoredProcedure("DeleteInstance", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@SeriesInstanceUid", SeriesInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SOPInstanceUid", SOPInstanceUid, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the DeleteSeries Procedure
        /// </summary>
        public static StoredProcedure DeleteSeries(Guid? StudyStorageGUID, string SeriesInstanceUID)
        {
            var sp = new StoredProcedure("DeleteSeries", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@SeriesInstanceUID", SeriesInstanceUID, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the DeleteServerPartition Procedure
        /// </summary>
        public static StoredProcedure DeleteServerPartition(Guid? ServerPartitionGUID, bool? DeleteStudies)
        {
            var sp = new StoredProcedure("DeleteServerPartition", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@DeleteStudies", DeleteStudies, DbType.Boolean, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the DeleteStudyStorage Procedure
        /// </summary>
        public static StoredProcedure DeleteStudyStorage(Guid? ServerPartitionGUID, Guid? StudyStorageGUID)
        {
            var sp = new StoredProcedure("DeleteStudyStorage", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the DeleteWorkQueue Procedure
        /// </summary>
        public static StoredProcedure DeleteWorkQueue(Guid? WorkQueueGUID, Guid? ServerPartitionGUID,
                                                      short? WorkQueueTypeEnum, Guid? StudyStorageGUID)
        {
            var sp = new StoredProcedure("DeleteWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@WorkQueueGUID", WorkQueueGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@WorkQueueTypeEnum", WorkQueueTypeEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertArchiveQueue Procedure
        /// </summary>
        public static StoredProcedure InsertArchiveQueue(Guid? ServerPartitionGUID, Guid? StudyStorageGUID)
        {
            var sp = new StoredProcedure("InsertArchiveQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertDuplicateSopReceivedQueue Procedure
        /// </summary>
        public static StoredProcedure InsertDuplicateSopReceivedQueue(string Description, Guid? ServerPartitionGUID,
                                                                      Guid? StudyStorageGUID, string StudyInstanceUid,
                                                                      string SeriesInstanceUid, string SeriesDescription,
                                                                      string SopInstanceUid, string StudyData,
                                                                      string Details, string GroupId,
                                                                      string UidRelativePath)
        {
            var sp = new StoredProcedure("InsertDuplicateSopReceivedQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@Description", Description, DbType.String, null, null);

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyInstanceUid", StudyInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesInstanceUid", SeriesInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesDescription", SeriesDescription, DbType.String, null, null);

            sp.Command.AddParameter("@SopInstanceUid", SopInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@StudyData", StudyData, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@Details", Details, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@GroupId", GroupId, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@UidRelativePath", UidRelativePath, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertFilesystem Procedure
        /// </summary>
        public static StoredProcedure InsertFilesystem(short? FilesystemTierEnum, string FilesystemPath, bool? Enabled,
                                                       bool? ReadOnlyX, bool? WriteOnlyX, string Description,
                                                       decimal? HighWatermark, decimal? LowWatermark)
        {
            var sp = new StoredProcedure("InsertFilesystem", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@FilesystemTierEnum", FilesystemTierEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@FilesystemPath", FilesystemPath, DbType.String, null, null);

            sp.Command.AddParameter("@Enabled", Enabled, DbType.Boolean, null, null);

            sp.Command.AddParameter("@ReadOnly", ReadOnlyX, DbType.Boolean, null, null);

            sp.Command.AddParameter("@WriteOnly", WriteOnlyX, DbType.Boolean, null, null);

            sp.Command.AddParameter("@Description", Description, DbType.String, null, null);

            sp.Command.AddParameter("@HighWatermark", HighWatermark, DbType.Decimal, 2, 6);

            sp.Command.AddParameter("@LowWatermark", LowWatermark, DbType.Decimal, 2, 6);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertFilesystemQueue Procedure
        /// </summary>
        public static StoredProcedure InsertFilesystemQueue(short? FilesystemQueueTypeEnum, Guid? StudyStorageGUID,
                                                            Guid? FilesystemGUID, DateTime? ScheduledTime,
                                                            string SeriesInstanceUid, string QueueXml)
        {
            var sp = new StoredProcedure("InsertFilesystemQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@FilesystemQueueTypeEnum", FilesystemQueueTypeEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@FilesystemGUID", FilesystemGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@SeriesInstanceUid", SeriesInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@QueueXml", QueueXml, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertInstance Procedure
        /// </summary>
        public static StoredProcedure InsertInstance(Guid? ServerPartitionGUID, Guid? StudyStorageGUID, string PatientId,
                                                     string PatientsName, string IssuerOfPatientId,
                                                     string StudyInstanceUid, string PatientsBirthDate,
                                                     string PatientsSex, string StudyDate, string StudyTime,
                                                     string AccessionNumber, string StudyId, string StudyDescription,
                                                     string ReferringPhysiciansName, string SeriesInstanceUid,
                                                     string Modality, string SeriesNumber, string SeriesDescription,
                                                     string PerformedProcedureStepStartDate,
                                                     string PerformedProcedureStepStartTime,
                                                     string SourceApplicationEntityTitle, string SpecificCharacterSet,
                                                     string PatientsAge)
        {
            var sp = new StoredProcedure("InsertInstance", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@PatientId", PatientId, DbType.String, null, null);

            sp.Command.AddParameter("@PatientsName", PatientsName, DbType.String, null, null);

            sp.Command.AddParameter("@IssuerOfPatientId", IssuerOfPatientId, DbType.String, null, null);

            sp.Command.AddParameter("@StudyInstanceUid", StudyInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@PatientsBirthDate", PatientsBirthDate, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@PatientsSex", PatientsSex, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@StudyDate", StudyDate, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@StudyTime", StudyTime, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@AccessionNumber", AccessionNumber, DbType.String, null, null);

            sp.Command.AddParameter("@StudyId", StudyId, DbType.String, null, null);

            sp.Command.AddParameter("@StudyDescription", StudyDescription, DbType.String, null, null);

            sp.Command.AddParameter("@ReferringPhysiciansName", ReferringPhysiciansName, DbType.String, null, null);

            sp.Command.AddParameter("@SeriesInstanceUid", SeriesInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@Modality", Modality, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesNumber", SeriesNumber, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesDescription", SeriesDescription, DbType.String, null, null);

            sp.Command.AddParameter("@PerformedProcedureStepStartDate", PerformedProcedureStepStartDate,
                                    DbType.AnsiString, null, null);

            sp.Command.AddParameter("@PerformedProcedureStepStartTime", PerformedProcedureStepStartTime,
                                    DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SourceApplicationEntityTitle", SourceApplicationEntityTitle, DbType.AnsiString,
                                    null, null);

            sp.Command.AddParameter("@SpecificCharacterSet", SpecificCharacterSet, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@PatientsAge", PatientsAge, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertRequestAttributes Procedure
        /// </summary>
        public static StoredProcedure InsertRequestAttributes(Guid? SeriesGUID, string RequestedProcedureId,
                                                              string ScheduledProcedureStepId)
        {
            var sp = new StoredProcedure("InsertRequestAttributes", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@SeriesGUID", SeriesGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@RequestedProcedureId", RequestedProcedureId, DbType.String, null, null);

            sp.Command.AddParameter("@ScheduledProcedureStepId", ScheduledProcedureStepId, DbType.String, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertRestoreQueue Procedure
        /// </summary>
        public static StoredProcedure InsertRestoreQueue(Guid? StudyStorageGUID, Guid? ArchiveStudyStorageGUID)
        {
            var sp = new StoredProcedure("InsertRestoreQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ArchiveStudyStorageGUID", ArchiveStudyStorageGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertServerPartition Procedure
        /// </summary>
        public static StoredProcedure InsertServerPartition(bool? Enabled, string Description, string AeTitle, int? Port,
                                                            string PartitionFolder, short? DuplicateSopPolicyEnum,
                                                            bool? AcceptAnyDevice, bool? AutoInsertDevice,
                                                            int? DefaultRemotePort, bool? MatchPatientsName,
                                                            bool? MatchPatientId, bool? MatchAccessionNumber,
                                                            bool? MatchPatientsBirthDate, bool? MatchIssuerOfPatientId,
                                                            bool? MatchPatientsSex, bool? AuditDeleteStudy)
        {
            var sp = new StoredProcedure("InsertServerPartition", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@Enabled", Enabled, DbType.Boolean, null, null);

            sp.Command.AddParameter("@Description", Description, DbType.String, null, null);

            sp.Command.AddParameter("@AeTitle", AeTitle, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@Port", Port, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@PartitionFolder", PartitionFolder, DbType.String, null, null);

            sp.Command.AddParameter("@DuplicateSopPolicyEnum", DuplicateSopPolicyEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@AcceptAnyDevice", AcceptAnyDevice, DbType.Boolean, null, null);

            sp.Command.AddParameter("@AutoInsertDevice", AutoInsertDevice, DbType.Boolean, null, null);

            sp.Command.AddParameter("@DefaultRemotePort", DefaultRemotePort, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@MatchPatientsName", MatchPatientsName, DbType.Boolean, null, null);

            sp.Command.AddParameter("@MatchPatientId", MatchPatientId, DbType.Boolean, null, null);

            sp.Command.AddParameter("@MatchAccessionNumber", MatchAccessionNumber, DbType.Boolean, null, null);

            sp.Command.AddParameter("@MatchPatientsBirthDate", MatchPatientsBirthDate, DbType.Boolean, null, null);

            sp.Command.AddParameter("@MatchIssuerOfPatientId", MatchIssuerOfPatientId, DbType.Boolean, null, null);

            sp.Command.AddParameter("@MatchPatientsSex", MatchPatientsSex, DbType.Boolean, null, null);

            sp.Command.AddParameter("@AuditDeleteStudy", AuditDeleteStudy, DbType.Boolean, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertStudyIntegrityQueue Procedure
        /// </summary>
        public static StoredProcedure InsertStudyIntegrityQueue(string Description, Guid? ServerPartitionGUID,
                                                                Guid? StudyStorageGUID, string StudyInstanceUid,
                                                                string SeriesInstanceUid, string SeriesDescription,
                                                                string SopInstanceUid, string StudyData, string Details,
                                                                string GroupID, string UidRelativePath,
                                                                short? StudyIntegrityReasonEnum, bool? Inserted)
        {
            var sp = new StoredProcedure("InsertStudyIntegrityQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@Description", Description, DbType.String, null, null);

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyInstanceUid", StudyInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesInstanceUid", SeriesInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesDescription", SeriesDescription, DbType.String, null, null);

            sp.Command.AddParameter("@SopInstanceUid", SopInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@StudyData", StudyData, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@Details", Details, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@GroupID", GroupID, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@UidRelativePath", UidRelativePath, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@StudyIntegrityReasonEnum", StudyIntegrityReasonEnum, DbType.Int16, 0, 5);

            sp.Command.AddOutputParameter("@Inserted", DbType.Boolean, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertStudyStorage Procedure
        /// </summary>
        public static StoredProcedure InsertStudyStorage(Guid? ServerPartitionGUID, string StudyInstanceUid,
                                                         string Folder, Guid? FilesystemGUID, string TransferSyntaxUid,
                                                         short? StudyStatusEnum, short? QueueStudyStateEnum)
        {
            var sp = new StoredProcedure("InsertStudyStorage", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyInstanceUid", StudyInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@Folder", Folder, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@FilesystemGUID", FilesystemGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@TransferSyntaxUid", TransferSyntaxUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@StudyStatusEnum", StudyStatusEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@QueueStudyStateEnum", QueueStudyStateEnum, DbType.Int16, 0, 5);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertWorkQueue Procedure
        /// </summary>
        public static StoredProcedure InsertWorkQueue(Guid? StudyStorageGUID, Guid? ServerPartitionGUID,
                                                      short? WorkQueueTypeEnum, DateTime? ScheduledTime,
                                                      Guid? DeviceGUID, Guid? StudyHistoryGUID, string Data,
                                                      string SeriesInstanceUid, string SopInstanceUid, bool? Duplicate,
                                                      string Extension, string WorkQueueGroupID, string UidGroupID,
                                                      string UidRelativePath)
        {
            var sp = new StoredProcedure("InsertWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@WorkQueueTypeEnum", WorkQueueTypeEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@DeviceGUID", DeviceGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyHistoryGUID", StudyHistoryGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@Data", Data, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesInstanceUid", SeriesInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SopInstanceUid", SopInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@Duplicate", Duplicate, DbType.Boolean, null, null);

            sp.Command.AddParameter("@Extension", Extension, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@WorkQueueGroupID", WorkQueueGroupID, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@UidGroupID", UidGroupID, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@UidRelativePath", UidRelativePath, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the InsertWorkQueueFromFilesystemQueue Procedure
        /// </summary>
        public static StoredProcedure InsertWorkQueueFromFilesystemQueue(Guid? StudyStorageGUID,
                                                                         Guid? ServerPartitionGUID,
                                                                         DateTime? ScheduledTime,
                                                                         bool? DeleteFilesystemQueue,
                                                                         short? WorkQueueTypeEnum,
                                                                         short? FilesystemQueueTypeEnum, string Data)
        {
            var sp = new StoredProcedure("InsertWorkQueueFromFilesystemQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@DeleteFilesystemQueue", DeleteFilesystemQueue, DbType.Boolean, null, null);

            sp.Command.AddParameter("@WorkQueueTypeEnum", WorkQueueTypeEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@FilesystemQueueTypeEnum", FilesystemQueueTypeEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@Data", Data, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the LockStudy Procedure
        /// </summary>
        public static StoredProcedure LockStudy(Guid? StudyStorageGUID, bool? ReadLock, bool? WriteLock,
                                                short? QueueStudyStateEnum, bool? Successful, string FailureReason)
        {
            var sp = new StoredProcedure("LockStudy", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ReadLock", ReadLock, DbType.Boolean, null, null);

            sp.Command.AddParameter("@WriteLock", WriteLock, DbType.Boolean, null, null);

            sp.Command.AddParameter("@QueueStudyStateEnum", QueueStudyStateEnum, DbType.Int16, 0, 5);

            sp.Command.AddOutputParameter("@Successful", DbType.Boolean, null, null);

            sp.Command.AddOutputParameter("@FailureReason", DbType.String, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the PostponeWorkQueue Procedure
        /// </summary>
        public static StoredProcedure PostponeWorkQueue(Guid? WorkQueueGUID, DateTime? ScheduledTime,
                                                        DateTime? ExpirationTime, string Reason, bool? UpdateWorkQueue)
        {
            var sp = new StoredProcedure("PostponeWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@WorkQueueGUID", WorkQueueGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@ExpirationTime", ExpirationTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@Reason", Reason, DbType.String, null, null);

            sp.Command.AddParameter("@UpdateWorkQueue", UpdateWorkQueue, DbType.Boolean, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryArchiveQueue Procedure
        /// </summary>
        public static StoredProcedure QueryArchiveQueue(Guid? PartitionArchiveGUID, string ProcessorID)
        {
            var sp = new StoredProcedure("QueryArchiveQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@PartitionArchiveGUID", PartitionArchiveGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ProcessorID", ProcessorID, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryCurrentStudyMove Procedure
        /// </summary>
        public static StoredProcedure QueryCurrentStudyMove(Guid? DeviceGUID)
        {
            var sp = new StoredProcedure("QueryCurrentStudyMove", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@DeviceGUID", DeviceGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryFilesystemQueue Procedure
        /// </summary>
        public static StoredProcedure QueryFilesystemQueue(Guid? FilesystemGUID, short? FilesystemQueueTypeEnum,
                                                           DateTime? ScheduledTime, int? Results)
        {
            var sp = new StoredProcedure("QueryFilesystemQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@FilesystemGUID", FilesystemGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@FilesystemQueueTypeEnum", FilesystemQueueTypeEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@Results", Results, DbType.Int32, 0, 10);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryModalitiesInStudy Procedure
        /// </summary>
        public static StoredProcedure QueryModalitiesInStudy(Guid? StudyGUID)
        {
            var sp = new StoredProcedure("QueryModalitiesInStudy", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyGUID", StudyGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryRestoreQueue Procedure
        /// </summary>
        public static StoredProcedure QueryRestoreQueue(Guid? PartitionArchiveGUID, short? RestoreQueueStatusEnum,
                                                        string ProcessorID)
        {
            var sp = new StoredProcedure("QueryRestoreQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@PartitionArchiveGUID", PartitionArchiveGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@RestoreQueueStatusEnum", RestoreQueueStatusEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@ProcessorID", ProcessorID, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryServerPartitionSopClasses Procedure
        /// </summary>
        public static StoredProcedure QueryServerPartitionSopClasses(Guid? ServerPartitionGUID)
        {
            var sp = new StoredProcedure("QueryServerPartitionSopClasses", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryServerPartitionTransferSyntaxes Procedure
        /// </summary>
        public static StoredProcedure QueryServerPartitionTransferSyntaxes(Guid? ServerPartitionGUID)
        {
            var sp = new StoredProcedure("QueryServerPartitionTransferSyntaxes", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryServiceLock Procedure
        /// </summary>
        public static StoredProcedure QueryServiceLock(string ProcessorId, short? ServiceLockTypeEnum)
        {
            var sp = new StoredProcedure("QueryServiceLock", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ProcessorId", ProcessorId, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@ServiceLockTypeEnum", ServiceLockTypeEnum, DbType.Int16, 0, 5);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryStudyStorageLocation Procedure
        /// </summary>
        public static StoredProcedure QueryStudyStorageLocation(Guid? StudyStorageGUID, Guid? ServerPartitionGUID,
                                                                string StudyInstanceUid)
        {
            var sp = new StoredProcedure("QueryStudyStorageLocation", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyInstanceUid", StudyInstanceUid, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the QueryWorkQueue Procedure
        /// </summary>
        public static StoredProcedure QueryWorkQueue(string ProcessorID, short? WorkQueuePriorityEnum,
                                                     bool? MemoryLimited)
        {
            var sp = new StoredProcedure("QueryWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ProcessorID", ProcessorID, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@WorkQueuePriorityEnum", WorkQueuePriorityEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@MemoryLimited", MemoryLimited, DbType.Boolean, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the ResetServiceLock Procedure
        /// </summary>
        public static StoredProcedure ResetServiceLock(string ProcessorId, short? ServiceLockTypeEnum)
        {
            var sp = new StoredProcedure("ResetServiceLock", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ProcessorId", ProcessorId, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@ServiceLockTypeEnum", ServiceLockTypeEnum, DbType.Int16, 0, 5);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the ResetStudyStorage Procedure
        /// </summary>
        public static StoredProcedure ResetStudyStorage(Guid? StudyStorageGUID)
        {
            var sp = new StoredProcedure("ResetStudyStorage", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the ResetWorkQueue Procedure
        /// </summary>
        public static StoredProcedure ResetWorkQueue(string ProcessorID, int? MaxFailureCount, DateTime? RescheduleTime,
                                                     DateTime? FailedExpirationTime, DateTime? RetryExpirationTime)
        {
            var sp = new StoredProcedure("ResetWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ProcessorID", ProcessorID, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@MaxFailureCount", MaxFailureCount, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@RescheduleTime", RescheduleTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@FailedExpirationTime", FailedExpirationTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@RetryExpirationTime", RetryExpirationTime, DbType.DateTime, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the SetSeriesRelatedInstanceCount Procedure
        /// </summary>
        public static StoredProcedure SetSeriesRelatedInstanceCount(Guid? StudyStorageGUID, string SeriesInstanceUid,
                                                                    int? SeriesRelatedInstanceCount)
        {
            var sp = new StoredProcedure("SetSeriesRelatedInstanceCount", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@SeriesInstanceUid", SeriesInstanceUid, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@SeriesRelatedInstanceCount", SeriesRelatedInstanceCount, DbType.Int32, 0, 10);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the SetStudyRelatedInstanceCount Procedure
        /// </summary>
        public static StoredProcedure SetStudyRelatedInstanceCount(Guid? StudyStorageGUID,
                                                                   int? StudyRelatedInstanceCount,
                                                                   int? StudyRelatedSeriesCount)
        {
            var sp = new StoredProcedure("SetStudyRelatedInstanceCount", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyRelatedInstanceCount", StudyRelatedInstanceCount, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@StudyRelatedSeriesCount", StudyRelatedSeriesCount, DbType.Int32, 0, 10);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the UpdateArchiveQueue Procedure
        /// </summary>
        public static StoredProcedure UpdateArchiveQueue(Guid? ArchiveQueueGUID, Guid? StudyStorageGUID,
                                                         DateTime? ScheduledTime, short? ArchiveQueueStatusEnum,
                                                         string FailureDescription)
        {
            var sp = new StoredProcedure("UpdateArchiveQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ArchiveQueueGUID", ArchiveQueueGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@ArchiveQueueStatusEnum", ArchiveQueueStatusEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@FailureDescription", FailureDescription, DbType.String, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the UpdateRestoreQueue Procedure
        /// </summary>
        public static StoredProcedure UpdateRestoreQueue(Guid? RestoreQueueGUID, Guid? StudyStorageGUID,
                                                         DateTime? ScheduledTime, short? RestoreQueueStatusEnum,
                                                         string FailureDescription)
        {
            var sp = new StoredProcedure("UpdateRestoreQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@RestoreQueueGUID", RestoreQueueGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@RestoreQueueStatusEnum", RestoreQueueStatusEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@FailureDescription", FailureDescription, DbType.String, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the UpdateServiceLock Procedure
        /// </summary>
        public static StoredProcedure UpdateServiceLock(string ProcessorId, Guid? ServiceLockGUID, bool? LockX,
                                                        DateTime? ScheduledTime, bool? Enabled)
        {
            var sp = new StoredProcedure("UpdateServiceLock", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ProcessorId", ProcessorId, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@ServiceLockGUID", ServiceLockGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@Lock", LockX, DbType.Boolean, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@Enabled", Enabled, DbType.Boolean, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the UpdateStudyStateFromWorkQueue Procedure
        /// </summary>
        public static StoredProcedure UpdateStudyStateFromWorkQueue(Guid? StudyStorageGUID)
        {
            var sp = new StoredProcedure("UpdateStudyStateFromWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the UpdateWorkQueue Procedure
        /// </summary>
        public static StoredProcedure UpdateWorkQueue(string ProcessorID, Guid? WorkQueueGUID, Guid? StudyStorageGUID,
                                                      short? WorkQueueStatusEnum, int? FailureCount,
                                                      DateTime? ExpirationTime, DateTime? ScheduledTime,
                                                      string FailureDescription, short? QueueStudyStateEnum)
        {
            var sp = new StoredProcedure("UpdateWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ProcessorID", ProcessorID, DbType.AnsiString, null, null);

            sp.Command.AddParameter("@WorkQueueGUID", WorkQueueGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@StudyStorageGUID", StudyStorageGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@WorkQueueStatusEnum", WorkQueueStatusEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@FailureCount", FailureCount, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@ExpirationTime", ExpirationTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@FailureDescription", FailureDescription, DbType.String, null, null);

            sp.Command.AddParameter("@QueueStudyStateEnum", QueueStudyStateEnum, DbType.Int16, 0, 5);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the VBQueryPartitionFolderFromAETitle Procedure
        /// </summary>
        public static StoredProcedure VBQueryPartitionFolderFromAETitle(string AETitle)
        {
            var sp = new StoredProcedure("VBQueryPartitionFolderFromAETitle", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@AETitle", AETitle, DbType.AnsiString, null, null);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the WebQueryArchiveQueue Procedure
        /// </summary>
        public static StoredProcedure WebQueryArchiveQueue(Guid? ServerPartitionGUID, string PatientId,
                                                           string PatientsName, string AccessionNumber,
                                                           DateTime? ScheduledTime, short? ArchiveQueueStatusEnum,
                                                           int? StartIndex, int? MaxRowCount, int? ResultCount)
        {
            var sp = new StoredProcedure("WebQueryArchiveQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@PatientId", PatientId, DbType.String, null, null);

            sp.Command.AddParameter("@PatientsName", PatientsName, DbType.String, null, null);

            sp.Command.AddParameter("@AccessionNumber", AccessionNumber, DbType.String, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@ArchiveQueueStatusEnum", ArchiveQueueStatusEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@StartIndex", StartIndex, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@MaxRowCount", MaxRowCount, DbType.Int32, 0, 10);

            sp.Command.AddOutputParameter("@ResultCount", DbType.Int32, 0, 10);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the WebQueryRestoreQueue Procedure
        /// </summary>
        public static StoredProcedure WebQueryRestoreQueue(Guid? ServerPartitionGUID, string PatientId,
                                                           string PatientsName, string AccessionNumber,
                                                           DateTime? ScheduledTime, short? RestoreQueueStatusEnum,
                                                           int? StartIndex, int? MaxRowCount, int? ResultCount)
        {
            var sp = new StoredProcedure("WebQueryRestoreQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@PatientId", PatientId, DbType.String, null, null);

            sp.Command.AddParameter("@PatientsName", PatientsName, DbType.String, null, null);

            sp.Command.AddParameter("@AccessionNumber", AccessionNumber, DbType.String, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@RestoreQueueStatusEnum", RestoreQueueStatusEnum, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@StartIndex", StartIndex, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@MaxRowCount", MaxRowCount, DbType.Int32, 0, 10);

            sp.Command.AddOutputParameter("@ResultCount", DbType.Int32, 0, 10);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the WebQueryWorkQueue Procedure
        /// </summary>
        public static StoredProcedure WebQueryWorkQueue(Guid? ServerPartitionGUID, string PatientID, string ProcessorID,
                                                        string PatientsName, DateTime? ScheduledTime, string Type,
                                                        string Status, short? Priority, int? StartIndex,
                                                        int? MaxRowCount, int? ResultCount)
        {
            var sp = new StoredProcedure("WebQueryWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@ServerPartitionGUID", ServerPartitionGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@PatientID", PatientID, DbType.String, null, null);

            sp.Command.AddParameter("@ProcessorID", ProcessorID, DbType.String, null, null);

            sp.Command.AddParameter("@PatientsName", PatientsName, DbType.String, null, null);

            sp.Command.AddParameter("@ScheduledTime", ScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@Type", Type, DbType.String, null, null);

            sp.Command.AddParameter("@Status", Status, DbType.String, null, null);

            sp.Command.AddParameter("@Priority", Priority, DbType.Int16, 0, 5);

            sp.Command.AddParameter("@StartIndex", StartIndex, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@MaxRowCount", MaxRowCount, DbType.Int32, 0, 10);

            sp.Command.AddOutputParameter("@ResultCount", DbType.Int32, 0, 10);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the WebResetWorkQueue Procedure
        /// </summary>
        public static StoredProcedure WebResetWorkQueue(Guid? WorkQueueGUID, DateTime? NewScheduledTime,
                                                        DateTime? NewExpirationTime, short? NewPriority)
        {
            var sp = new StoredProcedure("WebResetWorkQueue", DataService.GetInstance("ORM"), "dbo");

            sp.Command.AddParameter("@WorkQueueGUID", WorkQueueGUID, DbType.Guid, null, null);

            sp.Command.AddParameter("@NewScheduledTime", NewScheduledTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@NewExpirationTime", NewExpirationTime, DbType.DateTime, null, null);

            sp.Command.AddParameter("@NewPriority", NewPriority, DbType.Int16, 0, 5);

            return sp;
        }

        /// <summary>
        /// Creates an object wrapper for the WorkQueueProcessorIDs Procedure
        /// </summary>
        public static StoredProcedure WorkQueueProcessorIDs()
        {
            var sp = new StoredProcedure("WorkQueueProcessorIDs", DataService.GetInstance("ORM"), "");

            return sp;
        }
    }
}